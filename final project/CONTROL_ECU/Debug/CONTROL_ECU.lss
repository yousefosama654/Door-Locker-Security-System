
CONTROL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000284a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011a  00800060  0000284a  000028de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  0080017a  0080017a  000029f8  2**0
                  ALLOC
  3 .stab         00003000  00000000  00000000  000029f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000246b  00000000  00000000  000059f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00007e63  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  00008003  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  000081f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  0000a5ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  0000b976  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000cb50  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000cd10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000d003  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d9d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 fc 0a 	jmp	0x15f8	; 0x15f8 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e4       	ldi	r30, 0x4A	; 74
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 38       	cpi	r26, 0x8D	; 141
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <main>
      8a:	0c 94 23 14 	jmp	0x2846	; 0x2846 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ec 13 	jmp	0x27d8	; 0x27d8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 08 14 	jmp	0x2810	; 0x2810 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f8 13 	jmp	0x27f0	; 0x27f0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 14 14 	jmp	0x2828	; 0x2828 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f8 13 	jmp	0x27f0	; 0x27f0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 14 14 	jmp	0x2828	; 0x2828 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ec 13 	jmp	0x27d8	; 0x27d8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 08 14 	jmp	0x2810	; 0x2810 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f4 13 	jmp	0x27e8	; 0x27e8 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 10 14 	jmp	0x2820	; 0x2820 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 f8 13 	jmp	0x27f0	; 0x27f0 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 14 14 	jmp	0x2828	; 0x2828 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 f8 13 	jmp	0x27f0	; 0x27f0 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 14 14 	jmp	0x2828	; 0x2828 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 f8 13 	jmp	0x27f0	; 0x27f0 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 14 14 	jmp	0x2828	; 0x2828 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 f5 13 	jmp	0x27ea	; 0x27ea <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 11 14 	jmp	0x2822	; 0x2822 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 fc 13 	jmp	0x27f8	; 0x27f8 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 18 14 	jmp	0x2830	; 0x2830 <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	e8 59       	subi	r30, 0x98	; 152
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	00 d0       	rcall	.+0      	; 0xdfe <GPIO_setupPinDirection+0x6>
     dfe:	00 d0       	rcall	.+0      	; 0xe00 <GPIO_setupPinDirection+0x8>
     e00:	0f 92       	push	r0
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
     e06:	89 83       	std	Y+1, r24	; 0x01
     e08:	6a 83       	std	Y+2, r22	; 0x02
     e0a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     e0c:	8a 81       	ldd	r24, Y+2	; 0x02
     e0e:	88 30       	cpi	r24, 0x08	; 8
     e10:	08 f0       	brcs	.+2      	; 0xe14 <GPIO_setupPinDirection+0x1c>
     e12:	d5 c0       	rjmp	.+426    	; 0xfbe <GPIO_setupPinDirection+0x1c6>
     e14:	89 81       	ldd	r24, Y+1	; 0x01
     e16:	84 30       	cpi	r24, 0x04	; 4
     e18:	08 f0       	brcs	.+2      	; 0xe1c <GPIO_setupPinDirection+0x24>
     e1a:	d1 c0       	rjmp	.+418    	; 0xfbe <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     e1c:	89 81       	ldd	r24, Y+1	; 0x01
     e1e:	28 2f       	mov	r18, r24
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	3d 83       	std	Y+5, r19	; 0x05
     e24:	2c 83       	std	Y+4, r18	; 0x04
     e26:	8c 81       	ldd	r24, Y+4	; 0x04
     e28:	9d 81       	ldd	r25, Y+5	; 0x05
     e2a:	81 30       	cpi	r24, 0x01	; 1
     e2c:	91 05       	cpc	r25, r1
     e2e:	09 f4       	brne	.+2      	; 0xe32 <GPIO_setupPinDirection+0x3a>
     e30:	43 c0       	rjmp	.+134    	; 0xeb8 <GPIO_setupPinDirection+0xc0>
     e32:	2c 81       	ldd	r18, Y+4	; 0x04
     e34:	3d 81       	ldd	r19, Y+5	; 0x05
     e36:	22 30       	cpi	r18, 0x02	; 2
     e38:	31 05       	cpc	r19, r1
     e3a:	2c f4       	brge	.+10     	; 0xe46 <GPIO_setupPinDirection+0x4e>
     e3c:	8c 81       	ldd	r24, Y+4	; 0x04
     e3e:	9d 81       	ldd	r25, Y+5	; 0x05
     e40:	00 97       	sbiw	r24, 0x00	; 0
     e42:	71 f0       	breq	.+28     	; 0xe60 <GPIO_setupPinDirection+0x68>
     e44:	bc c0       	rjmp	.+376    	; 0xfbe <GPIO_setupPinDirection+0x1c6>
     e46:	2c 81       	ldd	r18, Y+4	; 0x04
     e48:	3d 81       	ldd	r19, Y+5	; 0x05
     e4a:	22 30       	cpi	r18, 0x02	; 2
     e4c:	31 05       	cpc	r19, r1
     e4e:	09 f4       	brne	.+2      	; 0xe52 <GPIO_setupPinDirection+0x5a>
     e50:	5f c0       	rjmp	.+190    	; 0xf10 <GPIO_setupPinDirection+0x118>
     e52:	8c 81       	ldd	r24, Y+4	; 0x04
     e54:	9d 81       	ldd	r25, Y+5	; 0x05
     e56:	83 30       	cpi	r24, 0x03	; 3
     e58:	91 05       	cpc	r25, r1
     e5a:	09 f4       	brne	.+2      	; 0xe5e <GPIO_setupPinDirection+0x66>
     e5c:	85 c0       	rjmp	.+266    	; 0xf68 <GPIO_setupPinDirection+0x170>
     e5e:	af c0       	rjmp	.+350    	; 0xfbe <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     e60:	8b 81       	ldd	r24, Y+3	; 0x03
     e62:	81 30       	cpi	r24, 0x01	; 1
     e64:	a1 f4       	brne	.+40     	; 0xe8e <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     e66:	aa e3       	ldi	r26, 0x3A	; 58
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	ea e3       	ldi	r30, 0x3A	; 58
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	48 2f       	mov	r20, r24
     e72:	8a 81       	ldd	r24, Y+2	; 0x02
     e74:	28 2f       	mov	r18, r24
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	02 2e       	mov	r0, r18
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <GPIO_setupPinDirection+0x8c>
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	0a 94       	dec	r0
     e86:	e2 f7       	brpl	.-8      	; 0xe80 <GPIO_setupPinDirection+0x88>
     e88:	84 2b       	or	r24, r20
     e8a:	8c 93       	st	X, r24
     e8c:	98 c0       	rjmp	.+304    	; 0xfbe <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     e8e:	aa e3       	ldi	r26, 0x3A	; 58
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	ea e3       	ldi	r30, 0x3A	; 58
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	48 2f       	mov	r20, r24
     e9a:	8a 81       	ldd	r24, Y+2	; 0x02
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 2e       	mov	r0, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <GPIO_setupPinDirection+0xb4>
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	0a 94       	dec	r0
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <GPIO_setupPinDirection+0xb0>
     eb0:	80 95       	com	r24
     eb2:	84 23       	and	r24, r20
     eb4:	8c 93       	st	X, r24
     eb6:	83 c0       	rjmp	.+262    	; 0xfbe <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     eb8:	8b 81       	ldd	r24, Y+3	; 0x03
     eba:	81 30       	cpi	r24, 0x01	; 1
     ebc:	a1 f4       	brne	.+40     	; 0xee6 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     ebe:	a7 e3       	ldi	r26, 0x37	; 55
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	e7 e3       	ldi	r30, 0x37	; 55
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	48 2f       	mov	r20, r24
     eca:	8a 81       	ldd	r24, Y+2	; 0x02
     ecc:	28 2f       	mov	r18, r24
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	02 2e       	mov	r0, r18
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <GPIO_setupPinDirection+0xe4>
     ed8:	88 0f       	add	r24, r24
     eda:	99 1f       	adc	r25, r25
     edc:	0a 94       	dec	r0
     ede:	e2 f7       	brpl	.-8      	; 0xed8 <GPIO_setupPinDirection+0xe0>
     ee0:	84 2b       	or	r24, r20
     ee2:	8c 93       	st	X, r24
     ee4:	6c c0       	rjmp	.+216    	; 0xfbe <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     ee6:	a7 e3       	ldi	r26, 0x37	; 55
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	e7 e3       	ldi	r30, 0x37	; 55
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	48 2f       	mov	r20, r24
     ef2:	8a 81       	ldd	r24, Y+2	; 0x02
     ef4:	28 2f       	mov	r18, r24
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	02 2e       	mov	r0, r18
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <GPIO_setupPinDirection+0x10c>
     f00:	88 0f       	add	r24, r24
     f02:	99 1f       	adc	r25, r25
     f04:	0a 94       	dec	r0
     f06:	e2 f7       	brpl	.-8      	; 0xf00 <GPIO_setupPinDirection+0x108>
     f08:	80 95       	com	r24
     f0a:	84 23       	and	r24, r20
     f0c:	8c 93       	st	X, r24
     f0e:	57 c0       	rjmp	.+174    	; 0xfbe <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     f10:	8b 81       	ldd	r24, Y+3	; 0x03
     f12:	81 30       	cpi	r24, 0x01	; 1
     f14:	a1 f4       	brne	.+40     	; 0xf3e <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     f16:	a4 e3       	ldi	r26, 0x34	; 52
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e4 e3       	ldi	r30, 0x34	; 52
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 2e       	mov	r0, r18
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <GPIO_setupPinDirection+0x13c>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	0a 94       	dec	r0
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <GPIO_setupPinDirection+0x138>
     f38:	84 2b       	or	r24, r20
     f3a:	8c 93       	st	X, r24
     f3c:	40 c0       	rjmp	.+128    	; 0xfbe <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     f3e:	a4 e3       	ldi	r26, 0x34	; 52
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e4 e3       	ldi	r30, 0x34	; 52
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	48 2f       	mov	r20, r24
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	02 2e       	mov	r0, r18
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <GPIO_setupPinDirection+0x164>
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	0a 94       	dec	r0
     f5e:	e2 f7       	brpl	.-8      	; 0xf58 <GPIO_setupPinDirection+0x160>
     f60:	80 95       	com	r24
     f62:	84 23       	and	r24, r20
     f64:	8c 93       	st	X, r24
     f66:	2b c0       	rjmp	.+86     	; 0xfbe <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     f68:	8b 81       	ldd	r24, Y+3	; 0x03
     f6a:	81 30       	cpi	r24, 0x01	; 1
     f6c:	a1 f4       	brne	.+40     	; 0xf96 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     f6e:	a1 e3       	ldi	r26, 0x31	; 49
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e1 e3       	ldi	r30, 0x31	; 49
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	48 2f       	mov	r20, r24
     f7a:	8a 81       	ldd	r24, Y+2	; 0x02
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	02 2e       	mov	r0, r18
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <GPIO_setupPinDirection+0x194>
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	0a 94       	dec	r0
     f8e:	e2 f7       	brpl	.-8      	; 0xf88 <GPIO_setupPinDirection+0x190>
     f90:	84 2b       	or	r24, r20
     f92:	8c 93       	st	X, r24
     f94:	14 c0       	rjmp	.+40     	; 0xfbe <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     f96:	a1 e3       	ldi	r26, 0x31	; 49
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e1 e3       	ldi	r30, 0x31	; 49
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	48 2f       	mov	r20, r24
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	02 2e       	mov	r0, r18
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <GPIO_setupPinDirection+0x1bc>
     fb0:	88 0f       	add	r24, r24
     fb2:	99 1f       	adc	r25, r25
     fb4:	0a 94       	dec	r0
     fb6:	e2 f7       	brpl	.-8      	; 0xfb0 <GPIO_setupPinDirection+0x1b8>
     fb8:	80 95       	com	r24
     fba:	84 23       	and	r24, r20
     fbc:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     fbe:	0f 90       	pop	r0
     fc0:	0f 90       	pop	r0
     fc2:	0f 90       	pop	r0
     fc4:	0f 90       	pop	r0
     fc6:	0f 90       	pop	r0
     fc8:	cf 91       	pop	r28
     fca:	df 91       	pop	r29
     fcc:	08 95       	ret

00000fce <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     fce:	df 93       	push	r29
     fd0:	cf 93       	push	r28
     fd2:	00 d0       	rcall	.+0      	; 0xfd4 <GPIO_writePin+0x6>
     fd4:	00 d0       	rcall	.+0      	; 0xfd6 <GPIO_writePin+0x8>
     fd6:	0f 92       	push	r0
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
     fdc:	89 83       	std	Y+1, r24	; 0x01
     fde:	6a 83       	std	Y+2, r22	; 0x02
     fe0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     fe2:	8a 81       	ldd	r24, Y+2	; 0x02
     fe4:	88 30       	cpi	r24, 0x08	; 8
     fe6:	08 f0       	brcs	.+2      	; 0xfea <GPIO_writePin+0x1c>
     fe8:	d5 c0       	rjmp	.+426    	; 0x1194 <GPIO_writePin+0x1c6>
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	84 30       	cpi	r24, 0x04	; 4
     fee:	08 f0       	brcs	.+2      	; 0xff2 <GPIO_writePin+0x24>
     ff0:	d1 c0       	rjmp	.+418    	; 0x1194 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	3d 83       	std	Y+5, r19	; 0x05
     ffa:	2c 83       	std	Y+4, r18	; 0x04
     ffc:	8c 81       	ldd	r24, Y+4	; 0x04
     ffe:	9d 81       	ldd	r25, Y+5	; 0x05
    1000:	81 30       	cpi	r24, 0x01	; 1
    1002:	91 05       	cpc	r25, r1
    1004:	09 f4       	brne	.+2      	; 0x1008 <GPIO_writePin+0x3a>
    1006:	43 c0       	rjmp	.+134    	; 0x108e <GPIO_writePin+0xc0>
    1008:	2c 81       	ldd	r18, Y+4	; 0x04
    100a:	3d 81       	ldd	r19, Y+5	; 0x05
    100c:	22 30       	cpi	r18, 0x02	; 2
    100e:	31 05       	cpc	r19, r1
    1010:	2c f4       	brge	.+10     	; 0x101c <GPIO_writePin+0x4e>
    1012:	8c 81       	ldd	r24, Y+4	; 0x04
    1014:	9d 81       	ldd	r25, Y+5	; 0x05
    1016:	00 97       	sbiw	r24, 0x00	; 0
    1018:	71 f0       	breq	.+28     	; 0x1036 <GPIO_writePin+0x68>
    101a:	bc c0       	rjmp	.+376    	; 0x1194 <GPIO_writePin+0x1c6>
    101c:	2c 81       	ldd	r18, Y+4	; 0x04
    101e:	3d 81       	ldd	r19, Y+5	; 0x05
    1020:	22 30       	cpi	r18, 0x02	; 2
    1022:	31 05       	cpc	r19, r1
    1024:	09 f4       	brne	.+2      	; 0x1028 <GPIO_writePin+0x5a>
    1026:	5f c0       	rjmp	.+190    	; 0x10e6 <GPIO_writePin+0x118>
    1028:	8c 81       	ldd	r24, Y+4	; 0x04
    102a:	9d 81       	ldd	r25, Y+5	; 0x05
    102c:	83 30       	cpi	r24, 0x03	; 3
    102e:	91 05       	cpc	r25, r1
    1030:	09 f4       	brne	.+2      	; 0x1034 <GPIO_writePin+0x66>
    1032:	85 c0       	rjmp	.+266    	; 0x113e <GPIO_writePin+0x170>
    1034:	af c0       	rjmp	.+350    	; 0x1194 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1036:	8b 81       	ldd	r24, Y+3	; 0x03
    1038:	81 30       	cpi	r24, 0x01	; 1
    103a:	a1 f4       	brne	.+40     	; 0x1064 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    103c:	ab e3       	ldi	r26, 0x3B	; 59
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	eb e3       	ldi	r30, 0x3B	; 59
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	48 2f       	mov	r20, r24
    1048:	8a 81       	ldd	r24, Y+2	; 0x02
    104a:	28 2f       	mov	r18, r24
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	02 2e       	mov	r0, r18
    1054:	02 c0       	rjmp	.+4      	; 0x105a <GPIO_writePin+0x8c>
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	0a 94       	dec	r0
    105c:	e2 f7       	brpl	.-8      	; 0x1056 <GPIO_writePin+0x88>
    105e:	84 2b       	or	r24, r20
    1060:	8c 93       	st	X, r24
    1062:	98 c0       	rjmp	.+304    	; 0x1194 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1064:	ab e3       	ldi	r26, 0x3B	; 59
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	eb e3       	ldi	r30, 0x3B	; 59
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	48 2f       	mov	r20, r24
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	02 2e       	mov	r0, r18
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <GPIO_writePin+0xb4>
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	0a 94       	dec	r0
    1084:	e2 f7       	brpl	.-8      	; 0x107e <GPIO_writePin+0xb0>
    1086:	80 95       	com	r24
    1088:	84 23       	and	r24, r20
    108a:	8c 93       	st	X, r24
    108c:	83 c0       	rjmp	.+262    	; 0x1194 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    108e:	8b 81       	ldd	r24, Y+3	; 0x03
    1090:	81 30       	cpi	r24, 0x01	; 1
    1092:	a1 f4       	brne	.+40     	; 0x10bc <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1094:	a8 e3       	ldi	r26, 0x38	; 56
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	e8 e3       	ldi	r30, 0x38	; 56
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	48 2f       	mov	r20, r24
    10a0:	8a 81       	ldd	r24, Y+2	; 0x02
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	02 2e       	mov	r0, r18
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <GPIO_writePin+0xe4>
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	0a 94       	dec	r0
    10b4:	e2 f7       	brpl	.-8      	; 0x10ae <GPIO_writePin+0xe0>
    10b6:	84 2b       	or	r24, r20
    10b8:	8c 93       	st	X, r24
    10ba:	6c c0       	rjmp	.+216    	; 0x1194 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    10bc:	a8 e3       	ldi	r26, 0x38	; 56
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e8 e3       	ldi	r30, 0x38	; 56
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	48 2f       	mov	r20, r24
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	02 2e       	mov	r0, r18
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <GPIO_writePin+0x10c>
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	0a 94       	dec	r0
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <GPIO_writePin+0x108>
    10de:	80 95       	com	r24
    10e0:	84 23       	and	r24, r20
    10e2:	8c 93       	st	X, r24
    10e4:	57 c0       	rjmp	.+174    	; 0x1194 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	81 30       	cpi	r24, 0x01	; 1
    10ea:	a1 f4       	brne	.+40     	; 0x1114 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    10ec:	a5 e3       	ldi	r26, 0x35	; 53
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	e5 e3       	ldi	r30, 0x35	; 53
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	48 2f       	mov	r20, r24
    10f8:	8a 81       	ldd	r24, Y+2	; 0x02
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	02 2e       	mov	r0, r18
    1104:	02 c0       	rjmp	.+4      	; 0x110a <GPIO_writePin+0x13c>
    1106:	88 0f       	add	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	0a 94       	dec	r0
    110c:	e2 f7       	brpl	.-8      	; 0x1106 <GPIO_writePin+0x138>
    110e:	84 2b       	or	r24, r20
    1110:	8c 93       	st	X, r24
    1112:	40 c0       	rjmp	.+128    	; 0x1194 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1114:	a5 e3       	ldi	r26, 0x35	; 53
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e5 e3       	ldi	r30, 0x35	; 53
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	48 2f       	mov	r20, r24
    1120:	8a 81       	ldd	r24, Y+2	; 0x02
    1122:	28 2f       	mov	r18, r24
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	02 2e       	mov	r0, r18
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <GPIO_writePin+0x164>
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	0a 94       	dec	r0
    1134:	e2 f7       	brpl	.-8      	; 0x112e <GPIO_writePin+0x160>
    1136:	80 95       	com	r24
    1138:	84 23       	and	r24, r20
    113a:	8c 93       	st	X, r24
    113c:	2b c0       	rjmp	.+86     	; 0x1194 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    113e:	8b 81       	ldd	r24, Y+3	; 0x03
    1140:	81 30       	cpi	r24, 0x01	; 1
    1142:	a1 f4       	brne	.+40     	; 0x116c <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1144:	a2 e3       	ldi	r26, 0x32	; 50
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	e2 e3       	ldi	r30, 0x32	; 50
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	48 2f       	mov	r20, r24
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	02 2e       	mov	r0, r18
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <GPIO_writePin+0x194>
    115e:	88 0f       	add	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	0a 94       	dec	r0
    1164:	e2 f7       	brpl	.-8      	; 0x115e <GPIO_writePin+0x190>
    1166:	84 2b       	or	r24, r20
    1168:	8c 93       	st	X, r24
    116a:	14 c0       	rjmp	.+40     	; 0x1194 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    116c:	a2 e3       	ldi	r26, 0x32	; 50
    116e:	b0 e0       	ldi	r27, 0x00	; 0
    1170:	e2 e3       	ldi	r30, 0x32	; 50
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	48 2f       	mov	r20, r24
    1178:	8a 81       	ldd	r24, Y+2	; 0x02
    117a:	28 2f       	mov	r18, r24
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	02 2e       	mov	r0, r18
    1184:	02 c0       	rjmp	.+4      	; 0x118a <GPIO_writePin+0x1bc>
    1186:	88 0f       	add	r24, r24
    1188:	99 1f       	adc	r25, r25
    118a:	0a 94       	dec	r0
    118c:	e2 f7       	brpl	.-8      	; 0x1186 <GPIO_writePin+0x1b8>
    118e:	80 95       	com	r24
    1190:	84 23       	and	r24, r20
    1192:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	0f 90       	pop	r0
    119e:	cf 91       	pop	r28
    11a0:	df 91       	pop	r29
    11a2:	08 95       	ret

000011a4 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    11a4:	df 93       	push	r29
    11a6:	cf 93       	push	r28
    11a8:	00 d0       	rcall	.+0      	; 0x11aa <GPIO_readPin+0x6>
    11aa:	00 d0       	rcall	.+0      	; 0x11ac <GPIO_readPin+0x8>
    11ac:	0f 92       	push	r0
    11ae:	cd b7       	in	r28, 0x3d	; 61
    11b0:	de b7       	in	r29, 0x3e	; 62
    11b2:	8a 83       	std	Y+2, r24	; 0x02
    11b4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    11b6:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    11b8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ba:	88 30       	cpi	r24, 0x08	; 8
    11bc:	08 f0       	brcs	.+2      	; 0x11c0 <GPIO_readPin+0x1c>
    11be:	84 c0       	rjmp	.+264    	; 0x12c8 <GPIO_readPin+0x124>
    11c0:	8a 81       	ldd	r24, Y+2	; 0x02
    11c2:	84 30       	cpi	r24, 0x04	; 4
    11c4:	08 f0       	brcs	.+2      	; 0x11c8 <GPIO_readPin+0x24>
    11c6:	80 c0       	rjmp	.+256    	; 0x12c8 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	3d 83       	std	Y+5, r19	; 0x05
    11d0:	2c 83       	std	Y+4, r18	; 0x04
    11d2:	4c 81       	ldd	r20, Y+4	; 0x04
    11d4:	5d 81       	ldd	r21, Y+5	; 0x05
    11d6:	41 30       	cpi	r20, 0x01	; 1
    11d8:	51 05       	cpc	r21, r1
    11da:	79 f1       	breq	.+94     	; 0x123a <GPIO_readPin+0x96>
    11dc:	8c 81       	ldd	r24, Y+4	; 0x04
    11de:	9d 81       	ldd	r25, Y+5	; 0x05
    11e0:	82 30       	cpi	r24, 0x02	; 2
    11e2:	91 05       	cpc	r25, r1
    11e4:	34 f4       	brge	.+12     	; 0x11f2 <GPIO_readPin+0x4e>
    11e6:	2c 81       	ldd	r18, Y+4	; 0x04
    11e8:	3d 81       	ldd	r19, Y+5	; 0x05
    11ea:	21 15       	cp	r18, r1
    11ec:	31 05       	cpc	r19, r1
    11ee:	69 f0       	breq	.+26     	; 0x120a <GPIO_readPin+0x66>
    11f0:	6b c0       	rjmp	.+214    	; 0x12c8 <GPIO_readPin+0x124>
    11f2:	4c 81       	ldd	r20, Y+4	; 0x04
    11f4:	5d 81       	ldd	r21, Y+5	; 0x05
    11f6:	42 30       	cpi	r20, 0x02	; 2
    11f8:	51 05       	cpc	r21, r1
    11fa:	b9 f1       	breq	.+110    	; 0x126a <GPIO_readPin+0xc6>
    11fc:	8c 81       	ldd	r24, Y+4	; 0x04
    11fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1200:	83 30       	cpi	r24, 0x03	; 3
    1202:	91 05       	cpc	r25, r1
    1204:	09 f4       	brne	.+2      	; 0x1208 <GPIO_readPin+0x64>
    1206:	49 c0       	rjmp	.+146    	; 0x129a <GPIO_readPin+0xf6>
    1208:	5f c0       	rjmp	.+190    	; 0x12c8 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    120a:	e9 e3       	ldi	r30, 0x39	; 57
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	8b 81       	ldd	r24, Y+3	; 0x03
    1216:	88 2f       	mov	r24, r24
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	a9 01       	movw	r20, r18
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <GPIO_readPin+0x7e>
    121e:	55 95       	asr	r21
    1220:	47 95       	ror	r20
    1222:	8a 95       	dec	r24
    1224:	e2 f7       	brpl	.-8      	; 0x121e <GPIO_readPin+0x7a>
    1226:	ca 01       	movw	r24, r20
    1228:	81 70       	andi	r24, 0x01	; 1
    122a:	90 70       	andi	r25, 0x00	; 0
    122c:	88 23       	and	r24, r24
    122e:	19 f0       	breq	.+6      	; 0x1236 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	89 83       	std	Y+1, r24	; 0x01
    1234:	49 c0       	rjmp	.+146    	; 0x12c8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1236:	19 82       	std	Y+1, r1	; 0x01
    1238:	47 c0       	rjmp	.+142    	; 0x12c8 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    123a:	e6 e3       	ldi	r30, 0x36	; 54
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	8b 81       	ldd	r24, Y+3	; 0x03
    1246:	88 2f       	mov	r24, r24
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	a9 01       	movw	r20, r18
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <GPIO_readPin+0xae>
    124e:	55 95       	asr	r21
    1250:	47 95       	ror	r20
    1252:	8a 95       	dec	r24
    1254:	e2 f7       	brpl	.-8      	; 0x124e <GPIO_readPin+0xaa>
    1256:	ca 01       	movw	r24, r20
    1258:	81 70       	andi	r24, 0x01	; 1
    125a:	90 70       	andi	r25, 0x00	; 0
    125c:	88 23       	and	r24, r24
    125e:	19 f0       	breq	.+6      	; 0x1266 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	89 83       	std	Y+1, r24	; 0x01
    1264:	31 c0       	rjmp	.+98     	; 0x12c8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1266:	19 82       	std	Y+1, r1	; 0x01
    1268:	2f c0       	rjmp	.+94     	; 0x12c8 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    126a:	e3 e3       	ldi	r30, 0x33	; 51
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	88 2f       	mov	r24, r24
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	a9 01       	movw	r20, r18
    127c:	02 c0       	rjmp	.+4      	; 0x1282 <GPIO_readPin+0xde>
    127e:	55 95       	asr	r21
    1280:	47 95       	ror	r20
    1282:	8a 95       	dec	r24
    1284:	e2 f7       	brpl	.-8      	; 0x127e <GPIO_readPin+0xda>
    1286:	ca 01       	movw	r24, r20
    1288:	81 70       	andi	r24, 0x01	; 1
    128a:	90 70       	andi	r25, 0x00	; 0
    128c:	88 23       	and	r24, r24
    128e:	19 f0       	breq	.+6      	; 0x1296 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	89 83       	std	Y+1, r24	; 0x01
    1294:	19 c0       	rjmp	.+50     	; 0x12c8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1296:	19 82       	std	Y+1, r1	; 0x01
    1298:	17 c0       	rjmp	.+46     	; 0x12c8 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    129a:	e0 e3       	ldi	r30, 0x30	; 48
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	8b 81       	ldd	r24, Y+3	; 0x03
    12a6:	88 2f       	mov	r24, r24
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	a9 01       	movw	r20, r18
    12ac:	02 c0       	rjmp	.+4      	; 0x12b2 <GPIO_readPin+0x10e>
    12ae:	55 95       	asr	r21
    12b0:	47 95       	ror	r20
    12b2:	8a 95       	dec	r24
    12b4:	e2 f7       	brpl	.-8      	; 0x12ae <GPIO_readPin+0x10a>
    12b6:	ca 01       	movw	r24, r20
    12b8:	81 70       	andi	r24, 0x01	; 1
    12ba:	90 70       	andi	r25, 0x00	; 0
    12bc:	88 23       	and	r24, r24
    12be:	19 f0       	breq	.+6      	; 0x12c6 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	89 83       	std	Y+1, r24	; 0x01
    12c4:	01 c0       	rjmp	.+2      	; 0x12c8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    12c6:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    12c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	0f 90       	pop	r0
    12d2:	0f 90       	pop	r0
    12d4:	cf 91       	pop	r28
    12d6:	df 91       	pop	r29
    12d8:	08 95       	ret

000012da <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    12da:	df 93       	push	r29
    12dc:	cf 93       	push	r28
    12de:	00 d0       	rcall	.+0      	; 0x12e0 <GPIO_setupPortDirection+0x6>
    12e0:	00 d0       	rcall	.+0      	; 0x12e2 <GPIO_setupPortDirection+0x8>
    12e2:	cd b7       	in	r28, 0x3d	; 61
    12e4:	de b7       	in	r29, 0x3e	; 62
    12e6:	89 83       	std	Y+1, r24	; 0x01
    12e8:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    12ea:	89 81       	ldd	r24, Y+1	; 0x01
    12ec:	84 30       	cpi	r24, 0x04	; 4
    12ee:	90 f5       	brcc	.+100    	; 0x1354 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    12f0:	89 81       	ldd	r24, Y+1	; 0x01
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	3c 83       	std	Y+4, r19	; 0x04
    12f8:	2b 83       	std	Y+3, r18	; 0x03
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	9c 81       	ldd	r25, Y+4	; 0x04
    12fe:	81 30       	cpi	r24, 0x01	; 1
    1300:	91 05       	cpc	r25, r1
    1302:	d1 f0       	breq	.+52     	; 0x1338 <GPIO_setupPortDirection+0x5e>
    1304:	2b 81       	ldd	r18, Y+3	; 0x03
    1306:	3c 81       	ldd	r19, Y+4	; 0x04
    1308:	22 30       	cpi	r18, 0x02	; 2
    130a:	31 05       	cpc	r19, r1
    130c:	2c f4       	brge	.+10     	; 0x1318 <GPIO_setupPortDirection+0x3e>
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	9c 81       	ldd	r25, Y+4	; 0x04
    1312:	00 97       	sbiw	r24, 0x00	; 0
    1314:	61 f0       	breq	.+24     	; 0x132e <GPIO_setupPortDirection+0x54>
    1316:	1e c0       	rjmp	.+60     	; 0x1354 <GPIO_setupPortDirection+0x7a>
    1318:	2b 81       	ldd	r18, Y+3	; 0x03
    131a:	3c 81       	ldd	r19, Y+4	; 0x04
    131c:	22 30       	cpi	r18, 0x02	; 2
    131e:	31 05       	cpc	r19, r1
    1320:	81 f0       	breq	.+32     	; 0x1342 <GPIO_setupPortDirection+0x68>
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	9c 81       	ldd	r25, Y+4	; 0x04
    1326:	83 30       	cpi	r24, 0x03	; 3
    1328:	91 05       	cpc	r25, r1
    132a:	81 f0       	breq	.+32     	; 0x134c <GPIO_setupPortDirection+0x72>
    132c:	13 c0       	rjmp	.+38     	; 0x1354 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    132e:	ea e3       	ldi	r30, 0x3A	; 58
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	80 83       	st	Z, r24
    1336:	0e c0       	rjmp	.+28     	; 0x1354 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1338:	e7 e3       	ldi	r30, 0x37	; 55
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	80 83       	st	Z, r24
    1340:	09 c0       	rjmp	.+18     	; 0x1354 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1342:	e4 e3       	ldi	r30, 0x34	; 52
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	80 83       	st	Z, r24
    134a:	04 c0       	rjmp	.+8      	; 0x1354 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    134c:	e1 e3       	ldi	r30, 0x31	; 49
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	8a 81       	ldd	r24, Y+2	; 0x02
    1352:	80 83       	st	Z, r24
			break;
		}
	}
}
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	cf 91       	pop	r28
    135e:	df 91       	pop	r29
    1360:	08 95       	ret

00001362 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1362:	df 93       	push	r29
    1364:	cf 93       	push	r28
    1366:	00 d0       	rcall	.+0      	; 0x1368 <GPIO_writePort+0x6>
    1368:	00 d0       	rcall	.+0      	; 0x136a <GPIO_writePort+0x8>
    136a:	cd b7       	in	r28, 0x3d	; 61
    136c:	de b7       	in	r29, 0x3e	; 62
    136e:	89 83       	std	Y+1, r24	; 0x01
    1370:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1372:	89 81       	ldd	r24, Y+1	; 0x01
    1374:	84 30       	cpi	r24, 0x04	; 4
    1376:	90 f5       	brcc	.+100    	; 0x13dc <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1378:	89 81       	ldd	r24, Y+1	; 0x01
    137a:	28 2f       	mov	r18, r24
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	3c 83       	std	Y+4, r19	; 0x04
    1380:	2b 83       	std	Y+3, r18	; 0x03
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	9c 81       	ldd	r25, Y+4	; 0x04
    1386:	81 30       	cpi	r24, 0x01	; 1
    1388:	91 05       	cpc	r25, r1
    138a:	d1 f0       	breq	.+52     	; 0x13c0 <GPIO_writePort+0x5e>
    138c:	2b 81       	ldd	r18, Y+3	; 0x03
    138e:	3c 81       	ldd	r19, Y+4	; 0x04
    1390:	22 30       	cpi	r18, 0x02	; 2
    1392:	31 05       	cpc	r19, r1
    1394:	2c f4       	brge	.+10     	; 0x13a0 <GPIO_writePort+0x3e>
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	9c 81       	ldd	r25, Y+4	; 0x04
    139a:	00 97       	sbiw	r24, 0x00	; 0
    139c:	61 f0       	breq	.+24     	; 0x13b6 <GPIO_writePort+0x54>
    139e:	1e c0       	rjmp	.+60     	; 0x13dc <GPIO_writePort+0x7a>
    13a0:	2b 81       	ldd	r18, Y+3	; 0x03
    13a2:	3c 81       	ldd	r19, Y+4	; 0x04
    13a4:	22 30       	cpi	r18, 0x02	; 2
    13a6:	31 05       	cpc	r19, r1
    13a8:	81 f0       	breq	.+32     	; 0x13ca <GPIO_writePort+0x68>
    13aa:	8b 81       	ldd	r24, Y+3	; 0x03
    13ac:	9c 81       	ldd	r25, Y+4	; 0x04
    13ae:	83 30       	cpi	r24, 0x03	; 3
    13b0:	91 05       	cpc	r25, r1
    13b2:	81 f0       	breq	.+32     	; 0x13d4 <GPIO_writePort+0x72>
    13b4:	13 c0       	rjmp	.+38     	; 0x13dc <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    13b6:	eb e3       	ldi	r30, 0x3B	; 59
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	80 83       	st	Z, r24
    13be:	0e c0       	rjmp	.+28     	; 0x13dc <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    13c0:	e8 e3       	ldi	r30, 0x38	; 56
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	80 83       	st	Z, r24
    13c8:	09 c0       	rjmp	.+18     	; 0x13dc <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    13ca:	e5 e3       	ldi	r30, 0x35	; 53
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	8a 81       	ldd	r24, Y+2	; 0x02
    13d0:	80 83       	st	Z, r24
    13d2:	04 c0       	rjmp	.+8      	; 0x13dc <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    13d4:	e2 e3       	ldi	r30, 0x32	; 50
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	8a 81       	ldd	r24, Y+2	; 0x02
    13da:	80 83       	st	Z, r24
			break;
		}
	}
}
    13dc:	0f 90       	pop	r0
    13de:	0f 90       	pop	r0
    13e0:	0f 90       	pop	r0
    13e2:	0f 90       	pop	r0
    13e4:	cf 91       	pop	r28
    13e6:	df 91       	pop	r29
    13e8:	08 95       	ret

000013ea <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    13ea:	df 93       	push	r29
    13ec:	cf 93       	push	r28
    13ee:	00 d0       	rcall	.+0      	; 0x13f0 <GPIO_readPort+0x6>
    13f0:	00 d0       	rcall	.+0      	; 0x13f2 <GPIO_readPort+0x8>
    13f2:	cd b7       	in	r28, 0x3d	; 61
    13f4:	de b7       	in	r29, 0x3e	; 62
    13f6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    13f8:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    13fa:	8a 81       	ldd	r24, Y+2	; 0x02
    13fc:	84 30       	cpi	r24, 0x04	; 4
    13fe:	90 f5       	brcc	.+100    	; 0x1464 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1400:	8a 81       	ldd	r24, Y+2	; 0x02
    1402:	28 2f       	mov	r18, r24
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	3c 83       	std	Y+4, r19	; 0x04
    1408:	2b 83       	std	Y+3, r18	; 0x03
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	9c 81       	ldd	r25, Y+4	; 0x04
    140e:	81 30       	cpi	r24, 0x01	; 1
    1410:	91 05       	cpc	r25, r1
    1412:	d1 f0       	breq	.+52     	; 0x1448 <GPIO_readPort+0x5e>
    1414:	2b 81       	ldd	r18, Y+3	; 0x03
    1416:	3c 81       	ldd	r19, Y+4	; 0x04
    1418:	22 30       	cpi	r18, 0x02	; 2
    141a:	31 05       	cpc	r19, r1
    141c:	2c f4       	brge	.+10     	; 0x1428 <GPIO_readPort+0x3e>
    141e:	8b 81       	ldd	r24, Y+3	; 0x03
    1420:	9c 81       	ldd	r25, Y+4	; 0x04
    1422:	00 97       	sbiw	r24, 0x00	; 0
    1424:	61 f0       	breq	.+24     	; 0x143e <GPIO_readPort+0x54>
    1426:	1e c0       	rjmp	.+60     	; 0x1464 <GPIO_readPort+0x7a>
    1428:	2b 81       	ldd	r18, Y+3	; 0x03
    142a:	3c 81       	ldd	r19, Y+4	; 0x04
    142c:	22 30       	cpi	r18, 0x02	; 2
    142e:	31 05       	cpc	r19, r1
    1430:	81 f0       	breq	.+32     	; 0x1452 <GPIO_readPort+0x68>
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	9c 81       	ldd	r25, Y+4	; 0x04
    1436:	83 30       	cpi	r24, 0x03	; 3
    1438:	91 05       	cpc	r25, r1
    143a:	81 f0       	breq	.+32     	; 0x145c <GPIO_readPort+0x72>
    143c:	13 c0       	rjmp	.+38     	; 0x1464 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    143e:	e9 e3       	ldi	r30, 0x39	; 57
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	89 83       	std	Y+1, r24	; 0x01
    1446:	0e c0       	rjmp	.+28     	; 0x1464 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1448:	e6 e3       	ldi	r30, 0x36	; 54
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	89 83       	std	Y+1, r24	; 0x01
    1450:	09 c0       	rjmp	.+18     	; 0x1464 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1452:	e3 e3       	ldi	r30, 0x33	; 51
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	89 83       	std	Y+1, r24	; 0x01
    145a:	04 c0       	rjmp	.+8      	; 0x1464 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    145c:	e0 e3       	ldi	r30, 0x30	; 48
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1464:	89 81       	ldd	r24, Y+1	; 0x01
}
    1466:	0f 90       	pop	r0
    1468:	0f 90       	pop	r0
    146a:	0f 90       	pop	r0
    146c:	0f 90       	pop	r0
    146e:	cf 91       	pop	r28
    1470:	df 91       	pop	r29
    1472:	08 95       	ret

00001474 <Timer0_init>:
#include"./INC/timer0.h"
/*
 * Description :
 * Function responsible for initialize the TIMER_0 driver.
 */
void Timer0_init(const Timer0_Config *Config_Ptr) {
    1474:	df 93       	push	r29
    1476:	cf 93       	push	r28
    1478:	00 d0       	rcall	.+0      	; 0x147a <Timer0_init+0x6>
    147a:	00 d0       	rcall	.+0      	; 0x147c <Timer0_init+0x8>
    147c:	cd b7       	in	r28, 0x3d	; 61
    147e:	de b7       	in	r29, 0x3e	; 62
    1480:	9a 83       	std	Y+2, r25	; 0x02
    1482:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0;
    1484:	e2 e5       	ldi	r30, 0x52	; 82
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	10 82       	st	Z, r1
	GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	63 e0       	ldi	r22, 0x03	; 3
    148e:	41 e0       	ldi	r20, 0x01	; 1
    1490:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <GPIO_setupPinDirection>
	switch (Config_Ptr->timer_mode) {
    1494:	e9 81       	ldd	r30, Y+1	; 0x01
    1496:	fa 81       	ldd	r31, Y+2	; 0x02
    1498:	80 81       	ld	r24, Z
    149a:	28 2f       	mov	r18, r24
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	3c 83       	std	Y+4, r19	; 0x04
    14a0:	2b 83       	std	Y+3, r18	; 0x03
    14a2:	8b 81       	ldd	r24, Y+3	; 0x03
    14a4:	9c 81       	ldd	r25, Y+4	; 0x04
    14a6:	81 30       	cpi	r24, 0x01	; 1
    14a8:	91 05       	cpc	r25, r1
    14aa:	c1 f0       	breq	.+48     	; 0x14dc <Timer0_init+0x68>
    14ac:	2b 81       	ldd	r18, Y+3	; 0x03
    14ae:	3c 81       	ldd	r19, Y+4	; 0x04
    14b0:	22 30       	cpi	r18, 0x02	; 2
    14b2:	31 05       	cpc	r19, r1
    14b4:	11 f1       	breq	.+68     	; 0x14fa <Timer0_init+0x86>
    14b6:	8b 81       	ldd	r24, Y+3	; 0x03
    14b8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ba:	00 97       	sbiw	r24, 0x00	; 0
    14bc:	61 f5       	brne	.+88     	; 0x1516 <Timer0_init+0xa2>
	case TIMER0_NORMAL_MODE:
		CLEAR_BIT(TCCR0, WGM00);
    14be:	a3 e5       	ldi	r26, 0x53	; 83
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	e3 e5       	ldi	r30, 0x53	; 83
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	8f 7b       	andi	r24, 0xBF	; 191
    14ca:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0, WGM01);
    14cc:	a3 e5       	ldi	r26, 0x53	; 83
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	e3 e5       	ldi	r30, 0x53	; 83
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	87 7f       	andi	r24, 0xF7	; 247
    14d8:	8c 93       	st	X, r24
    14da:	1d c0       	rjmp	.+58     	; 0x1516 <Timer0_init+0xa2>
		break;
	case TIMER0_COMPARE_MODE:
		CLEAR_BIT(TCCR0, WGM00);
    14dc:	a3 e5       	ldi	r26, 0x53	; 83
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	e3 e5       	ldi	r30, 0x53	; 83
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	8f 7b       	andi	r24, 0xBF	; 191
    14e8:	8c 93       	st	X, r24
		SET_BIT(TCCR0, WGM01);
    14ea:	a3 e5       	ldi	r26, 0x53	; 83
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	e3 e5       	ldi	r30, 0x53	; 83
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	88 60       	ori	r24, 0x08	; 8
    14f6:	8c 93       	st	X, r24
    14f8:	0e c0       	rjmp	.+28     	; 0x1516 <Timer0_init+0xa2>
		break;
	case TIMER0_FAST_PWM_MODE:
		SET_BIT(TCCR0, WGM00);
    14fa:	a3 e5       	ldi	r26, 0x53	; 83
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	e3 e5       	ldi	r30, 0x53	; 83
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	80 64       	ori	r24, 0x40	; 64
    1506:	8c 93       	st	X, r24
		SET_BIT(TCCR0, WGM01);
    1508:	a3 e5       	ldi	r26, 0x53	; 83
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	e3 e5       	ldi	r30, 0x53	; 83
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	88 60       	ori	r24, 0x08	; 8
    1514:	8c 93       	st	X, r24
		break;
	}
	TCCR0 = (TCCR0 & 0xf8) | (Config_Ptr->clock);
    1516:	a3 e5       	ldi	r26, 0x53	; 83
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	e3 e5       	ldi	r30, 0x53	; 83
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	98 2f       	mov	r25, r24
    1522:	98 7f       	andi	r25, 0xF8	; 248
    1524:	e9 81       	ldd	r30, Y+1	; 0x01
    1526:	fa 81       	ldd	r31, Y+2	; 0x02
    1528:	82 81       	ldd	r24, Z+2	; 0x02
    152a:	89 2b       	or	r24, r25
    152c:	8c 93       	st	X, r24
	TCCR0 = (TCCR0 & 0xcf) | (Config_Ptr->pwm_mode << 4);
    152e:	a3 e5       	ldi	r26, 0x53	; 83
    1530:	b0 e0       	ldi	r27, 0x00	; 0
    1532:	e3 e5       	ldi	r30, 0x53	; 83
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	28 2f       	mov	r18, r24
    153a:	2f 7c       	andi	r18, 0xCF	; 207
    153c:	e9 81       	ldd	r30, Y+1	; 0x01
    153e:	fa 81       	ldd	r31, Y+2	; 0x02
    1540:	81 81       	ldd	r24, Z+1	; 0x01
    1542:	88 2f       	mov	r24, r24
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	82 95       	swap	r24
    1548:	92 95       	swap	r25
    154a:	90 7f       	andi	r25, 0xF0	; 240
    154c:	98 27       	eor	r25, r24
    154e:	80 7f       	andi	r24, 0xF0	; 240
    1550:	98 27       	eor	r25, r24
    1552:	82 2b       	or	r24, r18
    1554:	8c 93       	st	X, r24

}
    1556:	0f 90       	pop	r0
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	cf 91       	pop	r28
    1560:	df 91       	pop	r29
    1562:	08 95       	ret

00001564 <Timer0_PWM_Start>:
/*
 * Description :
 *  Setup the compare value based on the required input duty cycle.
 */
void Timer0_PWM_Start(uint8 duty_cycle_percentage) {
    1564:	df 93       	push	r29
    1566:	cf 93       	push	r28
    1568:	00 d0       	rcall	.+0      	; 0x156a <Timer0_PWM_Start+0x6>
    156a:	cd b7       	in	r28, 0x3d	; 61
    156c:	de b7       	in	r29, 0x3e	; 62
    156e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 top = (float) (duty_cycle_percentage / 100.0) * TIMER0_MAX_VALUE;
    1570:	8a 81       	ldd	r24, Y+2	; 0x02
    1572:	88 2f       	mov	r24, r24
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	aa 27       	eor	r26, r26
    1578:	97 fd       	sbrc	r25, 7
    157a:	a0 95       	com	r26
    157c:	ba 2f       	mov	r27, r26
    157e:	bc 01       	movw	r22, r24
    1580:	cd 01       	movw	r24, r26
    1582:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1586:	dc 01       	movw	r26, r24
    1588:	cb 01       	movw	r24, r22
    158a:	bc 01       	movw	r22, r24
    158c:	cd 01       	movw	r24, r26
    158e:	20 e0       	ldi	r18, 0x00	; 0
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	48 ec       	ldi	r20, 0xC8	; 200
    1594:	52 e4       	ldi	r21, 0x42	; 66
    1596:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    159a:	dc 01       	movw	r26, r24
    159c:	cb 01       	movw	r24, r22
    159e:	bc 01       	movw	r22, r24
    15a0:	cd 01       	movw	r24, r26
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	4f e7       	ldi	r20, 0x7F	; 127
    15a8:	53 e4       	ldi	r21, 0x43	; 67
    15aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ae:	dc 01       	movw	r26, r24
    15b0:	cb 01       	movw	r24, r22
    15b2:	bc 01       	movw	r22, r24
    15b4:	cd 01       	movw	r24, r26
    15b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ba:	dc 01       	movw	r26, r24
    15bc:	cb 01       	movw	r24, r22
    15be:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = top;
    15c0:	ec e5       	ldi	r30, 0x5C	; 92
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	89 81       	ldd	r24, Y+1	; 0x01
    15c6:	80 83       	st	Z, r24
}
    15c8:	0f 90       	pop	r0
    15ca:	0f 90       	pop	r0
    15cc:	cf 91       	pop	r28
    15ce:	df 91       	pop	r29
    15d0:	08 95       	ret

000015d2 <TIMER0_deinit>:
/*
 * Description :
 * Function responsible for De_initialize the TIMER_0 driver.
 */
void TIMER0_deinit() {
    15d2:	df 93       	push	r29
    15d4:	cf 93       	push	r28
    15d6:	cd b7       	in	r28, 0x3d	; 61
    15d8:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = OCR0 = TCCR0 = 0;
    15da:	22 e5       	ldi	r18, 0x52	; 82
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	ac e5       	ldi	r26, 0x5C	; 92
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	e3 e5       	ldi	r30, 0x53	; 83
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	10 82       	st	Z, r1
    15e8:	80 81       	ld	r24, Z
    15ea:	8c 93       	st	X, r24
    15ec:	8c 91       	ld	r24, X
    15ee:	f9 01       	movw	r30, r18
    15f0:	80 83       	st	Z, r24
}
    15f2:	cf 91       	pop	r28
    15f4:	df 91       	pop	r29
    15f6:	08 95       	ret

000015f8 <__vector_7>:
static volatile void(*callBack_ptr)(void) = NULL_PTR;

/********************************************************************************
 *                       Interrupt Service Routines                             *
 *******************************************************************************/
ISR(TIMER1_COMPA_vect){
    15f8:	1f 92       	push	r1
    15fa:	0f 92       	push	r0
    15fc:	0f b6       	in	r0, 0x3f	; 63
    15fe:	0f 92       	push	r0
    1600:	11 24       	eor	r1, r1
    1602:	2f 93       	push	r18
    1604:	3f 93       	push	r19
    1606:	4f 93       	push	r20
    1608:	5f 93       	push	r21
    160a:	6f 93       	push	r22
    160c:	7f 93       	push	r23
    160e:	8f 93       	push	r24
    1610:	9f 93       	push	r25
    1612:	af 93       	push	r26
    1614:	bf 93       	push	r27
    1616:	ef 93       	push	r30
    1618:	ff 93       	push	r31
    161a:	df 93       	push	r29
    161c:	cf 93       	push	r28
    161e:	cd b7       	in	r28, 0x3d	; 61
    1620:	de b7       	in	r29, 0x3e	; 62
	if(callBack_ptr != NULL_PTR){
    1622:	80 91 7a 01 	lds	r24, 0x017A
    1626:	90 91 7b 01 	lds	r25, 0x017B
    162a:	00 97       	sbiw	r24, 0x00	; 0
    162c:	29 f0       	breq	.+10     	; 0x1638 <__vector_7+0x40>
		(*callBack_ptr)();
    162e:	e0 91 7a 01 	lds	r30, 0x017A
    1632:	f0 91 7b 01 	lds	r31, 0x017B
    1636:	09 95       	icall
	}
}
    1638:	cf 91       	pop	r28
    163a:	df 91       	pop	r29
    163c:	ff 91       	pop	r31
    163e:	ef 91       	pop	r30
    1640:	bf 91       	pop	r27
    1642:	af 91       	pop	r26
    1644:	9f 91       	pop	r25
    1646:	8f 91       	pop	r24
    1648:	7f 91       	pop	r23
    164a:	6f 91       	pop	r22
    164c:	5f 91       	pop	r21
    164e:	4f 91       	pop	r20
    1650:	3f 91       	pop	r19
    1652:	2f 91       	pop	r18
    1654:	0f 90       	pop	r0
    1656:	0f be       	out	0x3f, r0	; 63
    1658:	0f 90       	pop	r0
    165a:	1f 90       	pop	r1
    165c:	18 95       	reti

0000165e <TIMER1_init_Compare>:
/*
 * Description :
 * Function responsible for initialize the TIMER_1 driver in compare mode.
 */
void TIMER1_init_Compare(Timer1_ConfigType* Config_ptr)
{
    165e:	df 93       	push	r29
    1660:	cf 93       	push	r28
    1662:	00 d0       	rcall	.+0      	; 0x1664 <TIMER1_init_Compare+0x6>
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
    1668:	9a 83       	std	Y+2, r25	; 0x02
    166a:	89 83       	std	Y+1, r24	; 0x01
	/* Initialize Timer1 With value that will start count according to this value*/
	TCNT1 = Config_ptr->Initial_value;
    166c:	ac e4       	ldi	r26, 0x4C	; 76
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	e9 81       	ldd	r30, Y+1	; 0x01
    1672:	fa 81       	ldd	r31, Y+2	; 0x02
    1674:	80 81       	ld	r24, Z
    1676:	91 81       	ldd	r25, Z+1	; 0x01
    1678:	11 96       	adiw	r26, 0x01	; 1
    167a:	9c 93       	st	X, r25
    167c:	8e 93       	st	-X, r24

	/* Set Compare value that Timer will reach to it then, it backs count from 0*/
	OCR1A = Config_ptr->Compare_value;
    167e:	aa e4       	ldi	r26, 0x4A	; 74
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	e9 81       	ldd	r30, Y+1	; 0x01
    1684:	fa 81       	ldd	r31, Y+2	; 0x02
    1686:	82 81       	ldd	r24, Z+2	; 0x02
    1688:	93 81       	ldd	r25, Z+3	; 0x03
    168a:	11 96       	adiw	r26, 0x01	; 1
    168c:	9c 93       	st	X, r25
    168e:	8e 93       	st	-X, r24

	/* Enable Timer1 Interrupt*/
	TIMSK |= (1 << OCIE1A);
    1690:	a9 e5       	ldi	r26, 0x59	; 89
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	e9 e5       	ldi	r30, 0x59	; 89
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	80 61       	ori	r24, 0x10	; 16
    169c:	8c 93       	st	X, r24

	/****************************************************************************
	 * FOC1A : It will be set when Timer1 Operate in non PWM Mode
	 * Set First 2-bits From Mode Member to Specify which Mode Timer1 Will Operate
	****************************************************************************/
	TCCR1A = (1 << FOC1A) | ((TCCR1A & 0xFC) | (Config_ptr->Mode & 0x03));
    169e:	af e4       	ldi	r26, 0x4F	; 79
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	ef e4       	ldi	r30, 0x4F	; 79
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	98 2f       	mov	r25, r24
    16aa:	9c 7f       	andi	r25, 0xFC	; 252
    16ac:	e9 81       	ldd	r30, Y+1	; 0x01
    16ae:	fa 81       	ldd	r31, Y+2	; 0x02
    16b0:	85 81       	ldd	r24, Z+5	; 0x05
    16b2:	83 70       	andi	r24, 0x03	; 3
    16b4:	89 2b       	or	r24, r25
    16b6:	88 60       	ori	r24, 0x08	; 8
    16b8:	8c 93       	st	X, r24

	/****************************************************************************
	 * Set Pre-scaler value in the first 3-bits in TCCR1B Register that will specify which frequency Timer1 will Operate
	 * Set Last 2-bits From Mode Member to Specify Which Mode Timer1 Will Operate
	****************************************************************************/
	TCCR1B = ((TCCR1B & 0xF8) | (Config_ptr->Prescaler & 0x07)) | ((TCCR1B & 0xE7) | ((Config_ptr->Mode & 0x0C)<<1));
    16ba:	ae e4       	ldi	r26, 0x4E	; 78
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	ee e4       	ldi	r30, 0x4E	; 78
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	98 2f       	mov	r25, r24
    16c6:	98 7f       	andi	r25, 0xF8	; 248
    16c8:	e9 81       	ldd	r30, Y+1	; 0x01
    16ca:	fa 81       	ldd	r31, Y+2	; 0x02
    16cc:	84 81       	ldd	r24, Z+4	; 0x04
    16ce:	87 70       	andi	r24, 0x07	; 7
    16d0:	39 2f       	mov	r19, r25
    16d2:	38 2b       	or	r19, r24
    16d4:	ee e4       	ldi	r30, 0x4E	; 78
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	28 2f       	mov	r18, r24
    16dc:	27 7e       	andi	r18, 0xE7	; 231
    16de:	e9 81       	ldd	r30, Y+1	; 0x01
    16e0:	fa 81       	ldd	r31, Y+2	; 0x02
    16e2:	85 81       	ldd	r24, Z+5	; 0x05
    16e4:	88 2f       	mov	r24, r24
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	8c 70       	andi	r24, 0x0C	; 12
    16ea:	90 70       	andi	r25, 0x00	; 0
    16ec:	88 0f       	add	r24, r24
    16ee:	99 1f       	adc	r25, r25
    16f0:	82 2b       	or	r24, r18
    16f2:	83 2b       	or	r24, r19
    16f4:	8c 93       	st	X, r24
}
    16f6:	0f 90       	pop	r0
    16f8:	0f 90       	pop	r0
    16fa:	cf 91       	pop	r28
    16fc:	df 91       	pop	r29
    16fe:	08 95       	ret

00001700 <TIMER1_deInit>:
/*
 * Description :
 * Function responsible for De_initialize the TIMER_1 driver.
 */
void TIMER1_deInit(void)
{
    1700:	df 93       	push	r29
    1702:	cf 93       	push	r28
    1704:	cd b7       	in	r28, 0x3d	; 61
    1706:	de b7       	in	r29, 0x3e	; 62
	/* Clear Timer Register */
	TCCR1A = 0;
    1708:	ef e4       	ldi	r30, 0x4F	; 79
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	10 82       	st	Z, r1
	TCCR1B = 0;
    170e:	ee e4       	ldi	r30, 0x4E	; 78
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	10 82       	st	Z, r1
	TCNT1 = 0;
    1714:	ec e4       	ldi	r30, 0x4C	; 76
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	11 82       	std	Z+1, r1	; 0x01
    171a:	10 82       	st	Z, r1
	/* Disable Interrupt */
	TIMSK &= ~(1 << OCIE1A);
    171c:	a9 e5       	ldi	r26, 0x59	; 89
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	e9 e5       	ldi	r30, 0x59	; 89
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	8f 7e       	andi	r24, 0xEF	; 239
    1728:	8c 93       	st	X, r24
}
    172a:	cf 91       	pop	r28
    172c:	df 91       	pop	r29
    172e:	08 95       	ret

00001730 <TIMER1_setCallback>:
/*
 * Description :
 * Setup the callback function in the TIMER_1 driver.
 */
void TIMER1_setCallback(void(*a_ptr)(void))
{
    1730:	df 93       	push	r29
    1732:	cf 93       	push	r28
    1734:	00 d0       	rcall	.+0      	; 0x1736 <TIMER1_setCallback+0x6>
    1736:	cd b7       	in	r28, 0x3d	; 61
    1738:	de b7       	in	r29, 0x3e	; 62
    173a:	9a 83       	std	Y+2, r25	; 0x02
    173c:	89 83       	std	Y+1, r24	; 0x01
	/* Make global variable points to same function to be called in ISR when an detection occur*/
	callBack_ptr = a_ptr;
    173e:	89 81       	ldd	r24, Y+1	; 0x01
    1740:	9a 81       	ldd	r25, Y+2	; 0x02
    1742:	90 93 7b 01 	sts	0x017B, r25
    1746:	80 93 7a 01 	sts	0x017A, r24
}
    174a:	0f 90       	pop	r0
    174c:	0f 90       	pop	r0
    174e:	cf 91       	pop	r28
    1750:	df 91       	pop	r29
    1752:	08 95       	ret

00001754 <TWI_init>:
 ============================================================================
 */
#include"./INC/twi.h"
#include"avr/io.h"
#include"../CONFIG/common_macros.h"
void TWI_init(const TWI_Config *config) {
    1754:	df 93       	push	r29
    1756:	cf 93       	push	r28
    1758:	00 d0       	rcall	.+0      	; 0x175a <TWI_init+0x6>
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
    175e:	9a 83       	std	Y+2, r25	; 0x02
    1760:	89 83       	std	Y+1, r24	; 0x01
	TWBR = config->SCKFactor;
    1762:	a0 e2       	ldi	r26, 0x20	; 32
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	e9 81       	ldd	r30, Y+1	; 0x01
    1768:	fa 81       	ldd	r31, Y+2	; 0x02
    176a:	82 81       	ldd	r24, Z+2	; 0x02
    176c:	8c 93       	st	X, r24
	TWSR = config->twiPrescalar;
    176e:	a1 e2       	ldi	r26, 0x21	; 33
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	e9 81       	ldd	r30, Y+1	; 0x01
    1774:	fa 81       	ldd	r31, Y+2	; 0x02
    1776:	80 81       	ld	r24, Z
    1778:	8c 93       	st	X, r24
	TWAR = config->slaveAddress << 1;
    177a:	a2 e2       	ldi	r26, 0x22	; 34
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	e9 81       	ldd	r30, Y+1	; 0x01
    1780:	fa 81       	ldd	r31, Y+2	; 0x02
    1782:	81 81       	ldd	r24, Z+1	; 0x01
    1784:	88 0f       	add	r24, r24
    1786:	8c 93       	st	X, r24
	SET_BIT(TWCR, TWEN);
    1788:	a6 e5       	ldi	r26, 0x56	; 86
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	e6 e5       	ldi	r30, 0x56	; 86
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	84 60       	ori	r24, 0x04	; 4
    1794:	8c 93       	st	X, r24
}
    1796:	0f 90       	pop	r0
    1798:	0f 90       	pop	r0
    179a:	cf 91       	pop	r28
    179c:	df 91       	pop	r29
    179e:	08 95       	ret

000017a0 <TWI_start>:
void TWI_start(void) {
    17a0:	df 93       	push	r29
    17a2:	cf 93       	push	r28
    17a4:	cd b7       	in	r28, 0x3d	; 61
    17a6:	de b7       	in	r29, 0x3e	; 62
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    17a8:	e6 e5       	ldi	r30, 0x56	; 86
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	84 ea       	ldi	r24, 0xA4	; 164
    17ae:	80 83       	st	Z, r24
    while(BIT_IS_CLEAR(TWCR,TWINT));
    17b0:	e6 e5       	ldi	r30, 0x56	; 86
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	88 23       	and	r24, r24
    17b8:	dc f7       	brge	.-10     	; 0x17b0 <TWI_start+0x10>
}
    17ba:	cf 91       	pop	r28
    17bc:	df 91       	pop	r29
    17be:	08 95       	ret

000017c0 <TWI_stop>:
void TWI_stop(void) {
    17c0:	df 93       	push	r29
    17c2:	cf 93       	push	r28
    17c4:	cd b7       	in	r28, 0x3d	; 61
    17c6:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    17c8:	e6 e5       	ldi	r30, 0x56	; 86
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	84 e9       	ldi	r24, 0x94	; 148
    17ce:	80 83       	st	Z, r24
	// no need for polling to leave the bus
}
    17d0:	cf 91       	pop	r28
    17d2:	df 91       	pop	r29
    17d4:	08 95       	ret

000017d6 <TWI_writeByte>:
void TWI_writeByte(uint8 data) {
    17d6:	df 93       	push	r29
    17d8:	cf 93       	push	r28
    17da:	0f 92       	push	r0
    17dc:	cd b7       	in	r28, 0x3d	; 61
    17de:	de b7       	in	r29, 0x3e	; 62
    17e0:	89 83       	std	Y+1, r24	; 0x01
	TWDR = data;
    17e2:	e3 e2       	ldi	r30, 0x23	; 35
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	89 81       	ldd	r24, Y+1	; 0x01
    17e8:	80 83       	st	Z, r24
	TWCR = (1 << TWINT) | (1 << TWEN);
    17ea:	e6 e5       	ldi	r30, 0x56	; 86
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	84 e8       	ldi	r24, 0x84	; 132
    17f0:	80 83       	st	Z, r24
	while (BIT_IS_CLEAR(TWCR, TWINT))
    17f2:	e6 e5       	ldi	r30, 0x56	; 86
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	88 23       	and	r24, r24
    17fa:	dc f7       	brge	.-10     	; 0x17f2 <TWI_writeByte+0x1c>
		;
}
    17fc:	0f 90       	pop	r0
    17fe:	cf 91       	pop	r28
    1800:	df 91       	pop	r29
    1802:	08 95       	ret

00001804 <TWI_readByteWithACK>:
uint8 TWI_readByteWithACK(void) {
    1804:	df 93       	push	r29
    1806:	cf 93       	push	r28
    1808:	cd b7       	in	r28, 0x3d	; 61
    180a:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    180c:	e6 e5       	ldi	r30, 0x56	; 86
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	84 ec       	ldi	r24, 0xC4	; 196
    1812:	80 83       	st	Z, r24
	while (BIT_IS_CLEAR(TWCR, TWINT))
    1814:	e6 e5       	ldi	r30, 0x56	; 86
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	88 23       	and	r24, r24
    181c:	dc f7       	brge	.-10     	; 0x1814 <TWI_readByteWithACK+0x10>
		;
	return TWDR;
    181e:	e3 e2       	ldi	r30, 0x23	; 35
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	80 81       	ld	r24, Z
}
    1824:	cf 91       	pop	r28
    1826:	df 91       	pop	r29
    1828:	08 95       	ret

0000182a <TWI_readByteWithNACK>:
uint8 TWI_readByteWithNACK(void) {
    182a:	df 93       	push	r29
    182c:	cf 93       	push	r28
    182e:	cd b7       	in	r28, 0x3d	; 61
    1830:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWINT) | (1 << TWEN);
    1832:	e6 e5       	ldi	r30, 0x56	; 86
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	84 e8       	ldi	r24, 0x84	; 132
    1838:	80 83       	st	Z, r24
	while (BIT_IS_CLEAR(TWCR, TWINT))
    183a:	e6 e5       	ldi	r30, 0x56	; 86
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	80 81       	ld	r24, Z
    1840:	88 23       	and	r24, r24
    1842:	dc f7       	brge	.-10     	; 0x183a <TWI_readByteWithNACK+0x10>
		;
	return TWDR;
    1844:	e3 e2       	ldi	r30, 0x23	; 35
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
}
    184a:	cf 91       	pop	r28
    184c:	df 91       	pop	r29
    184e:	08 95       	ret

00001850 <TWI_getStatus>:
uint8 TWI_getStatus(void) {
    1850:	df 93       	push	r29
    1852:	cf 93       	push	r28
    1854:	0f 92       	push	r0
    1856:	cd b7       	in	r28, 0x3d	; 61
    1858:	de b7       	in	r29, 0x3e	; 62
	uint8 status = TWSR & 0xF8;
    185a:	e1 e2       	ldi	r30, 0x21	; 33
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	88 7f       	andi	r24, 0xF8	; 248
    1862:	89 83       	std	Y+1, r24	; 0x01
	return status;
    1864:	89 81       	ldd	r24, Y+1	; 0x01
}
    1866:	0f 90       	pop	r0
    1868:	cf 91       	pop	r28
    186a:	df 91       	pop	r29
    186c:	08 95       	ret

0000186e <USART_init>:
 * Functional responsible for Initialize the UART device by:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void USART_init(USART_ConfigType *config) {
    186e:	df 93       	push	r29
    1870:	cf 93       	push	r28
    1872:	00 d0       	rcall	.+0      	; 0x1874 <USART_init+0x6>
    1874:	00 d0       	rcall	.+0      	; 0x1876 <USART_init+0x8>
    1876:	00 d0       	rcall	.+0      	; 0x1878 <USART_init+0xa>
    1878:	cd b7       	in	r28, 0x3d	; 61
    187a:	de b7       	in	r29, 0x3e	; 62
    187c:	9c 83       	std	Y+4, r25	; 0x04
    187e:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    1880:	1a 82       	std	Y+2, r1	; 0x02
    1882:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(UCSRA, U2X);
    1884:	ab e2       	ldi	r26, 0x2B	; 43
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	eb e2       	ldi	r30, 0x2B	; 43
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	82 60       	ori	r24, 0x02	; 2
    1890:	8c 93       	st	X, r24
	SET_BIT(UCSRB, RXEN);
    1892:	aa e2       	ldi	r26, 0x2A	; 42
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	ea e2       	ldi	r30, 0x2A	; 42
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	80 61       	ori	r24, 0x10	; 16
    189e:	8c 93       	st	X, r24
	SET_BIT(UCSRB, TXEN);
    18a0:	aa e2       	ldi	r26, 0x2A	; 42
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	ea e2       	ldi	r30, 0x2A	; 42
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	88 60       	ori	r24, 0x08	; 8
    18ac:	8c 93       	st	X, r24
	ubrr_value = (uint16) ((F_CPU / (config->Baud_Rate * 8UL)) - 1);
    18ae:	eb 81       	ldd	r30, Y+3	; 0x03
    18b0:	fc 81       	ldd	r31, Y+4	; 0x04
    18b2:	83 81       	ldd	r24, Z+3	; 0x03
    18b4:	94 81       	ldd	r25, Z+4	; 0x04
    18b6:	cc 01       	movw	r24, r24
    18b8:	a0 e0       	ldi	r26, 0x00	; 0
    18ba:	b0 e0       	ldi	r27, 0x00	; 0
    18bc:	88 0f       	add	r24, r24
    18be:	99 1f       	adc	r25, r25
    18c0:	aa 1f       	adc	r26, r26
    18c2:	bb 1f       	adc	r27, r27
    18c4:	88 0f       	add	r24, r24
    18c6:	99 1f       	adc	r25, r25
    18c8:	aa 1f       	adc	r26, r26
    18ca:	bb 1f       	adc	r27, r27
    18cc:	88 0f       	add	r24, r24
    18ce:	99 1f       	adc	r25, r25
    18d0:	aa 1f       	adc	r26, r26
    18d2:	bb 1f       	adc	r27, r27
    18d4:	9c 01       	movw	r18, r24
    18d6:	ad 01       	movw	r20, r26
    18d8:	80 e0       	ldi	r24, 0x00	; 0
    18da:	92 e1       	ldi	r25, 0x12	; 18
    18dc:	aa e7       	ldi	r26, 0x7A	; 122
    18de:	b0 e0       	ldi	r27, 0x00	; 0
    18e0:	bc 01       	movw	r22, r24
    18e2:	cd 01       	movw	r24, r26
    18e4:	0e 94 ca 13 	call	0x2794	; 0x2794 <__udivmodsi4>
    18e8:	da 01       	movw	r26, r20
    18ea:	c9 01       	movw	r24, r18
    18ec:	01 97       	sbiw	r24, 0x01	; 1
    18ee:	9a 83       	std	Y+2, r25	; 0x02
    18f0:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = ubrr_value >> 8;
    18f2:	e0 e4       	ldi	r30, 0x40	; 64
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	89 81       	ldd	r24, Y+1	; 0x01
    18f8:	9a 81       	ldd	r25, Y+2	; 0x02
    18fa:	89 2f       	mov	r24, r25
    18fc:	99 27       	eor	r25, r25
    18fe:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    1900:	e9 e2       	ldi	r30, 0x29	; 41
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	89 81       	ldd	r24, Y+1	; 0x01
    1906:	80 83       	st	Z, r24
	SET_BIT(UCSRC, URSEL);
    1908:	a0 e4       	ldi	r26, 0x40	; 64
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	e0 e4       	ldi	r30, 0x40	; 64
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	80 68       	ori	r24, 0x80	; 128
    1914:	8c 93       	st	X, r24
	switch (config->Character_Size) {
    1916:	eb 81       	ldd	r30, Y+3	; 0x03
    1918:	fc 81       	ldd	r31, Y+4	; 0x04
    191a:	82 81       	ldd	r24, Z+2	; 0x02
    191c:	28 2f       	mov	r18, r24
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	3e 83       	std	Y+6, r19	; 0x06
    1922:	2d 83       	std	Y+5, r18	; 0x05
    1924:	8d 81       	ldd	r24, Y+5	; 0x05
    1926:	9e 81       	ldd	r25, Y+6	; 0x06
    1928:	87 30       	cpi	r24, 0x07	; 7
    192a:	91 05       	cpc	r25, r1
    192c:	09 f4       	brne	.+2      	; 0x1930 <USART_init+0xc2>
    192e:	49 c0       	rjmp	.+146    	; 0x19c2 <USART_init+0x154>
    1930:	2d 81       	ldd	r18, Y+5	; 0x05
    1932:	3e 81       	ldd	r19, Y+6	; 0x06
    1934:	28 30       	cpi	r18, 0x08	; 8
    1936:	31 05       	cpc	r19, r1
    1938:	5c f4       	brge	.+22     	; 0x1950 <USART_init+0xe2>
    193a:	8d 81       	ldd	r24, Y+5	; 0x05
    193c:	9e 81       	ldd	r25, Y+6	; 0x06
    193e:	85 30       	cpi	r24, 0x05	; 5
    1940:	91 05       	cpc	r25, r1
    1942:	99 f0       	breq	.+38     	; 0x196a <USART_init+0xfc>
    1944:	2d 81       	ldd	r18, Y+5	; 0x05
    1946:	3e 81       	ldd	r19, Y+6	; 0x06
    1948:	26 30       	cpi	r18, 0x06	; 6
    194a:	31 05       	cpc	r19, r1
    194c:	21 f1       	breq	.+72     	; 0x1996 <USART_init+0x128>
    194e:	7a c0       	rjmp	.+244    	; 0x1a44 <USART_init+0x1d6>
    1950:	8d 81       	ldd	r24, Y+5	; 0x05
    1952:	9e 81       	ldd	r25, Y+6	; 0x06
    1954:	88 30       	cpi	r24, 0x08	; 8
    1956:	91 05       	cpc	r25, r1
    1958:	09 f4       	brne	.+2      	; 0x195c <USART_init+0xee>
    195a:	49 c0       	rjmp	.+146    	; 0x19ee <USART_init+0x180>
    195c:	2d 81       	ldd	r18, Y+5	; 0x05
    195e:	3e 81       	ldd	r19, Y+6	; 0x06
    1960:	29 30       	cpi	r18, 0x09	; 9
    1962:	31 05       	cpc	r19, r1
    1964:	09 f4       	brne	.+2      	; 0x1968 <USART_init+0xfa>
    1966:	59 c0       	rjmp	.+178    	; 0x1a1a <USART_init+0x1ac>
    1968:	6d c0       	rjmp	.+218    	; 0x1a44 <USART_init+0x1d6>
	case 5:
		CLEAR_BIT(UCSRC, UCSZ0);
    196a:	a0 e4       	ldi	r26, 0x40	; 64
    196c:	b0 e0       	ldi	r27, 0x00	; 0
    196e:	e0 e4       	ldi	r30, 0x40	; 64
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	80 81       	ld	r24, Z
    1974:	8d 7f       	andi	r24, 0xFD	; 253
    1976:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC, UCSZ1);
    1978:	a0 e4       	ldi	r26, 0x40	; 64
    197a:	b0 e0       	ldi	r27, 0x00	; 0
    197c:	e0 e4       	ldi	r30, 0x40	; 64
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	8b 7f       	andi	r24, 0xFB	; 251
    1984:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRB, UCSZ2);
    1986:	aa e2       	ldi	r26, 0x2A	; 42
    1988:	b0 e0       	ldi	r27, 0x00	; 0
    198a:	ea e2       	ldi	r30, 0x2A	; 42
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	8b 7f       	andi	r24, 0xFB	; 251
    1992:	8c 93       	st	X, r24
    1994:	57 c0       	rjmp	.+174    	; 0x1a44 <USART_init+0x1d6>
		break;
	case 6:
		SET_BIT(UCSRC, UCSZ0);
    1996:	a0 e4       	ldi	r26, 0x40	; 64
    1998:	b0 e0       	ldi	r27, 0x00	; 0
    199a:	e0 e4       	ldi	r30, 0x40	; 64
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	82 60       	ori	r24, 0x02	; 2
    19a2:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC, UCSZ1);
    19a4:	a0 e4       	ldi	r26, 0x40	; 64
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	e0 e4       	ldi	r30, 0x40	; 64
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	8b 7f       	andi	r24, 0xFB	; 251
    19b0:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRB, UCSZ2);
    19b2:	aa e2       	ldi	r26, 0x2A	; 42
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	ea e2       	ldi	r30, 0x2A	; 42
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	8b 7f       	andi	r24, 0xFB	; 251
    19be:	8c 93       	st	X, r24
    19c0:	41 c0       	rjmp	.+130    	; 0x1a44 <USART_init+0x1d6>
		break;
	case 7:
		CLEAR_BIT(UCSRC, UCSZ0);
    19c2:	a0 e4       	ldi	r26, 0x40	; 64
    19c4:	b0 e0       	ldi	r27, 0x00	; 0
    19c6:	e0 e4       	ldi	r30, 0x40	; 64
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	80 81       	ld	r24, Z
    19cc:	8d 7f       	andi	r24, 0xFD	; 253
    19ce:	8c 93       	st	X, r24
		SET_BIT(UCSRC, UCSZ1);
    19d0:	a0 e4       	ldi	r26, 0x40	; 64
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	e0 e4       	ldi	r30, 0x40	; 64
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 81       	ld	r24, Z
    19da:	84 60       	ori	r24, 0x04	; 4
    19dc:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRB, UCSZ2);
    19de:	aa e2       	ldi	r26, 0x2A	; 42
    19e0:	b0 e0       	ldi	r27, 0x00	; 0
    19e2:	ea e2       	ldi	r30, 0x2A	; 42
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	80 81       	ld	r24, Z
    19e8:	8b 7f       	andi	r24, 0xFB	; 251
    19ea:	8c 93       	st	X, r24
    19ec:	2b c0       	rjmp	.+86     	; 0x1a44 <USART_init+0x1d6>
		break;
	case 8:
		SET_BIT(UCSRC, UCSZ0);
    19ee:	a0 e4       	ldi	r26, 0x40	; 64
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	e0 e4       	ldi	r30, 0x40	; 64
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	82 60       	ori	r24, 0x02	; 2
    19fa:	8c 93       	st	X, r24
		SET_BIT(UCSRC, UCSZ1);
    19fc:	a0 e4       	ldi	r26, 0x40	; 64
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	e0 e4       	ldi	r30, 0x40	; 64
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	84 60       	ori	r24, 0x04	; 4
    1a08:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRB, UCSZ2);
    1a0a:	aa e2       	ldi	r26, 0x2A	; 42
    1a0c:	b0 e0       	ldi	r27, 0x00	; 0
    1a0e:	ea e2       	ldi	r30, 0x2A	; 42
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	8b 7f       	andi	r24, 0xFB	; 251
    1a16:	8c 93       	st	X, r24
    1a18:	15 c0       	rjmp	.+42     	; 0x1a44 <USART_init+0x1d6>
		break;
	case 9:
		SET_BIT(UCSRC, UCSZ0);
    1a1a:	a0 e4       	ldi	r26, 0x40	; 64
    1a1c:	b0 e0       	ldi	r27, 0x00	; 0
    1a1e:	e0 e4       	ldi	r30, 0x40	; 64
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	82 60       	ori	r24, 0x02	; 2
    1a26:	8c 93       	st	X, r24
		SET_BIT(UCSRC, UCSZ1);
    1a28:	a0 e4       	ldi	r26, 0x40	; 64
    1a2a:	b0 e0       	ldi	r27, 0x00	; 0
    1a2c:	e0 e4       	ldi	r30, 0x40	; 64
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	80 81       	ld	r24, Z
    1a32:	84 60       	ori	r24, 0x04	; 4
    1a34:	8c 93       	st	X, r24
		SET_BIT(UCSRB, UCSZ2);
    1a36:	aa e2       	ldi	r26, 0x2A	; 42
    1a38:	b0 e0       	ldi	r27, 0x00	; 0
    1a3a:	ea e2       	ldi	r30, 0x2A	; 42
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	80 81       	ld	r24, Z
    1a40:	84 60       	ori	r24, 0x04	; 4
    1a42:	8c 93       	st	X, r24
		break;
	}
	UCSRC = (UCSRC & 0xcf) | (config->ParityMode << 4);
    1a44:	a0 e4       	ldi	r26, 0x40	; 64
    1a46:	b0 e0       	ldi	r27, 0x00	; 0
    1a48:	e0 e4       	ldi	r30, 0x40	; 64
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	28 2f       	mov	r18, r24
    1a50:	2f 7c       	andi	r18, 0xCF	; 207
    1a52:	eb 81       	ldd	r30, Y+3	; 0x03
    1a54:	fc 81       	ldd	r31, Y+4	; 0x04
    1a56:	80 81       	ld	r24, Z
    1a58:	88 2f       	mov	r24, r24
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	82 95       	swap	r24
    1a5e:	92 95       	swap	r25
    1a60:	90 7f       	andi	r25, 0xF0	; 240
    1a62:	98 27       	eor	r25, r24
    1a64:	80 7f       	andi	r24, 0xF0	; 240
    1a66:	98 27       	eor	r25, r24
    1a68:	82 2b       	or	r24, r18
    1a6a:	8c 93       	st	X, r24
	if (config->Stop_Select == BIT_1_STOP_SELECT) {
    1a6c:	eb 81       	ldd	r30, Y+3	; 0x03
    1a6e:	fc 81       	ldd	r31, Y+4	; 0x04
    1a70:	81 81       	ldd	r24, Z+1	; 0x01
    1a72:	88 23       	and	r24, r24
    1a74:	41 f4       	brne	.+16     	; 0x1a86 <USART_init+0x218>
		CLEAR_BIT(UCSRC, USBS);
    1a76:	a0 e4       	ldi	r26, 0x40	; 64
    1a78:	b0 e0       	ldi	r27, 0x00	; 0
    1a7a:	e0 e4       	ldi	r30, 0x40	; 64
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	87 7f       	andi	r24, 0xF7	; 247
    1a82:	8c 93       	st	X, r24
    1a84:	07 c0       	rjmp	.+14     	; 0x1a94 <USART_init+0x226>
	} else {
		SET_BIT(UCSRC, USBS);
    1a86:	a0 e4       	ldi	r26, 0x40	; 64
    1a88:	b0 e0       	ldi	r27, 0x00	; 0
    1a8a:	e0 e4       	ldi	r30, 0x40	; 64
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	88 60       	ori	r24, 0x08	; 8
    1a92:	8c 93       	st	X, r24
	}
}
    1a94:	26 96       	adiw	r28, 0x06	; 6
    1a96:	0f b6       	in	r0, 0x3f	; 63
    1a98:	f8 94       	cli
    1a9a:	de bf       	out	0x3e, r29	; 62
    1a9c:	0f be       	out	0x3f, r0	; 63
    1a9e:	cd bf       	out	0x3d, r28	; 61
    1aa0:	cf 91       	pop	r28
    1aa2:	df 91       	pop	r29
    1aa4:	08 95       	ret

00001aa6 <USART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void USART_sendByte(uint8 data) {
    1aa6:	df 93       	push	r29
    1aa8:	cf 93       	push	r28
    1aaa:	0f 92       	push	r0
    1aac:	cd b7       	in	r28, 0x3d	; 61
    1aae:	de b7       	in	r29, 0x3e	; 62
    1ab0:	89 83       	std	Y+1, r24	; 0x01
	UDR = data;
    1ab2:	ec e2       	ldi	r30, 0x2C	; 44
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	89 81       	ldd	r24, Y+1	; 0x01
    1ab8:	80 83       	st	Z, r24
	while (BIT_IS_CLEAR(UCSRA, TXC))
    1aba:	eb e2       	ldi	r30, 0x2B	; 43
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	88 2f       	mov	r24, r24
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	80 74       	andi	r24, 0x40	; 64
    1ac6:	90 70       	andi	r25, 0x00	; 0
    1ac8:	00 97       	sbiw	r24, 0x00	; 0
    1aca:	b9 f3       	breq	.-18     	; 0x1aba <USART_sendByte+0x14>
		;
	SET_BIT(UCSRA, TXC);
    1acc:	ab e2       	ldi	r26, 0x2B	; 43
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	eb e2       	ldi	r30, 0x2B	; 43
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	80 64       	ori	r24, 0x40	; 64
    1ad8:	8c 93       	st	X, r24
}
    1ada:	0f 90       	pop	r0
    1adc:	cf 91       	pop	r28
    1ade:	df 91       	pop	r29
    1ae0:	08 95       	ret

00001ae2 <USART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 USART_recieveByte() {
    1ae2:	df 93       	push	r29
    1ae4:	cf 93       	push	r28
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
	while (BIT_IS_CLEAR(UCSRA, RXC))
    1aea:	eb e2       	ldi	r30, 0x2B	; 43
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	80 81       	ld	r24, Z
    1af0:	88 23       	and	r24, r24
    1af2:	dc f7       	brge	.-10     	; 0x1aea <USART_recieveByte+0x8>
		;
	return UDR;
    1af4:	ec e2       	ldi	r30, 0x2C	; 44
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
	// it returns the data and clear the flag So U don't need to clear it
}
    1afa:	cf 91       	pop	r28
    1afc:	df 91       	pop	r29
    1afe:	08 95       	ret

00001b00 <USART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void USART_sendString(string s) {
    1b00:	df 93       	push	r29
    1b02:	cf 93       	push	r28
    1b04:	00 d0       	rcall	.+0      	; 0x1b06 <USART_sendString+0x6>
    1b06:	0f 92       	push	r0
    1b08:	cd b7       	in	r28, 0x3d	; 61
    1b0a:	de b7       	in	r29, 0x3e	; 62
    1b0c:	9b 83       	std	Y+3, r25	; 0x03
    1b0e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1b10:	19 82       	std	Y+1, r1	; 0x01
    1b12:	0e c0       	rjmp	.+28     	; 0x1b30 <USART_sendString+0x30>
	while (s[i] != '\0') {
		USART_sendByte(s[i]);
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
    1b16:	28 2f       	mov	r18, r24
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b1e:	fc 01       	movw	r30, r24
    1b20:	e2 0f       	add	r30, r18
    1b22:	f3 1f       	adc	r31, r19
    1b24:	80 81       	ld	r24, Z
    1b26:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <USART_sendByte>
		i++;
    1b2a:	89 81       	ldd	r24, Y+1	; 0x01
    1b2c:	8f 5f       	subi	r24, 0xFF	; 255
    1b2e:	89 83       	std	Y+1, r24	; 0x01
 * Description :
 * Send the required string through UART to the other UART device.
 */
void USART_sendString(string s) {
	uint8 i = 0;
	while (s[i] != '\0') {
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
    1b32:	28 2f       	mov	r18, r24
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	8a 81       	ldd	r24, Y+2	; 0x02
    1b38:	9b 81       	ldd	r25, Y+3	; 0x03
    1b3a:	fc 01       	movw	r30, r24
    1b3c:	e2 0f       	add	r30, r18
    1b3e:	f3 1f       	adc	r31, r19
    1b40:	80 81       	ld	r24, Z
    1b42:	88 23       	and	r24, r24
    1b44:	39 f7       	brne	.-50     	; 0x1b14 <USART_sendString+0x14>
		USART_sendByte(s[i]);
		i++;
	}
}
    1b46:	0f 90       	pop	r0
    1b48:	0f 90       	pop	r0
    1b4a:	0f 90       	pop	r0
    1b4c:	cf 91       	pop	r28
    1b4e:	df 91       	pop	r29
    1b50:	08 95       	ret

00001b52 <USART_recieveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void USART_recieveString(uint8 *Str) {
    1b52:	0f 93       	push	r16
    1b54:	1f 93       	push	r17
    1b56:	df 93       	push	r29
    1b58:	cf 93       	push	r28
    1b5a:	00 d0       	rcall	.+0      	; 0x1b5c <USART_recieveString+0xa>
    1b5c:	0f 92       	push	r0
    1b5e:	cd b7       	in	r28, 0x3d	; 61
    1b60:	de b7       	in	r29, 0x3e	; 62
    1b62:	9b 83       	std	Y+3, r25	; 0x03
    1b64:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1b66:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = USART_recieveByte();
    1b68:	89 81       	ldd	r24, Y+1	; 0x01
    1b6a:	28 2f       	mov	r18, r24
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b70:	9b 81       	ldd	r25, Y+3	; 0x03
    1b72:	8c 01       	movw	r16, r24
    1b74:	02 0f       	add	r16, r18
    1b76:	13 1f       	adc	r17, r19
    1b78:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <USART_recieveByte>
    1b7c:	f8 01       	movw	r30, r16
    1b7e:	80 83       	st	Z, r24
    1b80:	0f c0       	rjmp	.+30     	; 0x1ba0 <USART_recieveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    1b82:	89 81       	ldd	r24, Y+1	; 0x01
    1b84:	8f 5f       	subi	r24, 0xFF	; 255
    1b86:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = USART_recieveByte();
    1b88:	89 81       	ldd	r24, Y+1	; 0x01
    1b8a:	28 2f       	mov	r18, r24
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b90:	9b 81       	ldd	r25, Y+3	; 0x03
    1b92:	8c 01       	movw	r16, r24
    1b94:	02 0f       	add	r16, r18
    1b96:	13 1f       	adc	r17, r19
    1b98:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <USART_recieveByte>
    1b9c:	f8 01       	movw	r30, r16
    1b9e:	80 83       	st	Z, r24
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void USART_recieveString(uint8 *Str) {
	uint8 i = 0;
	Str[i] = USART_recieveByte();
	while(Str[i] != '#')
    1ba0:	89 81       	ldd	r24, Y+1	; 0x01
    1ba2:	28 2f       	mov	r18, r24
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba8:	9b 81       	ldd	r25, Y+3	; 0x03
    1baa:	fc 01       	movw	r30, r24
    1bac:	e2 0f       	add	r30, r18
    1bae:	f3 1f       	adc	r31, r19
    1bb0:	80 81       	ld	r24, Z
    1bb2:	83 32       	cpi	r24, 0x23	; 35
    1bb4:	31 f7       	brne	.-52     	; 0x1b82 <USART_recieveString+0x30>
	{
		i++;
		Str[i] = USART_recieveByte();
	}
	Str[i] = '\0';
    1bb6:	89 81       	ldd	r24, Y+1	; 0x01
    1bb8:	28 2f       	mov	r18, r24
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbe:	9b 81       	ldd	r25, Y+3	; 0x03
    1bc0:	fc 01       	movw	r30, r24
    1bc2:	e2 0f       	add	r30, r18
    1bc4:	f3 1f       	adc	r31, r19
    1bc6:	10 82       	st	Z, r1
}
    1bc8:	0f 90       	pop	r0
    1bca:	0f 90       	pop	r0
    1bcc:	0f 90       	pop	r0
    1bce:	cf 91       	pop	r28
    1bd0:	df 91       	pop	r29
    1bd2:	1f 91       	pop	r17
    1bd4:	0f 91       	pop	r16
    1bd6:	08 95       	ret

00001bd8 <BUZZER_init>:
#include"INC/buzzer.h"
void BUZZER_init() {
    1bd8:	df 93       	push	r29
    1bda:	cf 93       	push	r28
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
    1be0:	82 e0       	ldi	r24, 0x02	; 2
    1be2:	65 e0       	ldi	r22, 0x05	; 5
    1be4:	41 e0       	ldi	r20, 0x01	; 1
    1be6:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <GPIO_setupPinDirection>
	BUZZER_off();
    1bea:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <BUZZER_off>
}
    1bee:	cf 91       	pop	r28
    1bf0:	df 91       	pop	r29
    1bf2:	08 95       	ret

00001bf4 <BUZZER_on>:
void BUZZER_on(void) {
    1bf4:	df 93       	push	r29
    1bf6:	cf 93       	push	r28
    1bf8:	cd b7       	in	r28, 0x3d	; 61
    1bfa:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, BUZZER_ON);
    1bfc:	82 e0       	ldi	r24, 0x02	; 2
    1bfe:	65 e0       	ldi	r22, 0x05	; 5
    1c00:	41 e0       	ldi	r20, 0x01	; 1
    1c02:	0e 94 e7 07 	call	0xfce	; 0xfce <GPIO_writePin>
}
    1c06:	cf 91       	pop	r28
    1c08:	df 91       	pop	r29
    1c0a:	08 95       	ret

00001c0c <BUZZER_off>:
void BUZZER_off(void) {
    1c0c:	df 93       	push	r29
    1c0e:	cf 93       	push	r28
    1c10:	cd b7       	in	r28, 0x3d	; 61
    1c12:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, BUZZER_OFF);
    1c14:	82 e0       	ldi	r24, 0x02	; 2
    1c16:	65 e0       	ldi	r22, 0x05	; 5
    1c18:	40 e0       	ldi	r20, 0x00	; 0
    1c1a:	0e 94 e7 07 	call	0xfce	; 0xfce <GPIO_writePin>
}
    1c1e:	cf 91       	pop	r28
    1c20:	df 91       	pop	r29
    1c22:	08 95       	ret

00001c24 <DcMotor_Init>:
 * Description :
 * setup the direction for the two
 * motor pins through the GPIO driver.
 * Stop at the DC-Motor at the beginning through the GPIO driver.
 */
void DcMotor_Init(void) {
    1c24:	df 93       	push	r29
    1c26:	cf 93       	push	r28
    1c28:	cd b7       	in	r28, 0x3d	; 61
    1c2a:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(DC_MOTOR_IN1_PORT_ID, DC_MOTOR_IN1_PIN_ID,
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	60 e0       	ldi	r22, 0x00	; 0
    1c30:	41 e0       	ldi	r20, 0x01	; 1
    1c32:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <GPIO_setupPinDirection>
			PIN_OUTPUT);
	GPIO_setupPinDirection(DC_MOTOR_IN2_PORT_ID, DC_MOTOR_IN2_PIN_ID,
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	61 e0       	ldi	r22, 0x01	; 1
    1c3a:	41 e0       	ldi	r20, 0x01	; 1
    1c3c:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <GPIO_setupPinDirection>
			PIN_OUTPUT);
	DcMotor_Rotate(STOP);
    1c40:	80 e0       	ldi	r24, 0x00	; 0
    1c42:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <DcMotor_Rotate>
}
    1c46:	cf 91       	pop	r28
    1c48:	df 91       	pop	r29
    1c4a:	08 95       	ret

00001c4c <DcMotor_Rotate>:
 * rotate the DC Motor CW/ or A-CW or
 * stop the motor based on the state input state value.
 * Send the required duty cycle to the PWM driver based on the
 * required speed value.
 */
void DcMotor_Rotate(DC_MOTOR_State state) {
    1c4c:	df 93       	push	r29
    1c4e:	cf 93       	push	r28
    1c50:	00 d0       	rcall	.+0      	; 0x1c52 <DcMotor_Rotate+0x6>
    1c52:	0f 92       	push	r0
    1c54:	cd b7       	in	r28, 0x3d	; 61
    1c56:	de b7       	in	r29, 0x3e	; 62
    1c58:	89 83       	std	Y+1, r24	; 0x01
	switch (state) {
    1c5a:	89 81       	ldd	r24, Y+1	; 0x01
    1c5c:	28 2f       	mov	r18, r24
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	3b 83       	std	Y+3, r19	; 0x03
    1c62:	2a 83       	std	Y+2, r18	; 0x02
    1c64:	8a 81       	ldd	r24, Y+2	; 0x02
    1c66:	9b 81       	ldd	r25, Y+3	; 0x03
    1c68:	81 30       	cpi	r24, 0x01	; 1
    1c6a:	91 05       	cpc	r25, r1
    1c6c:	a1 f0       	breq	.+40     	; 0x1c96 <DcMotor_Rotate+0x4a>
    1c6e:	2a 81       	ldd	r18, Y+2	; 0x02
    1c70:	3b 81       	ldd	r19, Y+3	; 0x03
    1c72:	22 30       	cpi	r18, 0x02	; 2
    1c74:	31 05       	cpc	r19, r1
    1c76:	d1 f0       	breq	.+52     	; 0x1cac <DcMotor_Rotate+0x60>
    1c78:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c7c:	00 97       	sbiw	r24, 0x00	; 0
    1c7e:	01 f5       	brne	.+64     	; 0x1cc0 <DcMotor_Rotate+0x74>
	case STOP:
		GPIO_writePin(DC_MOTOR_IN1_PORT_ID, DC_MOTOR_IN1_PIN_ID, LOGIC_LOW);
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	60 e0       	ldi	r22, 0x00	; 0
    1c84:	40 e0       	ldi	r20, 0x00	; 0
    1c86:	0e 94 e7 07 	call	0xfce	; 0xfce <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_IN2_PORT_ID, DC_MOTOR_IN2_PIN_ID, LOGIC_LOW);
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	61 e0       	ldi	r22, 0x01	; 1
    1c8e:	40 e0       	ldi	r20, 0x00	; 0
    1c90:	0e 94 e7 07 	call	0xfce	; 0xfce <GPIO_writePin>
    1c94:	15 c0       	rjmp	.+42     	; 0x1cc0 <DcMotor_Rotate+0x74>
		break;
	case CW:
		GPIO_writePin(DC_MOTOR_IN1_PORT_ID, DC_MOTOR_IN1_PIN_ID, LOGIC_LOW);
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	60 e0       	ldi	r22, 0x00	; 0
    1c9a:	40 e0       	ldi	r20, 0x00	; 0
    1c9c:	0e 94 e7 07 	call	0xfce	; 0xfce <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_IN2_PORT_ID, DC_MOTOR_IN2_PIN_ID, LOGIC_HIGH);
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
    1ca2:	61 e0       	ldi	r22, 0x01	; 1
    1ca4:	41 e0       	ldi	r20, 0x01	; 1
    1ca6:	0e 94 e7 07 	call	0xfce	; 0xfce <GPIO_writePin>
    1caa:	0a c0       	rjmp	.+20     	; 0x1cc0 <DcMotor_Rotate+0x74>
		break;
	case ACW:
		GPIO_writePin(DC_MOTOR_IN1_PORT_ID, DC_MOTOR_IN1_PIN_ID, LOGIC_HIGH);
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	60 e0       	ldi	r22, 0x00	; 0
    1cb0:	41 e0       	ldi	r20, 0x01	; 1
    1cb2:	0e 94 e7 07 	call	0xfce	; 0xfce <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_IN2_PORT_ID, DC_MOTOR_IN2_PIN_ID, LOGIC_LOW);
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	61 e0       	ldi	r22, 0x01	; 1
    1cba:	40 e0       	ldi	r20, 0x00	; 0
    1cbc:	0e 94 e7 07 	call	0xfce	; 0xfce <GPIO_writePin>
		break;
	}
	Timer0_PWM_Start(99);
    1cc0:	83 e6       	ldi	r24, 0x63	; 99
    1cc2:	0e 94 b2 0a 	call	0x1564	; 0x1564 <Timer0_PWM_Start>
}
    1cc6:	0f 90       	pop	r0
    1cc8:	0f 90       	pop	r0
    1cca:	0f 90       	pop	r0
    1ccc:	cf 91       	pop	r28
    1cce:	df 91       	pop	r29
    1cd0:	08 95       	ret

00001cd2 <EEPROM_writeByte>:
 *  Description: The Source File of EEPROM Driver
 ============================================================================
 */
#include "INC/external_eeprom.h"
#include "../MCAL/INC/twi.h"
uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data) {
    1cd2:	df 93       	push	r29
    1cd4:	cf 93       	push	r28
    1cd6:	00 d0       	rcall	.+0      	; 0x1cd8 <EEPROM_writeByte+0x6>
    1cd8:	00 d0       	rcall	.+0      	; 0x1cda <EEPROM_writeByte+0x8>
    1cda:	cd b7       	in	r28, 0x3d	; 61
    1cdc:	de b7       	in	r29, 0x3e	; 62
    1cde:	9a 83       	std	Y+2, r25	; 0x02
    1ce0:	89 83       	std	Y+1, r24	; 0x01
    1ce2:	6b 83       	std	Y+3, r22	; 0x03
	TWI_start();
    1ce4:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <TWI_start>
	if (TWI_getStatus() != TWI_START)
    1ce8:	0e 94 28 0c 	call	0x1850	; 0x1850 <TWI_getStatus>
    1cec:	88 30       	cpi	r24, 0x08	; 8
    1cee:	11 f0       	breq	.+4      	; 0x1cf4 <EEPROM_writeByte+0x22>
		return ERROR;
    1cf0:	1c 82       	std	Y+4, r1	; 0x04
    1cf2:	28 c0       	rjmp	.+80     	; 0x1d44 <EEPROM_writeByte+0x72>
	TWI_writeByte((uint8) (0xA0 | ((u16addr & 0x0700) >> 7)));
    1cf4:	89 81       	ldd	r24, Y+1	; 0x01
    1cf6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf8:	80 70       	andi	r24, 0x00	; 0
    1cfa:	97 70       	andi	r25, 0x07	; 7
    1cfc:	88 0f       	add	r24, r24
    1cfe:	89 2f       	mov	r24, r25
    1d00:	88 1f       	adc	r24, r24
    1d02:	99 0b       	sbc	r25, r25
    1d04:	91 95       	neg	r25
    1d06:	80 6a       	ori	r24, 0xA0	; 160
    1d08:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1d0c:	0e 94 28 0c 	call	0x1850	; 0x1850 <TWI_getStatus>
    1d10:	88 31       	cpi	r24, 0x18	; 24
    1d12:	11 f0       	breq	.+4      	; 0x1d18 <EEPROM_writeByte+0x46>
		return ERROR;
    1d14:	1c 82       	std	Y+4, r1	; 0x04
    1d16:	16 c0       	rjmp	.+44     	; 0x1d44 <EEPROM_writeByte+0x72>
	TWI_writeByte((uint8) (u16addr));
    1d18:	89 81       	ldd	r24, Y+1	; 0x01
    1d1a:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1d1e:	0e 94 28 0c 	call	0x1850	; 0x1850 <TWI_getStatus>
    1d22:	88 32       	cpi	r24, 0x28	; 40
    1d24:	11 f0       	breq	.+4      	; 0x1d2a <EEPROM_writeByte+0x58>
		return ERROR;
    1d26:	1c 82       	std	Y+4, r1	; 0x04
    1d28:	0d c0       	rjmp	.+26     	; 0x1d44 <EEPROM_writeByte+0x72>
	TWI_writeByte(u8data);
    1d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2c:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1d30:	0e 94 28 0c 	call	0x1850	; 0x1850 <TWI_getStatus>
    1d34:	88 32       	cpi	r24, 0x28	; 40
    1d36:	11 f0       	breq	.+4      	; 0x1d3c <EEPROM_writeByte+0x6a>
		return ERROR;
    1d38:	1c 82       	std	Y+4, r1	; 0x04
    1d3a:	04 c0       	rjmp	.+8      	; 0x1d44 <EEPROM_writeByte+0x72>
	TWI_stop();
    1d3c:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <TWI_stop>
	return SUCCESS;
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	8c 83       	std	Y+4, r24	; 0x04
    1d44:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1d46:	0f 90       	pop	r0
    1d48:	0f 90       	pop	r0
    1d4a:	0f 90       	pop	r0
    1d4c:	0f 90       	pop	r0
    1d4e:	cf 91       	pop	r28
    1d50:	df 91       	pop	r29
    1d52:	08 95       	ret

00001d54 <EEPROM_readByte>:
uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data) {
    1d54:	df 93       	push	r29
    1d56:	cf 93       	push	r28
    1d58:	00 d0       	rcall	.+0      	; 0x1d5a <EEPROM_readByte+0x6>
    1d5a:	00 d0       	rcall	.+0      	; 0x1d5c <EEPROM_readByte+0x8>
    1d5c:	0f 92       	push	r0
    1d5e:	cd b7       	in	r28, 0x3d	; 61
    1d60:	de b7       	in	r29, 0x3e	; 62
    1d62:	9a 83       	std	Y+2, r25	; 0x02
    1d64:	89 83       	std	Y+1, r24	; 0x01
    1d66:	7c 83       	std	Y+4, r23	; 0x04
    1d68:	6b 83       	std	Y+3, r22	; 0x03
	TWI_start();
    1d6a:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <TWI_start>
	if (TWI_getStatus() != TWI_START)
    1d6e:	0e 94 28 0c 	call	0x1850	; 0x1850 <TWI_getStatus>
    1d72:	88 30       	cpi	r24, 0x08	; 8
    1d74:	11 f0       	breq	.+4      	; 0x1d7a <EEPROM_readByte+0x26>
		return ERROR;
    1d76:	1d 82       	std	Y+5, r1	; 0x05
    1d78:	44 c0       	rjmp	.+136    	; 0x1e02 <EEPROM_readByte+0xae>
	TWI_writeByte((uint8) ((0xA0) | ((u16addr & 0x0700) >> 7)));
    1d7a:	89 81       	ldd	r24, Y+1	; 0x01
    1d7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d7e:	80 70       	andi	r24, 0x00	; 0
    1d80:	97 70       	andi	r25, 0x07	; 7
    1d82:	88 0f       	add	r24, r24
    1d84:	89 2f       	mov	r24, r25
    1d86:	88 1f       	adc	r24, r24
    1d88:	99 0b       	sbc	r25, r25
    1d8a:	91 95       	neg	r25
    1d8c:	80 6a       	ori	r24, 0xA0	; 160
    1d8e:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1d92:	0e 94 28 0c 	call	0x1850	; 0x1850 <TWI_getStatus>
    1d96:	88 31       	cpi	r24, 0x18	; 24
    1d98:	11 f0       	breq	.+4      	; 0x1d9e <EEPROM_readByte+0x4a>
		return ERROR;
    1d9a:	1d 82       	std	Y+5, r1	; 0x05
    1d9c:	32 c0       	rjmp	.+100    	; 0x1e02 <EEPROM_readByte+0xae>
	TWI_writeByte((uint8) (u16addr));
    1d9e:	89 81       	ldd	r24, Y+1	; 0x01
    1da0:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1da4:	0e 94 28 0c 	call	0x1850	; 0x1850 <TWI_getStatus>
    1da8:	88 32       	cpi	r24, 0x28	; 40
    1daa:	11 f0       	breq	.+4      	; 0x1db0 <EEPROM_readByte+0x5c>
		return ERROR;
    1dac:	1d 82       	std	Y+5, r1	; 0x05
    1dae:	29 c0       	rjmp	.+82     	; 0x1e02 <EEPROM_readByte+0xae>
	TWI_start();
    1db0:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <TWI_start>
	if (TWI_getStatus() != TWI_REP_START)
    1db4:	0e 94 28 0c 	call	0x1850	; 0x1850 <TWI_getStatus>
    1db8:	80 31       	cpi	r24, 0x10	; 16
    1dba:	11 f0       	breq	.+4      	; 0x1dc0 <EEPROM_readByte+0x6c>
		return ERROR;
    1dbc:	1d 82       	std	Y+5, r1	; 0x05
    1dbe:	21 c0       	rjmp	.+66     	; 0x1e02 <EEPROM_readByte+0xae>
	TWI_writeByte((uint8) ((0xA0) | ((u16addr & 0x0700) >> 7) | 1));
    1dc0:	89 81       	ldd	r24, Y+1	; 0x01
    1dc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc4:	80 70       	andi	r24, 0x00	; 0
    1dc6:	97 70       	andi	r25, 0x07	; 7
    1dc8:	88 0f       	add	r24, r24
    1dca:	89 2f       	mov	r24, r25
    1dcc:	88 1f       	adc	r24, r24
    1dce:	99 0b       	sbc	r25, r25
    1dd0:	91 95       	neg	r25
    1dd2:	81 6a       	ori	r24, 0xA1	; 161
    1dd4:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1dd8:	0e 94 28 0c 	call	0x1850	; 0x1850 <TWI_getStatus>
    1ddc:	80 34       	cpi	r24, 0x40	; 64
    1dde:	11 f0       	breq	.+4      	; 0x1de4 <EEPROM_readByte+0x90>
		return ERROR;
    1de0:	1d 82       	std	Y+5, r1	; 0x05
    1de2:	0f c0       	rjmp	.+30     	; 0x1e02 <EEPROM_readByte+0xae>
	*u8data = TWI_readByteWithNACK();
    1de4:	0e 94 15 0c 	call	0x182a	; 0x182a <TWI_readByteWithNACK>
    1de8:	eb 81       	ldd	r30, Y+3	; 0x03
    1dea:	fc 81       	ldd	r31, Y+4	; 0x04
    1dec:	80 83       	st	Z, r24
	if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1dee:	0e 94 28 0c 	call	0x1850	; 0x1850 <TWI_getStatus>
    1df2:	88 35       	cpi	r24, 0x58	; 88
    1df4:	11 f0       	breq	.+4      	; 0x1dfa <EEPROM_readByte+0xa6>
		return ERROR;
    1df6:	1d 82       	std	Y+5, r1	; 0x05
    1df8:	04 c0       	rjmp	.+8      	; 0x1e02 <EEPROM_readByte+0xae>
	TWI_stop();
    1dfa:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <TWI_stop>
	return SUCCESS;
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	8d 83       	std	Y+5, r24	; 0x05
    1e02:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1e04:	0f 90       	pop	r0
    1e06:	0f 90       	pop	r0
    1e08:	0f 90       	pop	r0
    1e0a:	0f 90       	pop	r0
    1e0c:	0f 90       	pop	r0
    1e0e:	cf 91       	pop	r28
    1e10:	df 91       	pop	r29
    1e12:	08 95       	ret

00001e14 <main>:
#include"INC/Utilities.h"
int main() {
    1e14:	df 93       	push	r29
    1e16:	cf 93       	push	r28
    1e18:	cd b7       	in	r28, 0x3d	; 61
    1e1a:	de b7       	in	r29, 0x3e	; 62
	TASK_mainInit();
    1e1c:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <TASK_mainInit>
	TASK_createNewPass();
    1e20:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <TASK_createNewPass>
	while (1) {
		TASK_TakeOptions();
    1e24:	0e 94 c8 11 	call	0x2390	; 0x2390 <TASK_TakeOptions>
    1e28:	fd cf       	rjmp	.-6      	; 0x1e24 <main+0x10>

00001e2a <TASK_mainInit>:
*******************************************************************************/
/*
 * Description :
 * Function responsible for Modules initializations .
 */
void TASK_mainInit(void) {
    1e2a:	df 93       	push	r29
    1e2c:	cf 93       	push	r28
    1e2e:	cd b7       	in	r28, 0x3d	; 61
    1e30:	de b7       	in	r29, 0x3e	; 62
    1e32:	a5 97       	sbiw	r28, 0x25	; 37
    1e34:	0f b6       	in	r0, 0x3f	; 63
    1e36:	f8 94       	cli
    1e38:	de bf       	out	0x3e, r29	; 62
    1e3a:	0f be       	out	0x3f, r0	; 63
    1e3c:	cd bf       	out	0x3d, r28	; 61
	sei();
    1e3e:	78 94       	sei
	USART_ConfigType USART_config = { DISABLED_PARITY, BIT_1_STOP_SELECT, 8,
			9600 };
    1e40:	ce 01       	movw	r24, r28
    1e42:	01 96       	adiw	r24, 0x01	; 1
    1e44:	9b 8b       	std	Y+19, r25	; 0x13
    1e46:	8a 8b       	std	Y+18, r24	; 0x12
    1e48:	e4 e7       	ldi	r30, 0x74	; 116
    1e4a:	f1 e0       	ldi	r31, 0x01	; 1
    1e4c:	fd 8b       	std	Y+21, r31	; 0x15
    1e4e:	ec 8b       	std	Y+20, r30	; 0x14
    1e50:	f5 e0       	ldi	r31, 0x05	; 5
    1e52:	fe 8b       	std	Y+22, r31	; 0x16
    1e54:	ec 89       	ldd	r30, Y+20	; 0x14
    1e56:	fd 89       	ldd	r31, Y+21	; 0x15
    1e58:	00 80       	ld	r0, Z
    1e5a:	8c 89       	ldd	r24, Y+20	; 0x14
    1e5c:	9d 89       	ldd	r25, Y+21	; 0x15
    1e5e:	01 96       	adiw	r24, 0x01	; 1
    1e60:	9d 8b       	std	Y+21, r25	; 0x15
    1e62:	8c 8b       	std	Y+20, r24	; 0x14
    1e64:	ea 89       	ldd	r30, Y+18	; 0x12
    1e66:	fb 89       	ldd	r31, Y+19	; 0x13
    1e68:	00 82       	st	Z, r0
    1e6a:	8a 89       	ldd	r24, Y+18	; 0x12
    1e6c:	9b 89       	ldd	r25, Y+19	; 0x13
    1e6e:	01 96       	adiw	r24, 0x01	; 1
    1e70:	9b 8b       	std	Y+19, r25	; 0x13
    1e72:	8a 8b       	std	Y+18, r24	; 0x12
    1e74:	9e 89       	ldd	r25, Y+22	; 0x16
    1e76:	91 50       	subi	r25, 0x01	; 1
    1e78:	9e 8b       	std	Y+22, r25	; 0x16
    1e7a:	ee 89       	ldd	r30, Y+22	; 0x16
    1e7c:	ee 23       	and	r30, r30
    1e7e:	51 f7       	brne	.-44     	; 0x1e54 <TASK_mainInit+0x2a>
	TWI_Config TWI_config = { TWI_F_CPU_CLOCK, 1, 2 };
    1e80:	ce 01       	movw	r24, r28
    1e82:	06 96       	adiw	r24, 0x06	; 6
    1e84:	98 8f       	std	Y+24, r25	; 0x18
    1e86:	8f 8b       	std	Y+23, r24	; 0x17
    1e88:	e1 e7       	ldi	r30, 0x71	; 113
    1e8a:	f1 e0       	ldi	r31, 0x01	; 1
    1e8c:	fa 8f       	std	Y+26, r31	; 0x1a
    1e8e:	e9 8f       	std	Y+25, r30	; 0x19
    1e90:	f3 e0       	ldi	r31, 0x03	; 3
    1e92:	fb 8f       	std	Y+27, r31	; 0x1b
    1e94:	e9 8d       	ldd	r30, Y+25	; 0x19
    1e96:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1e98:	00 80       	ld	r0, Z
    1e9a:	89 8d       	ldd	r24, Y+25	; 0x19
    1e9c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1e9e:	01 96       	adiw	r24, 0x01	; 1
    1ea0:	9a 8f       	std	Y+26, r25	; 0x1a
    1ea2:	89 8f       	std	Y+25, r24	; 0x19
    1ea4:	ef 89       	ldd	r30, Y+23	; 0x17
    1ea6:	f8 8d       	ldd	r31, Y+24	; 0x18
    1ea8:	00 82       	st	Z, r0
    1eaa:	8f 89       	ldd	r24, Y+23	; 0x17
    1eac:	98 8d       	ldd	r25, Y+24	; 0x18
    1eae:	01 96       	adiw	r24, 0x01	; 1
    1eb0:	98 8f       	std	Y+24, r25	; 0x18
    1eb2:	8f 8b       	std	Y+23, r24	; 0x17
    1eb4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1eb6:	91 50       	subi	r25, 0x01	; 1
    1eb8:	9b 8f       	std	Y+27, r25	; 0x1b
    1eba:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1ebc:	ee 23       	and	r30, r30
    1ebe:	51 f7       	brne	.-44     	; 0x1e94 <TASK_mainInit+0x6a>
	Timer0_Config Timer0_config = { TIMER0_FAST_PWM_MODE,
			TIMER0_NON_INVERTING_MODE, TIMER0_F_CPU_CLOCK_8 };
    1ec0:	ce 01       	movw	r24, r28
    1ec2:	09 96       	adiw	r24, 0x09	; 9
    1ec4:	9d 8f       	std	Y+29, r25	; 0x1d
    1ec6:	8c 8f       	std	Y+28, r24	; 0x1c
    1ec8:	ee e6       	ldi	r30, 0x6E	; 110
    1eca:	f1 e0       	ldi	r31, 0x01	; 1
    1ecc:	ff 8f       	std	Y+31, r31	; 0x1f
    1ece:	ee 8f       	std	Y+30, r30	; 0x1e
    1ed0:	f3 e0       	ldi	r31, 0x03	; 3
    1ed2:	f8 a3       	std	Y+32, r31	; 0x20
    1ed4:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1ed6:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1ed8:	00 80       	ld	r0, Z
    1eda:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1edc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1ede:	01 96       	adiw	r24, 0x01	; 1
    1ee0:	9f 8f       	std	Y+31, r25	; 0x1f
    1ee2:	8e 8f       	std	Y+30, r24	; 0x1e
    1ee4:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1ee6:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1ee8:	00 82       	st	Z, r0
    1eea:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1eec:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1eee:	01 96       	adiw	r24, 0x01	; 1
    1ef0:	9d 8f       	std	Y+29, r25	; 0x1d
    1ef2:	8c 8f       	std	Y+28, r24	; 0x1c
    1ef4:	98 a1       	ldd	r25, Y+32	; 0x20
    1ef6:	91 50       	subi	r25, 0x01	; 1
    1ef8:	98 a3       	std	Y+32, r25	; 0x20
    1efa:	e8 a1       	ldd	r30, Y+32	; 0x20
    1efc:	ee 23       	and	r30, r30
    1efe:	51 f7       	brne	.-44     	; 0x1ed4 <TASK_mainInit+0xaa>
	TIMER1_setCallback(Callback);
    1f00:	80 e5       	ldi	r24, 0x50	; 80
    1f02:	93 e1       	ldi	r25, 0x13	; 19
    1f04:	0e 94 98 0b 	call	0x1730	; 0x1730 <TIMER1_setCallback>
	Timer1_ConfigType Timer1_configuration =
			{ 0, 8000, F_CPU_1024, Compare_Mode };
    1f08:	ce 01       	movw	r24, r28
    1f0a:	0c 96       	adiw	r24, 0x0c	; 12
    1f0c:	9a a3       	std	Y+34, r25	; 0x22
    1f0e:	89 a3       	std	Y+33, r24	; 0x21
    1f10:	e8 e6       	ldi	r30, 0x68	; 104
    1f12:	f1 e0       	ldi	r31, 0x01	; 1
    1f14:	fc a3       	std	Y+36, r31	; 0x24
    1f16:	eb a3       	std	Y+35, r30	; 0x23
    1f18:	f6 e0       	ldi	r31, 0x06	; 6
    1f1a:	fd a3       	std	Y+37, r31	; 0x25
    1f1c:	eb a1       	ldd	r30, Y+35	; 0x23
    1f1e:	fc a1       	ldd	r31, Y+36	; 0x24
    1f20:	00 80       	ld	r0, Z
    1f22:	8b a1       	ldd	r24, Y+35	; 0x23
    1f24:	9c a1       	ldd	r25, Y+36	; 0x24
    1f26:	01 96       	adiw	r24, 0x01	; 1
    1f28:	9c a3       	std	Y+36, r25	; 0x24
    1f2a:	8b a3       	std	Y+35, r24	; 0x23
    1f2c:	e9 a1       	ldd	r30, Y+33	; 0x21
    1f2e:	fa a1       	ldd	r31, Y+34	; 0x22
    1f30:	00 82       	st	Z, r0
    1f32:	89 a1       	ldd	r24, Y+33	; 0x21
    1f34:	9a a1       	ldd	r25, Y+34	; 0x22
    1f36:	01 96       	adiw	r24, 0x01	; 1
    1f38:	9a a3       	std	Y+34, r25	; 0x22
    1f3a:	89 a3       	std	Y+33, r24	; 0x21
    1f3c:	9d a1       	ldd	r25, Y+37	; 0x25
    1f3e:	91 50       	subi	r25, 0x01	; 1
    1f40:	9d a3       	std	Y+37, r25	; 0x25
    1f42:	ed a1       	ldd	r30, Y+37	; 0x25
    1f44:	ee 23       	and	r30, r30
    1f46:	51 f7       	brne	.-44     	; 0x1f1c <TASK_mainInit+0xf2>
	TIMER1_init_Compare(&Timer1_configuration);
    1f48:	ce 01       	movw	r24, r28
    1f4a:	0c 96       	adiw	r24, 0x0c	; 12
    1f4c:	0e 94 2f 0b 	call	0x165e	; 0x165e <TIMER1_init_Compare>
	USART_init(&USART_config);
    1f50:	ce 01       	movw	r24, r28
    1f52:	01 96       	adiw	r24, 0x01	; 1
    1f54:	0e 94 37 0c 	call	0x186e	; 0x186e <USART_init>
	TWI_init(&TWI_config);
    1f58:	ce 01       	movw	r24, r28
    1f5a:	06 96       	adiw	r24, 0x06	; 6
    1f5c:	0e 94 aa 0b 	call	0x1754	; 0x1754 <TWI_init>
	Timer0_init(&Timer0_config);
    1f60:	ce 01       	movw	r24, r28
    1f62:	09 96       	adiw	r24, 0x09	; 9
    1f64:	0e 94 3a 0a 	call	0x1474	; 0x1474 <Timer0_init>
	DcMotor_Init();
    1f68:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <DcMotor_Init>
	BUZZER_init();
    1f6c:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <BUZZER_init>
}
    1f70:	a5 96       	adiw	r28, 0x25	; 37
    1f72:	0f b6       	in	r0, 0x3f	; 63
    1f74:	f8 94       	cli
    1f76:	de bf       	out	0x3e, r29	; 62
    1f78:	0f be       	out	0x3f, r0	; 63
    1f7a:	cd bf       	out	0x3d, r28	; 61
    1f7c:	cf 91       	pop	r28
    1f7e:	df 91       	pop	r29
    1f80:	08 95       	ret

00001f82 <TASK_createNewPass>:
/*
 * Description :
 * Function responsible for creating new passwords by user inputs .
 */
void TASK_createNewPass(void) {
    1f82:	0f 93       	push	r16
    1f84:	1f 93       	push	r17
    1f86:	df 93       	push	r29
    1f88:	cf 93       	push	r28
    1f8a:	cd b7       	in	r28, 0x3d	; 61
    1f8c:	de b7       	in	r29, 0x3e	; 62
    1f8e:	a2 97       	sbiw	r28, 0x22	; 34
    1f90:	0f b6       	in	r0, 0x3f	; 63
    1f92:	f8 94       	cli
    1f94:	de bf       	out	0x3e, r29	; 62
    1f96:	0f be       	out	0x3f, r0	; 63
    1f98:	cd bf       	out	0x3d, r28	; 61
	// get the first password
	for (int i = 0; i < PassLength; i++) {
    1f9a:	1a a2       	std	Y+34, r1	; 0x22
    1f9c:	19 a2       	std	Y+33, r1	; 0x21
    1f9e:	7f c0       	rjmp	.+254    	; 0x209e <TASK_createNewPass+0x11c>
		CONTROL_ECU_Password_1[i] = USART_recieveByte();
    1fa0:	09 a1       	ldd	r16, Y+33	; 0x21
    1fa2:	1a a1       	ldd	r17, Y+34	; 0x22
    1fa4:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <USART_recieveByte>
    1fa8:	f8 01       	movw	r30, r16
    1faa:	ee 57       	subi	r30, 0x7E	; 126
    1fac:	fe 4f       	sbci	r31, 0xFE	; 254
    1fae:	80 83       	st	Z, r24
    1fb0:	80 e0       	ldi	r24, 0x00	; 0
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	a8 e4       	ldi	r26, 0x48	; 72
    1fb6:	b2 e4       	ldi	r27, 0x42	; 66
    1fb8:	89 8f       	std	Y+25, r24	; 0x19
    1fba:	9a 8f       	std	Y+26, r25	; 0x1a
    1fbc:	ab 8f       	std	Y+27, r26	; 0x1b
    1fbe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc0:	69 8d       	ldd	r22, Y+25	; 0x19
    1fc2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fc4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fc6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fc8:	20 e0       	ldi	r18, 0x00	; 0
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	4a ef       	ldi	r20, 0xFA	; 250
    1fce:	54 e4       	ldi	r21, 0x44	; 68
    1fd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	8d 8b       	std	Y+21, r24	; 0x15
    1fda:	9e 8b       	std	Y+22, r25	; 0x16
    1fdc:	af 8b       	std	Y+23, r26	; 0x17
    1fde:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fe0:	6d 89       	ldd	r22, Y+21	; 0x15
    1fe2:	7e 89       	ldd	r23, Y+22	; 0x16
    1fe4:	8f 89       	ldd	r24, Y+23	; 0x17
    1fe6:	98 8d       	ldd	r25, Y+24	; 0x18
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	40 e8       	ldi	r20, 0x80	; 128
    1fee:	5f e3       	ldi	r21, 0x3F	; 63
    1ff0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ff4:	88 23       	and	r24, r24
    1ff6:	2c f4       	brge	.+10     	; 0x2002 <TASK_createNewPass+0x80>
		__ticks = 1;
    1ff8:	81 e0       	ldi	r24, 0x01	; 1
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	9c 8b       	std	Y+20, r25	; 0x14
    1ffe:	8b 8b       	std	Y+19, r24	; 0x13
    2000:	3f c0       	rjmp	.+126    	; 0x2080 <TASK_createNewPass+0xfe>
	else if (__tmp > 65535)
    2002:	6d 89       	ldd	r22, Y+21	; 0x15
    2004:	7e 89       	ldd	r23, Y+22	; 0x16
    2006:	8f 89       	ldd	r24, Y+23	; 0x17
    2008:	98 8d       	ldd	r25, Y+24	; 0x18
    200a:	20 e0       	ldi	r18, 0x00	; 0
    200c:	3f ef       	ldi	r19, 0xFF	; 255
    200e:	4f e7       	ldi	r20, 0x7F	; 127
    2010:	57 e4       	ldi	r21, 0x47	; 71
    2012:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2016:	18 16       	cp	r1, r24
    2018:	4c f5       	brge	.+82     	; 0x206c <TASK_createNewPass+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    201a:	69 8d       	ldd	r22, Y+25	; 0x19
    201c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    201e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2020:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	40 e2       	ldi	r20, 0x20	; 32
    2028:	51 e4       	ldi	r21, 0x41	; 65
    202a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	bc 01       	movw	r22, r24
    2034:	cd 01       	movw	r24, r26
    2036:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    203a:	dc 01       	movw	r26, r24
    203c:	cb 01       	movw	r24, r22
    203e:	9c 8b       	std	Y+20, r25	; 0x14
    2040:	8b 8b       	std	Y+19, r24	; 0x13
    2042:	0f c0       	rjmp	.+30     	; 0x2062 <TASK_createNewPass+0xe0>
    2044:	88 ec       	ldi	r24, 0xC8	; 200
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	9a 8b       	std	Y+18, r25	; 0x12
    204a:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    204c:	89 89       	ldd	r24, Y+17	; 0x11
    204e:	9a 89       	ldd	r25, Y+18	; 0x12
    2050:	01 97       	sbiw	r24, 0x01	; 1
    2052:	f1 f7       	brne	.-4      	; 0x2050 <TASK_createNewPass+0xce>
    2054:	9a 8b       	std	Y+18, r25	; 0x12
    2056:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2058:	8b 89       	ldd	r24, Y+19	; 0x13
    205a:	9c 89       	ldd	r25, Y+20	; 0x14
    205c:	01 97       	sbiw	r24, 0x01	; 1
    205e:	9c 8b       	std	Y+20, r25	; 0x14
    2060:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2062:	8b 89       	ldd	r24, Y+19	; 0x13
    2064:	9c 89       	ldd	r25, Y+20	; 0x14
    2066:	00 97       	sbiw	r24, 0x00	; 0
    2068:	69 f7       	brne	.-38     	; 0x2044 <TASK_createNewPass+0xc2>
    206a:	14 c0       	rjmp	.+40     	; 0x2094 <TASK_createNewPass+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    206c:	6d 89       	ldd	r22, Y+21	; 0x15
    206e:	7e 89       	ldd	r23, Y+22	; 0x16
    2070:	8f 89       	ldd	r24, Y+23	; 0x17
    2072:	98 8d       	ldd	r25, Y+24	; 0x18
    2074:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2078:	dc 01       	movw	r26, r24
    207a:	cb 01       	movw	r24, r22
    207c:	9c 8b       	std	Y+20, r25	; 0x14
    207e:	8b 8b       	std	Y+19, r24	; 0x13
    2080:	8b 89       	ldd	r24, Y+19	; 0x13
    2082:	9c 89       	ldd	r25, Y+20	; 0x14
    2084:	98 8b       	std	Y+16, r25	; 0x10
    2086:	8f 87       	std	Y+15, r24	; 0x0f
    2088:	8f 85       	ldd	r24, Y+15	; 0x0f
    208a:	98 89       	ldd	r25, Y+16	; 0x10
    208c:	01 97       	sbiw	r24, 0x01	; 1
    208e:	f1 f7       	brne	.-4      	; 0x208c <TASK_createNewPass+0x10a>
    2090:	98 8b       	std	Y+16, r25	; 0x10
    2092:	8f 87       	std	Y+15, r24	; 0x0f
 * Description :
 * Function responsible for creating new passwords by user inputs .
 */
void TASK_createNewPass(void) {
	// get the first password
	for (int i = 0; i < PassLength; i++) {
    2094:	89 a1       	ldd	r24, Y+33	; 0x21
    2096:	9a a1       	ldd	r25, Y+34	; 0x22
    2098:	01 96       	adiw	r24, 0x01	; 1
    209a:	9a a3       	std	Y+34, r25	; 0x22
    209c:	89 a3       	std	Y+33, r24	; 0x21
    209e:	89 a1       	ldd	r24, Y+33	; 0x21
    20a0:	9a a1       	ldd	r25, Y+34	; 0x22
    20a2:	85 30       	cpi	r24, 0x05	; 5
    20a4:	91 05       	cpc	r25, r1
    20a6:	0c f4       	brge	.+2      	; 0x20aa <TASK_createNewPass+0x128>
    20a8:	7b cf       	rjmp	.-266    	; 0x1fa0 <TASK_createNewPass+0x1e>
		CONTROL_ECU_Password_1[i] = USART_recieveByte();
		_delay_ms(UsartDelay);
	}
	// get the second password
	for (int i = 0; i < PassLength; i++) {
    20aa:	18 a2       	std	Y+32, r1	; 0x20
    20ac:	1f 8e       	std	Y+31, r1	; 0x1f
    20ae:	7f c0       	rjmp	.+254    	; 0x21ae <TASK_createNewPass+0x22c>
		CONTROL_ECU_Password_2[i] = USART_recieveByte();
    20b0:	0f 8d       	ldd	r16, Y+31	; 0x1f
    20b2:	18 a1       	ldd	r17, Y+32	; 0x20
    20b4:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <USART_recieveByte>
    20b8:	f8 01       	movw	r30, r16
    20ba:	e8 57       	subi	r30, 0x78	; 120
    20bc:	fe 4f       	sbci	r31, 0xFE	; 254
    20be:	80 83       	st	Z, r24
    20c0:	80 e0       	ldi	r24, 0x00	; 0
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	a8 e4       	ldi	r26, 0x48	; 72
    20c6:	b2 e4       	ldi	r27, 0x42	; 66
    20c8:	8b 87       	std	Y+11, r24	; 0x0b
    20ca:	9c 87       	std	Y+12, r25	; 0x0c
    20cc:	ad 87       	std	Y+13, r26	; 0x0d
    20ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    20d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    20d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    20d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    20d8:	20 e0       	ldi	r18, 0x00	; 0
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	4a ef       	ldi	r20, 0xFA	; 250
    20de:	54 e4       	ldi	r21, 0x44	; 68
    20e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e4:	dc 01       	movw	r26, r24
    20e6:	cb 01       	movw	r24, r22
    20e8:	8f 83       	std	Y+7, r24	; 0x07
    20ea:	98 87       	std	Y+8, r25	; 0x08
    20ec:	a9 87       	std	Y+9, r26	; 0x09
    20ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20f0:	6f 81       	ldd	r22, Y+7	; 0x07
    20f2:	78 85       	ldd	r23, Y+8	; 0x08
    20f4:	89 85       	ldd	r24, Y+9	; 0x09
    20f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f8:	20 e0       	ldi	r18, 0x00	; 0
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	40 e8       	ldi	r20, 0x80	; 128
    20fe:	5f e3       	ldi	r21, 0x3F	; 63
    2100:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2104:	88 23       	and	r24, r24
    2106:	2c f4       	brge	.+10     	; 0x2112 <TASK_createNewPass+0x190>
		__ticks = 1;
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	9e 83       	std	Y+6, r25	; 0x06
    210e:	8d 83       	std	Y+5, r24	; 0x05
    2110:	3f c0       	rjmp	.+126    	; 0x2190 <TASK_createNewPass+0x20e>
	else if (__tmp > 65535)
    2112:	6f 81       	ldd	r22, Y+7	; 0x07
    2114:	78 85       	ldd	r23, Y+8	; 0x08
    2116:	89 85       	ldd	r24, Y+9	; 0x09
    2118:	9a 85       	ldd	r25, Y+10	; 0x0a
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	3f ef       	ldi	r19, 0xFF	; 255
    211e:	4f e7       	ldi	r20, 0x7F	; 127
    2120:	57 e4       	ldi	r21, 0x47	; 71
    2122:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2126:	18 16       	cp	r1, r24
    2128:	4c f5       	brge	.+82     	; 0x217c <TASK_createNewPass+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    212a:	6b 85       	ldd	r22, Y+11	; 0x0b
    212c:	7c 85       	ldd	r23, Y+12	; 0x0c
    212e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2130:	9e 85       	ldd	r25, Y+14	; 0x0e
    2132:	20 e0       	ldi	r18, 0x00	; 0
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	40 e2       	ldi	r20, 0x20	; 32
    2138:	51 e4       	ldi	r21, 0x41	; 65
    213a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213e:	dc 01       	movw	r26, r24
    2140:	cb 01       	movw	r24, r22
    2142:	bc 01       	movw	r22, r24
    2144:	cd 01       	movw	r24, r26
    2146:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	9e 83       	std	Y+6, r25	; 0x06
    2150:	8d 83       	std	Y+5, r24	; 0x05
    2152:	0f c0       	rjmp	.+30     	; 0x2172 <TASK_createNewPass+0x1f0>
    2154:	88 ec       	ldi	r24, 0xC8	; 200
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	9c 83       	std	Y+4, r25	; 0x04
    215a:	8b 83       	std	Y+3, r24	; 0x03
    215c:	8b 81       	ldd	r24, Y+3	; 0x03
    215e:	9c 81       	ldd	r25, Y+4	; 0x04
    2160:	01 97       	sbiw	r24, 0x01	; 1
    2162:	f1 f7       	brne	.-4      	; 0x2160 <TASK_createNewPass+0x1de>
    2164:	9c 83       	std	Y+4, r25	; 0x04
    2166:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2168:	8d 81       	ldd	r24, Y+5	; 0x05
    216a:	9e 81       	ldd	r25, Y+6	; 0x06
    216c:	01 97       	sbiw	r24, 0x01	; 1
    216e:	9e 83       	std	Y+6, r25	; 0x06
    2170:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2172:	8d 81       	ldd	r24, Y+5	; 0x05
    2174:	9e 81       	ldd	r25, Y+6	; 0x06
    2176:	00 97       	sbiw	r24, 0x00	; 0
    2178:	69 f7       	brne	.-38     	; 0x2154 <TASK_createNewPass+0x1d2>
    217a:	14 c0       	rjmp	.+40     	; 0x21a4 <TASK_createNewPass+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    217c:	6f 81       	ldd	r22, Y+7	; 0x07
    217e:	78 85       	ldd	r23, Y+8	; 0x08
    2180:	89 85       	ldd	r24, Y+9	; 0x09
    2182:	9a 85       	ldd	r25, Y+10	; 0x0a
    2184:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2188:	dc 01       	movw	r26, r24
    218a:	cb 01       	movw	r24, r22
    218c:	9e 83       	std	Y+6, r25	; 0x06
    218e:	8d 83       	std	Y+5, r24	; 0x05
    2190:	8d 81       	ldd	r24, Y+5	; 0x05
    2192:	9e 81       	ldd	r25, Y+6	; 0x06
    2194:	9a 83       	std	Y+2, r25	; 0x02
    2196:	89 83       	std	Y+1, r24	; 0x01
    2198:	89 81       	ldd	r24, Y+1	; 0x01
    219a:	9a 81       	ldd	r25, Y+2	; 0x02
    219c:	01 97       	sbiw	r24, 0x01	; 1
    219e:	f1 f7       	brne	.-4      	; 0x219c <TASK_createNewPass+0x21a>
    21a0:	9a 83       	std	Y+2, r25	; 0x02
    21a2:	89 83       	std	Y+1, r24	; 0x01
	for (int i = 0; i < PassLength; i++) {
		CONTROL_ECU_Password_1[i] = USART_recieveByte();
		_delay_ms(UsartDelay);
	}
	// get the second password
	for (int i = 0; i < PassLength; i++) {
    21a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21a6:	98 a1       	ldd	r25, Y+32	; 0x20
    21a8:	01 96       	adiw	r24, 0x01	; 1
    21aa:	98 a3       	std	Y+32, r25	; 0x20
    21ac:	8f 8f       	std	Y+31, r24	; 0x1f
    21ae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21b0:	98 a1       	ldd	r25, Y+32	; 0x20
    21b2:	85 30       	cpi	r24, 0x05	; 5
    21b4:	91 05       	cpc	r25, r1
    21b6:	0c f4       	brge	.+2      	; 0x21ba <TASK_createNewPass+0x238>
    21b8:	7b cf       	rjmp	.-266    	; 0x20b0 <TASK_createNewPass+0x12e>
		CONTROL_ECU_Password_2[i] = USART_recieveByte();
		_delay_ms(UsartDelay);
	}
	flag = 1;
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	80 93 81 01 	sts	0x0181, r24
// check the equality of the second and the first passwords
	for (int i = 0; i < PassLength; i++) {
    21c0:	1e 8e       	std	Y+30, r1	; 0x1e
    21c2:	1d 8e       	std	Y+29, r1	; 0x1d
    21c4:	16 c0       	rjmp	.+44     	; 0x21f2 <TASK_createNewPass+0x270>
		if (CONTROL_ECU_Password_1[i] != CONTROL_ECU_Password_2[i]) {
    21c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21ca:	fc 01       	movw	r30, r24
    21cc:	ee 57       	subi	r30, 0x7E	; 126
    21ce:	fe 4f       	sbci	r31, 0xFE	; 254
    21d0:	20 81       	ld	r18, Z
    21d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21d6:	fc 01       	movw	r30, r24
    21d8:	e8 57       	subi	r30, 0x78	; 120
    21da:	fe 4f       	sbci	r31, 0xFE	; 254
    21dc:	80 81       	ld	r24, Z
    21de:	28 17       	cp	r18, r24
    21e0:	19 f0       	breq	.+6      	; 0x21e8 <TASK_createNewPass+0x266>
			flag = 0;
    21e2:	10 92 81 01 	sts	0x0181, r1
    21e6:	0a c0       	rjmp	.+20     	; 0x21fc <TASK_createNewPass+0x27a>
		CONTROL_ECU_Password_2[i] = USART_recieveByte();
		_delay_ms(UsartDelay);
	}
	flag = 1;
// check the equality of the second and the first passwords
	for (int i = 0; i < PassLength; i++) {
    21e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21ea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21ec:	01 96       	adiw	r24, 0x01	; 1
    21ee:	9e 8f       	std	Y+30, r25	; 0x1e
    21f0:	8d 8f       	std	Y+29, r24	; 0x1d
    21f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21f4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21f6:	85 30       	cpi	r24, 0x05	; 5
    21f8:	91 05       	cpc	r25, r1
    21fa:	2c f3       	brlt	.-54     	; 0x21c6 <TASK_createNewPass+0x244>
		if (CONTROL_ECU_Password_1[i] != CONTROL_ECU_Password_2[i]) {
			flag = 0;
			break;
		}
	}
	USART_sendByte(flag);
    21fc:	80 91 81 01 	lds	r24, 0x0181
    2200:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <USART_sendByte>
	if (flag == 1) {
    2204:	80 91 81 01 	lds	r24, 0x0181
    2208:	81 30       	cpi	r24, 0x01	; 1
    220a:	19 f4       	brne	.+6      	; 0x2212 <TASK_createNewPass+0x290>
		TASK_saveNewPassEEPROM();
    220c:	0e 94 16 11 	call	0x222c	; 0x222c <TASK_saveNewPassEEPROM>
    2210:	02 c0       	rjmp	.+4      	; 0x2216 <TASK_createNewPass+0x294>
	} else {
		TASK_createNewPass();
    2212:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <TASK_createNewPass>
	}
}
    2216:	a2 96       	adiw	r28, 0x22	; 34
    2218:	0f b6       	in	r0, 0x3f	; 63
    221a:	f8 94       	cli
    221c:	de bf       	out	0x3e, r29	; 62
    221e:	0f be       	out	0x3f, r0	; 63
    2220:	cd bf       	out	0x3d, r28	; 61
    2222:	cf 91       	pop	r28
    2224:	df 91       	pop	r29
    2226:	1f 91       	pop	r17
    2228:	0f 91       	pop	r16
    222a:	08 95       	ret

0000222c <TASK_saveNewPassEEPROM>:
/*
 * Description :
 * Function responsible for Saving the Password in the eeprom starting from location 0x0311
 */
void TASK_saveNewPassEEPROM(void) {
    222c:	df 93       	push	r29
    222e:	cf 93       	push	r28
    2230:	cd b7       	in	r28, 0x3d	; 61
    2232:	de b7       	in	r29, 0x3e	; 62
    2234:	61 97       	sbiw	r28, 0x11	; 17
    2236:	0f b6       	in	r0, 0x3f	; 63
    2238:	f8 94       	cli
    223a:	de bf       	out	0x3e, r29	; 62
    223c:	0f be       	out	0x3f, r0	; 63
    223e:	cd bf       	out	0x3d, r28	; 61
	eeprom_index = 0x0311;
    2240:	81 e1       	ldi	r24, 0x11	; 17
    2242:	93 e0       	ldi	r25, 0x03	; 3
    2244:	90 93 80 01 	sts	0x0180, r25
    2248:	80 93 7f 01 	sts	0x017F, r24
	for (int i = 0; i < PassLength; i++) {
    224c:	19 8a       	std	Y+17, r1	; 0x11
    224e:	18 8a       	std	Y+16, r1	; 0x10
    2250:	8e c0       	rjmp	.+284    	; 0x236e <TASK_saveNewPassEEPROM+0x142>
		uint8 key = CONTROL_ECU_Password_2[i];
    2252:	88 89       	ldd	r24, Y+16	; 0x10
    2254:	99 89       	ldd	r25, Y+17	; 0x11
    2256:	fc 01       	movw	r30, r24
    2258:	e8 57       	subi	r30, 0x78	; 120
    225a:	fe 4f       	sbci	r31, 0xFE	; 254
    225c:	80 81       	ld	r24, Z
    225e:	8f 87       	std	Y+15, r24	; 0x0f
		EEPROM_writeByte(eeprom_index, key);
    2260:	80 91 7f 01 	lds	r24, 0x017F
    2264:	90 91 80 01 	lds	r25, 0x0180
    2268:	6f 85       	ldd	r22, Y+15	; 0x0f
    226a:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <EEPROM_writeByte>
    226e:	80 e0       	ldi	r24, 0x00	; 0
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	a0 e2       	ldi	r26, 0x20	; 32
    2274:	b1 e4       	ldi	r27, 0x41	; 65
    2276:	8b 87       	std	Y+11, r24	; 0x0b
    2278:	9c 87       	std	Y+12, r25	; 0x0c
    227a:	ad 87       	std	Y+13, r26	; 0x0d
    227c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    227e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2280:	7c 85       	ldd	r23, Y+12	; 0x0c
    2282:	8d 85       	ldd	r24, Y+13	; 0x0d
    2284:	9e 85       	ldd	r25, Y+14	; 0x0e
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	4a ef       	ldi	r20, 0xFA	; 250
    228c:	54 e4       	ldi	r21, 0x44	; 68
    228e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	8f 83       	std	Y+7, r24	; 0x07
    2298:	98 87       	std	Y+8, r25	; 0x08
    229a:	a9 87       	std	Y+9, r26	; 0x09
    229c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    229e:	6f 81       	ldd	r22, Y+7	; 0x07
    22a0:	78 85       	ldd	r23, Y+8	; 0x08
    22a2:	89 85       	ldd	r24, Y+9	; 0x09
    22a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	40 e8       	ldi	r20, 0x80	; 128
    22ac:	5f e3       	ldi	r21, 0x3F	; 63
    22ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22b2:	88 23       	and	r24, r24
    22b4:	2c f4       	brge	.+10     	; 0x22c0 <TASK_saveNewPassEEPROM+0x94>
		__ticks = 1;
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	9e 83       	std	Y+6, r25	; 0x06
    22bc:	8d 83       	std	Y+5, r24	; 0x05
    22be:	3f c0       	rjmp	.+126    	; 0x233e <TASK_saveNewPassEEPROM+0x112>
	else if (__tmp > 65535)
    22c0:	6f 81       	ldd	r22, Y+7	; 0x07
    22c2:	78 85       	ldd	r23, Y+8	; 0x08
    22c4:	89 85       	ldd	r24, Y+9	; 0x09
    22c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	3f ef       	ldi	r19, 0xFF	; 255
    22cc:	4f e7       	ldi	r20, 0x7F	; 127
    22ce:	57 e4       	ldi	r21, 0x47	; 71
    22d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22d4:	18 16       	cp	r1, r24
    22d6:	4c f5       	brge	.+82     	; 0x232a <TASK_saveNewPassEEPROM+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    22da:	7c 85       	ldd	r23, Y+12	; 0x0c
    22dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    22de:	9e 85       	ldd	r25, Y+14	; 0x0e
    22e0:	20 e0       	ldi	r18, 0x00	; 0
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	40 e2       	ldi	r20, 0x20	; 32
    22e6:	51 e4       	ldi	r21, 0x41	; 65
    22e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ec:	dc 01       	movw	r26, r24
    22ee:	cb 01       	movw	r24, r22
    22f0:	bc 01       	movw	r22, r24
    22f2:	cd 01       	movw	r24, r26
    22f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f8:	dc 01       	movw	r26, r24
    22fa:	cb 01       	movw	r24, r22
    22fc:	9e 83       	std	Y+6, r25	; 0x06
    22fe:	8d 83       	std	Y+5, r24	; 0x05
    2300:	0f c0       	rjmp	.+30     	; 0x2320 <TASK_saveNewPassEEPROM+0xf4>
    2302:	88 ec       	ldi	r24, 0xC8	; 200
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	9c 83       	std	Y+4, r25	; 0x04
    2308:	8b 83       	std	Y+3, r24	; 0x03
    230a:	8b 81       	ldd	r24, Y+3	; 0x03
    230c:	9c 81       	ldd	r25, Y+4	; 0x04
    230e:	01 97       	sbiw	r24, 0x01	; 1
    2310:	f1 f7       	brne	.-4      	; 0x230e <TASK_saveNewPassEEPROM+0xe2>
    2312:	9c 83       	std	Y+4, r25	; 0x04
    2314:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2316:	8d 81       	ldd	r24, Y+5	; 0x05
    2318:	9e 81       	ldd	r25, Y+6	; 0x06
    231a:	01 97       	sbiw	r24, 0x01	; 1
    231c:	9e 83       	std	Y+6, r25	; 0x06
    231e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2320:	8d 81       	ldd	r24, Y+5	; 0x05
    2322:	9e 81       	ldd	r25, Y+6	; 0x06
    2324:	00 97       	sbiw	r24, 0x00	; 0
    2326:	69 f7       	brne	.-38     	; 0x2302 <TASK_saveNewPassEEPROM+0xd6>
    2328:	14 c0       	rjmp	.+40     	; 0x2352 <TASK_saveNewPassEEPROM+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    232a:	6f 81       	ldd	r22, Y+7	; 0x07
    232c:	78 85       	ldd	r23, Y+8	; 0x08
    232e:	89 85       	ldd	r24, Y+9	; 0x09
    2330:	9a 85       	ldd	r25, Y+10	; 0x0a
    2332:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2336:	dc 01       	movw	r26, r24
    2338:	cb 01       	movw	r24, r22
    233a:	9e 83       	std	Y+6, r25	; 0x06
    233c:	8d 83       	std	Y+5, r24	; 0x05
    233e:	8d 81       	ldd	r24, Y+5	; 0x05
    2340:	9e 81       	ldd	r25, Y+6	; 0x06
    2342:	9a 83       	std	Y+2, r25	; 0x02
    2344:	89 83       	std	Y+1, r24	; 0x01
    2346:	89 81       	ldd	r24, Y+1	; 0x01
    2348:	9a 81       	ldd	r25, Y+2	; 0x02
    234a:	01 97       	sbiw	r24, 0x01	; 1
    234c:	f1 f7       	brne	.-4      	; 0x234a <TASK_saveNewPassEEPROM+0x11e>
    234e:	9a 83       	std	Y+2, r25	; 0x02
    2350:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(EEPROMDelay);
		eeprom_index++;
    2352:	80 91 7f 01 	lds	r24, 0x017F
    2356:	90 91 80 01 	lds	r25, 0x0180
    235a:	01 96       	adiw	r24, 0x01	; 1
    235c:	90 93 80 01 	sts	0x0180, r25
    2360:	80 93 7f 01 	sts	0x017F, r24
 * Description :
 * Function responsible for Saving the Password in the eeprom starting from location 0x0311
 */
void TASK_saveNewPassEEPROM(void) {
	eeprom_index = 0x0311;
	for (int i = 0; i < PassLength; i++) {
    2364:	88 89       	ldd	r24, Y+16	; 0x10
    2366:	99 89       	ldd	r25, Y+17	; 0x11
    2368:	01 96       	adiw	r24, 0x01	; 1
    236a:	99 8b       	std	Y+17, r25	; 0x11
    236c:	88 8b       	std	Y+16, r24	; 0x10
    236e:	88 89       	ldd	r24, Y+16	; 0x10
    2370:	99 89       	ldd	r25, Y+17	; 0x11
    2372:	85 30       	cpi	r24, 0x05	; 5
    2374:	91 05       	cpc	r25, r1
    2376:	0c f4       	brge	.+2      	; 0x237a <TASK_saveNewPassEEPROM+0x14e>
    2378:	6c cf       	rjmp	.-296    	; 0x2252 <TASK_saveNewPassEEPROM+0x26>
		uint8 key = CONTROL_ECU_Password_2[i];
		EEPROM_writeByte(eeprom_index, key);
		_delay_ms(EEPROMDelay);
		eeprom_index++;
	}
	TASK_TakeOptions();
    237a:	0e 94 c8 11 	call	0x2390	; 0x2390 <TASK_TakeOptions>
}
    237e:	61 96       	adiw	r28, 0x11	; 17
    2380:	0f b6       	in	r0, 0x3f	; 63
    2382:	f8 94       	cli
    2384:	de bf       	out	0x3e, r29	; 62
    2386:	0f be       	out	0x3f, r0	; 63
    2388:	cd bf       	out	0x3d, r28	; 61
    238a:	cf 91       	pop	r28
    238c:	df 91       	pop	r29
    238e:	08 95       	ret

00002390 <TASK_TakeOptions>:
 * Description :
 * Function responsible for executing the option of the user.
 * 1-open the door.
 * 2-change the password.
 */
void TASK_TakeOptions(void) {
    2390:	df 93       	push	r29
    2392:	cf 93       	push	r28
    2394:	cd b7       	in	r28, 0x3d	; 61
    2396:	de b7       	in	r29, 0x3e	; 62
	signInput = USART_recieveByte();
    2398:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <USART_recieveByte>
    239c:	80 93 87 01 	sts	0x0187, r24
	if (signInput == '+') {
    23a0:	80 91 87 01 	lds	r24, 0x0187
    23a4:	8b 32       	cpi	r24, 0x2B	; 43
    23a6:	19 f4       	brne	.+6      	; 0x23ae <TASK_TakeOptions+0x1e>
		TASK_openDoor();
    23a8:	0e 94 28 13 	call	0x2650	; 0x2650 <TASK_openDoor>
    23ac:	02 c0       	rjmp	.+4      	; 0x23b2 <TASK_TakeOptions+0x22>
	} else {
		TASK_changePass();
    23ae:	0e 94 a2 13 	call	0x2744	; 0x2744 <TASK_changePass>
	}
}
    23b2:	cf 91       	pop	r28
    23b4:	df 91       	pop	r29
    23b6:	08 95       	ret

000023b8 <TASK_checkPass>:
/*
 * Description :
 * Helper Function responsible for checking the sent password to the given in the eeprom.
 */
void TASK_checkPass() {
    23b8:	0f 93       	push	r16
    23ba:	1f 93       	push	r17
    23bc:	df 93       	push	r29
    23be:	cf 93       	push	r28
    23c0:	cd b7       	in	r28, 0x3d	; 61
    23c2:	de b7       	in	r29, 0x3e	; 62
    23c4:	a6 97       	sbiw	r28, 0x26	; 38
    23c6:	0f b6       	in	r0, 0x3f	; 63
    23c8:	f8 94       	cli
    23ca:	de bf       	out	0x3e, r29	; 62
    23cc:	0f be       	out	0x3f, r0	; 63
    23ce:	cd bf       	out	0x3d, r28	; 61
	uint8 CONTROL_ECU_Password[PassLength];
	uint8 val;
	flag = 1;
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	80 93 81 01 	sts	0x0181, r24
	eeprom_index = 0x0311;
    23d6:	81 e1       	ldi	r24, 0x11	; 17
    23d8:	93 e0       	ldi	r25, 0x03	; 3
    23da:	90 93 80 01 	sts	0x0180, r25
    23de:	80 93 7f 01 	sts	0x017F, r24
	for (int i = 0; i < PassLength; i++) {
    23e2:	18 a2       	std	Y+32, r1	; 0x20
    23e4:	1f 8e       	std	Y+31, r1	; 0x1f
    23e6:	82 c0       	rjmp	.+260    	; 0x24ec <TASK_checkPass+0x134>
		CONTROL_ECU_Password[i] = USART_recieveByte();
    23e8:	0f 8d       	ldd	r16, Y+31	; 0x1f
    23ea:	18 a1       	ldd	r17, Y+32	; 0x20
    23ec:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <USART_recieveByte>
    23f0:	28 2f       	mov	r18, r24
    23f2:	ce 01       	movw	r24, r28
    23f4:	81 96       	adiw	r24, 0x21	; 33
    23f6:	fc 01       	movw	r30, r24
    23f8:	e0 0f       	add	r30, r16
    23fa:	f1 1f       	adc	r31, r17
    23fc:	20 83       	st	Z, r18
    23fe:	80 e0       	ldi	r24, 0x00	; 0
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	a8 e4       	ldi	r26, 0x48	; 72
    2404:	b2 e4       	ldi	r27, 0x42	; 66
    2406:	89 8f       	std	Y+25, r24	; 0x19
    2408:	9a 8f       	std	Y+26, r25	; 0x1a
    240a:	ab 8f       	std	Y+27, r26	; 0x1b
    240c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    240e:	69 8d       	ldd	r22, Y+25	; 0x19
    2410:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2412:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2414:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	4a ef       	ldi	r20, 0xFA	; 250
    241c:	54 e4       	ldi	r21, 0x44	; 68
    241e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2422:	dc 01       	movw	r26, r24
    2424:	cb 01       	movw	r24, r22
    2426:	8d 8b       	std	Y+21, r24	; 0x15
    2428:	9e 8b       	std	Y+22, r25	; 0x16
    242a:	af 8b       	std	Y+23, r26	; 0x17
    242c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    242e:	6d 89       	ldd	r22, Y+21	; 0x15
    2430:	7e 89       	ldd	r23, Y+22	; 0x16
    2432:	8f 89       	ldd	r24, Y+23	; 0x17
    2434:	98 8d       	ldd	r25, Y+24	; 0x18
    2436:	20 e0       	ldi	r18, 0x00	; 0
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	40 e8       	ldi	r20, 0x80	; 128
    243c:	5f e3       	ldi	r21, 0x3F	; 63
    243e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2442:	88 23       	and	r24, r24
    2444:	2c f4       	brge	.+10     	; 0x2450 <TASK_checkPass+0x98>
		__ticks = 1;
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	9c 8b       	std	Y+20, r25	; 0x14
    244c:	8b 8b       	std	Y+19, r24	; 0x13
    244e:	3f c0       	rjmp	.+126    	; 0x24ce <TASK_checkPass+0x116>
	else if (__tmp > 65535)
    2450:	6d 89       	ldd	r22, Y+21	; 0x15
    2452:	7e 89       	ldd	r23, Y+22	; 0x16
    2454:	8f 89       	ldd	r24, Y+23	; 0x17
    2456:	98 8d       	ldd	r25, Y+24	; 0x18
    2458:	20 e0       	ldi	r18, 0x00	; 0
    245a:	3f ef       	ldi	r19, 0xFF	; 255
    245c:	4f e7       	ldi	r20, 0x7F	; 127
    245e:	57 e4       	ldi	r21, 0x47	; 71
    2460:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2464:	18 16       	cp	r1, r24
    2466:	4c f5       	brge	.+82     	; 0x24ba <TASK_checkPass+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2468:	69 8d       	ldd	r22, Y+25	; 0x19
    246a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    246c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    246e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	40 e2       	ldi	r20, 0x20	; 32
    2476:	51 e4       	ldi	r21, 0x41	; 65
    2478:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    247c:	dc 01       	movw	r26, r24
    247e:	cb 01       	movw	r24, r22
    2480:	bc 01       	movw	r22, r24
    2482:	cd 01       	movw	r24, r26
    2484:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2488:	dc 01       	movw	r26, r24
    248a:	cb 01       	movw	r24, r22
    248c:	9c 8b       	std	Y+20, r25	; 0x14
    248e:	8b 8b       	std	Y+19, r24	; 0x13
    2490:	0f c0       	rjmp	.+30     	; 0x24b0 <TASK_checkPass+0xf8>
    2492:	88 ec       	ldi	r24, 0xC8	; 200
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	9a 8b       	std	Y+18, r25	; 0x12
    2498:	89 8b       	std	Y+17, r24	; 0x11
    249a:	89 89       	ldd	r24, Y+17	; 0x11
    249c:	9a 89       	ldd	r25, Y+18	; 0x12
    249e:	01 97       	sbiw	r24, 0x01	; 1
    24a0:	f1 f7       	brne	.-4      	; 0x249e <TASK_checkPass+0xe6>
    24a2:	9a 8b       	std	Y+18, r25	; 0x12
    24a4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24a6:	8b 89       	ldd	r24, Y+19	; 0x13
    24a8:	9c 89       	ldd	r25, Y+20	; 0x14
    24aa:	01 97       	sbiw	r24, 0x01	; 1
    24ac:	9c 8b       	std	Y+20, r25	; 0x14
    24ae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b0:	8b 89       	ldd	r24, Y+19	; 0x13
    24b2:	9c 89       	ldd	r25, Y+20	; 0x14
    24b4:	00 97       	sbiw	r24, 0x00	; 0
    24b6:	69 f7       	brne	.-38     	; 0x2492 <TASK_checkPass+0xda>
    24b8:	14 c0       	rjmp	.+40     	; 0x24e2 <TASK_checkPass+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ba:	6d 89       	ldd	r22, Y+21	; 0x15
    24bc:	7e 89       	ldd	r23, Y+22	; 0x16
    24be:	8f 89       	ldd	r24, Y+23	; 0x17
    24c0:	98 8d       	ldd	r25, Y+24	; 0x18
    24c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	9c 8b       	std	Y+20, r25	; 0x14
    24cc:	8b 8b       	std	Y+19, r24	; 0x13
    24ce:	8b 89       	ldd	r24, Y+19	; 0x13
    24d0:	9c 89       	ldd	r25, Y+20	; 0x14
    24d2:	98 8b       	std	Y+16, r25	; 0x10
    24d4:	8f 87       	std	Y+15, r24	; 0x0f
    24d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    24d8:	98 89       	ldd	r25, Y+16	; 0x10
    24da:	01 97       	sbiw	r24, 0x01	; 1
    24dc:	f1 f7       	brne	.-4      	; 0x24da <TASK_checkPass+0x122>
    24de:	98 8b       	std	Y+16, r25	; 0x10
    24e0:	8f 87       	std	Y+15, r24	; 0x0f
void TASK_checkPass() {
	uint8 CONTROL_ECU_Password[PassLength];
	uint8 val;
	flag = 1;
	eeprom_index = 0x0311;
	for (int i = 0; i < PassLength; i++) {
    24e2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24e4:	98 a1       	ldd	r25, Y+32	; 0x20
    24e6:	01 96       	adiw	r24, 0x01	; 1
    24e8:	98 a3       	std	Y+32, r25	; 0x20
    24ea:	8f 8f       	std	Y+31, r24	; 0x1f
    24ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24ee:	98 a1       	ldd	r25, Y+32	; 0x20
    24f0:	85 30       	cpi	r24, 0x05	; 5
    24f2:	91 05       	cpc	r25, r1
    24f4:	0c f4       	brge	.+2      	; 0x24f8 <TASK_checkPass+0x140>
    24f6:	78 cf       	rjmp	.-272    	; 0x23e8 <TASK_checkPass+0x30>
		CONTROL_ECU_Password[i] = USART_recieveByte();
		_delay_ms(50);
	}
	for (int i = 0; i < PassLength; i++) {
    24f8:	1e 8e       	std	Y+30, r1	; 0x1e
    24fa:	1d 8e       	std	Y+29, r1	; 0x1d
    24fc:	98 c0       	rjmp	.+304    	; 0x262e <TASK_checkPass+0x276>
		EEPROM_readByte(eeprom_index, &val);
    24fe:	80 91 7f 01 	lds	r24, 0x017F
    2502:	90 91 80 01 	lds	r25, 0x0180
    2506:	9e 01       	movw	r18, r28
    2508:	2a 5d       	subi	r18, 0xDA	; 218
    250a:	3f 4f       	sbci	r19, 0xFF	; 255
    250c:	b9 01       	movw	r22, r18
    250e:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <EEPROM_readByte>
    2512:	80 e0       	ldi	r24, 0x00	; 0
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	a0 e2       	ldi	r26, 0x20	; 32
    2518:	b1 e4       	ldi	r27, 0x41	; 65
    251a:	8b 87       	std	Y+11, r24	; 0x0b
    251c:	9c 87       	std	Y+12, r25	; 0x0c
    251e:	ad 87       	std	Y+13, r26	; 0x0d
    2520:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2522:	6b 85       	ldd	r22, Y+11	; 0x0b
    2524:	7c 85       	ldd	r23, Y+12	; 0x0c
    2526:	8d 85       	ldd	r24, Y+13	; 0x0d
    2528:	9e 85       	ldd	r25, Y+14	; 0x0e
    252a:	20 e0       	ldi	r18, 0x00	; 0
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	4a ef       	ldi	r20, 0xFA	; 250
    2530:	54 e4       	ldi	r21, 0x44	; 68
    2532:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2536:	dc 01       	movw	r26, r24
    2538:	cb 01       	movw	r24, r22
    253a:	8f 83       	std	Y+7, r24	; 0x07
    253c:	98 87       	std	Y+8, r25	; 0x08
    253e:	a9 87       	std	Y+9, r26	; 0x09
    2540:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2542:	6f 81       	ldd	r22, Y+7	; 0x07
    2544:	78 85       	ldd	r23, Y+8	; 0x08
    2546:	89 85       	ldd	r24, Y+9	; 0x09
    2548:	9a 85       	ldd	r25, Y+10	; 0x0a
    254a:	20 e0       	ldi	r18, 0x00	; 0
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	40 e8       	ldi	r20, 0x80	; 128
    2550:	5f e3       	ldi	r21, 0x3F	; 63
    2552:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2556:	88 23       	and	r24, r24
    2558:	2c f4       	brge	.+10     	; 0x2564 <TASK_checkPass+0x1ac>
		__ticks = 1;
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	9e 83       	std	Y+6, r25	; 0x06
    2560:	8d 83       	std	Y+5, r24	; 0x05
    2562:	3f c0       	rjmp	.+126    	; 0x25e2 <TASK_checkPass+0x22a>
	else if (__tmp > 65535)
    2564:	6f 81       	ldd	r22, Y+7	; 0x07
    2566:	78 85       	ldd	r23, Y+8	; 0x08
    2568:	89 85       	ldd	r24, Y+9	; 0x09
    256a:	9a 85       	ldd	r25, Y+10	; 0x0a
    256c:	20 e0       	ldi	r18, 0x00	; 0
    256e:	3f ef       	ldi	r19, 0xFF	; 255
    2570:	4f e7       	ldi	r20, 0x7F	; 127
    2572:	57 e4       	ldi	r21, 0x47	; 71
    2574:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2578:	18 16       	cp	r1, r24
    257a:	4c f5       	brge	.+82     	; 0x25ce <TASK_checkPass+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    257c:	6b 85       	ldd	r22, Y+11	; 0x0b
    257e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2580:	8d 85       	ldd	r24, Y+13	; 0x0d
    2582:	9e 85       	ldd	r25, Y+14	; 0x0e
    2584:	20 e0       	ldi	r18, 0x00	; 0
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	40 e2       	ldi	r20, 0x20	; 32
    258a:	51 e4       	ldi	r21, 0x41	; 65
    258c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2590:	dc 01       	movw	r26, r24
    2592:	cb 01       	movw	r24, r22
    2594:	bc 01       	movw	r22, r24
    2596:	cd 01       	movw	r24, r26
    2598:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    259c:	dc 01       	movw	r26, r24
    259e:	cb 01       	movw	r24, r22
    25a0:	9e 83       	std	Y+6, r25	; 0x06
    25a2:	8d 83       	std	Y+5, r24	; 0x05
    25a4:	0f c0       	rjmp	.+30     	; 0x25c4 <TASK_checkPass+0x20c>
    25a6:	88 ec       	ldi	r24, 0xC8	; 200
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	9c 83       	std	Y+4, r25	; 0x04
    25ac:	8b 83       	std	Y+3, r24	; 0x03
    25ae:	8b 81       	ldd	r24, Y+3	; 0x03
    25b0:	9c 81       	ldd	r25, Y+4	; 0x04
    25b2:	01 97       	sbiw	r24, 0x01	; 1
    25b4:	f1 f7       	brne	.-4      	; 0x25b2 <TASK_checkPass+0x1fa>
    25b6:	9c 83       	std	Y+4, r25	; 0x04
    25b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ba:	8d 81       	ldd	r24, Y+5	; 0x05
    25bc:	9e 81       	ldd	r25, Y+6	; 0x06
    25be:	01 97       	sbiw	r24, 0x01	; 1
    25c0:	9e 83       	std	Y+6, r25	; 0x06
    25c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25c4:	8d 81       	ldd	r24, Y+5	; 0x05
    25c6:	9e 81       	ldd	r25, Y+6	; 0x06
    25c8:	00 97       	sbiw	r24, 0x00	; 0
    25ca:	69 f7       	brne	.-38     	; 0x25a6 <TASK_checkPass+0x1ee>
    25cc:	14 c0       	rjmp	.+40     	; 0x25f6 <TASK_checkPass+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ce:	6f 81       	ldd	r22, Y+7	; 0x07
    25d0:	78 85       	ldd	r23, Y+8	; 0x08
    25d2:	89 85       	ldd	r24, Y+9	; 0x09
    25d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25da:	dc 01       	movw	r26, r24
    25dc:	cb 01       	movw	r24, r22
    25de:	9e 83       	std	Y+6, r25	; 0x06
    25e0:	8d 83       	std	Y+5, r24	; 0x05
    25e2:	8d 81       	ldd	r24, Y+5	; 0x05
    25e4:	9e 81       	ldd	r25, Y+6	; 0x06
    25e6:	9a 83       	std	Y+2, r25	; 0x02
    25e8:	89 83       	std	Y+1, r24	; 0x01
    25ea:	89 81       	ldd	r24, Y+1	; 0x01
    25ec:	9a 81       	ldd	r25, Y+2	; 0x02
    25ee:	01 97       	sbiw	r24, 0x01	; 1
    25f0:	f1 f7       	brne	.-4      	; 0x25ee <TASK_checkPass+0x236>
    25f2:	9a 83       	std	Y+2, r25	; 0x02
    25f4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(EEPROMDelay);
		eeprom_index++;
    25f6:	80 91 7f 01 	lds	r24, 0x017F
    25fa:	90 91 80 01 	lds	r25, 0x0180
    25fe:	01 96       	adiw	r24, 0x01	; 1
    2600:	90 93 80 01 	sts	0x0180, r25
    2604:	80 93 7f 01 	sts	0x017F, r24
		if (val != CONTROL_ECU_Password[i]) {
    2608:	2d 8d       	ldd	r18, Y+29	; 0x1d
    260a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    260c:	ce 01       	movw	r24, r28
    260e:	81 96       	adiw	r24, 0x21	; 33
    2610:	fc 01       	movw	r30, r24
    2612:	e2 0f       	add	r30, r18
    2614:	f3 1f       	adc	r31, r19
    2616:	90 81       	ld	r25, Z
    2618:	8e a1       	ldd	r24, Y+38	; 0x26
    261a:	98 17       	cp	r25, r24
    261c:	19 f0       	breq	.+6      	; 0x2624 <TASK_checkPass+0x26c>
			flag = 0;
    261e:	10 92 81 01 	sts	0x0181, r1
    2622:	0b c0       	rjmp	.+22     	; 0x263a <TASK_checkPass+0x282>
	eeprom_index = 0x0311;
	for (int i = 0; i < PassLength; i++) {
		CONTROL_ECU_Password[i] = USART_recieveByte();
		_delay_ms(50);
	}
	for (int i = 0; i < PassLength; i++) {
    2624:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2626:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2628:	01 96       	adiw	r24, 0x01	; 1
    262a:	9e 8f       	std	Y+30, r25	; 0x1e
    262c:	8d 8f       	std	Y+29, r24	; 0x1d
    262e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2630:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2632:	85 30       	cpi	r24, 0x05	; 5
    2634:	91 05       	cpc	r25, r1
    2636:	0c f4       	brge	.+2      	; 0x263a <TASK_checkPass+0x282>
    2638:	62 cf       	rjmp	.-316    	; 0x24fe <TASK_checkPass+0x146>
		if (val != CONTROL_ECU_Password[i]) {
			flag = 0;
			break;
		}
	}
}
    263a:	a6 96       	adiw	r28, 0x26	; 38
    263c:	0f b6       	in	r0, 0x3f	; 63
    263e:	f8 94       	cli
    2640:	de bf       	out	0x3e, r29	; 62
    2642:	0f be       	out	0x3f, r0	; 63
    2644:	cd bf       	out	0x3d, r28	; 61
    2646:	cf 91       	pop	r28
    2648:	df 91       	pop	r29
    264a:	1f 91       	pop	r17
    264c:	0f 91       	pop	r16
    264e:	08 95       	ret

00002650 <TASK_openDoor>:
/*
 * Description :
 * Function responsible for door management .
 */
void TASK_openDoor(void) {
    2650:	df 93       	push	r29
    2652:	cf 93       	push	r28
    2654:	cd b7       	in	r28, 0x3d	; 61
    2656:	de b7       	in	r29, 0x3e	; 62
	TASK_checkPass();
    2658:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <TASK_checkPass>
	USART_sendByte(flag);
    265c:	80 91 81 01 	lds	r24, 0x0181
    2660:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <USART_sendByte>
	if (flag == 1) {
    2664:	80 91 81 01 	lds	r24, 0x0181
    2668:	81 30       	cpi	r24, 0x01	; 1
    266a:	19 f4       	brne	.+6      	; 0x2672 <TASK_openDoor+0x22>
		TASK_turnOnMotor();
    266c:	0e 94 76 13 	call	0x26ec	; 0x26ec <TASK_turnOnMotor>
    2670:	14 c0       	rjmp	.+40     	; 0x269a <TASK_openDoor+0x4a>
	} else if (flag == 0 && errorTrial < 2) {
    2672:	80 91 81 01 	lds	r24, 0x0181
    2676:	88 23       	and	r24, r24
    2678:	61 f4       	brne	.+24     	; 0x2692 <TASK_openDoor+0x42>
    267a:	80 91 7c 01 	lds	r24, 0x017C
    267e:	82 30       	cpi	r24, 0x02	; 2
    2680:	40 f4       	brcc	.+16     	; 0x2692 <TASK_openDoor+0x42>
		errorTrial++;
    2682:	80 91 7c 01 	lds	r24, 0x017C
    2686:	8f 5f       	subi	r24, 0xFF	; 255
    2688:	80 93 7c 01 	sts	0x017C, r24
		TASK_openDoor();
    268c:	0e 94 28 13 	call	0x2650	; 0x2650 <TASK_openDoor>
    2690:	04 c0       	rjmp	.+8      	; 0x269a <TASK_openDoor+0x4a>
	} else {
		TASK_turnOnBuzzer();
    2692:	0e 94 60 13 	call	0x26c0	; 0x26c0 <TASK_turnOnBuzzer>
		errorTrial = 0;
    2696:	10 92 7c 01 	sts	0x017C, r1
	}
}
    269a:	cf 91       	pop	r28
    269c:	df 91       	pop	r29
    269e:	08 95       	ret

000026a0 <Callback>:
/*
 * Description :
 * Function responsible for call back for timer 1 .
 */
void Callback(void) {
    26a0:	df 93       	push	r29
    26a2:	cf 93       	push	r28
    26a4:	cd b7       	in	r28, 0x3d	; 61
    26a6:	de b7       	in	r29, 0x3e	; 62
	TIMER1_g_ticks++;
    26a8:	80 91 7d 01 	lds	r24, 0x017D
    26ac:	90 91 7e 01 	lds	r25, 0x017E
    26b0:	01 96       	adiw	r24, 0x01	; 1
    26b2:	90 93 7e 01 	sts	0x017E, r25
    26b6:	80 93 7d 01 	sts	0x017D, r24
}
    26ba:	cf 91       	pop	r28
    26bc:	df 91       	pop	r29
    26be:	08 95       	ret

000026c0 <TASK_turnOnBuzzer>:
/*
 * Description :
 * Function responsible for turning in the buzzer in case of errors .
 */
void TASK_turnOnBuzzer(void) {
    26c0:	df 93       	push	r29
    26c2:	cf 93       	push	r28
    26c4:	cd b7       	in	r28, 0x3d	; 61
    26c6:	de b7       	in	r29, 0x3e	; 62
	TIMER1_g_ticks = 0;
    26c8:	10 92 7e 01 	sts	0x017E, r1
    26cc:	10 92 7d 01 	sts	0x017D, r1
	BUZZER_on();
    26d0:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <BUZZER_on>
	while (TIMER1_g_ticks < DangerTime)
    26d4:	80 91 7d 01 	lds	r24, 0x017D
    26d8:	90 91 7e 01 	lds	r25, 0x017E
    26dc:	8c 33       	cpi	r24, 0x3C	; 60
    26de:	91 05       	cpc	r25, r1
    26e0:	cc f3       	brlt	.-14     	; 0x26d4 <TASK_turnOnBuzzer+0x14>
		;
	BUZZER_off();
    26e2:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <BUZZER_off>
}
    26e6:	cf 91       	pop	r28
    26e8:	df 91       	pop	r29
    26ea:	08 95       	ret

000026ec <TASK_turnOnMotor>:
/*
 * Description :
 * Function responsible for turning in the motor (OPEN -HOLD - CLOSE)  .
 */
void TASK_turnOnMotor(void) {
    26ec:	df 93       	push	r29
    26ee:	cf 93       	push	r28
    26f0:	cd b7       	in	r28, 0x3d	; 61
    26f2:	de b7       	in	r29, 0x3e	; 62
	TIMER1_g_ticks = 0;
    26f4:	10 92 7e 01 	sts	0x017E, r1
    26f8:	10 92 7d 01 	sts	0x017D, r1
	DcMotor_Rotate(CW);
    26fc:	81 e0       	ldi	r24, 0x01	; 1
    26fe:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <DcMotor_Rotate>
	while (TIMER1_g_ticks < OpenDoorTime)
    2702:	80 91 7d 01 	lds	r24, 0x017D
    2706:	90 91 7e 01 	lds	r25, 0x017E
    270a:	8a 30       	cpi	r24, 0x0A	; 10
    270c:	91 05       	cpc	r25, r1
    270e:	cc f3       	brlt	.-14     	; 0x2702 <TASK_turnOnMotor+0x16>
		;
	DcMotor_Rotate(STOP);
    2710:	80 e0       	ldi	r24, 0x00	; 0
    2712:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <DcMotor_Rotate>
	while (TIMER1_g_ticks < OpenDoorTime + HoldDoorTime)
    2716:	80 91 7d 01 	lds	r24, 0x017D
    271a:	90 91 7e 01 	lds	r25, 0x017E
    271e:	8d 30       	cpi	r24, 0x0D	; 13
    2720:	91 05       	cpc	r25, r1
    2722:	cc f3       	brlt	.-14     	; 0x2716 <TASK_turnOnMotor+0x2a>
		;
	DcMotor_Rotate(ACW);
    2724:	82 e0       	ldi	r24, 0x02	; 2
    2726:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <DcMotor_Rotate>
	while (TIMER1_g_ticks < OpenDoorTime + HoldDoorTime + CloseDoorTime)
    272a:	80 91 7d 01 	lds	r24, 0x017D
    272e:	90 91 7e 01 	lds	r25, 0x017E
    2732:	87 31       	cpi	r24, 0x17	; 23
    2734:	91 05       	cpc	r25, r1
    2736:	cc f3       	brlt	.-14     	; 0x272a <TASK_turnOnMotor+0x3e>
		;
	DcMotor_Rotate(STOP);
    2738:	80 e0       	ldi	r24, 0x00	; 0
    273a:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <DcMotor_Rotate>
}
    273e:	cf 91       	pop	r28
    2740:	df 91       	pop	r29
    2742:	08 95       	ret

00002744 <TASK_changePass>:
/*
 * Description :
 * Function responsible for changing password management .
 */
void TASK_changePass() {
    2744:	df 93       	push	r29
    2746:	cf 93       	push	r28
    2748:	cd b7       	in	r28, 0x3d	; 61
    274a:	de b7       	in	r29, 0x3e	; 62
	TASK_checkPass();
    274c:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <TASK_checkPass>
	USART_sendByte(flag);
    2750:	80 91 81 01 	lds	r24, 0x0181
    2754:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <USART_sendByte>
	if (flag == 1) {
    2758:	80 91 81 01 	lds	r24, 0x0181
    275c:	81 30       	cpi	r24, 0x01	; 1
    275e:	19 f4       	brne	.+6      	; 0x2766 <TASK_changePass+0x22>
		TASK_createNewPass();
    2760:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <TASK_createNewPass>
    2764:	14 c0       	rjmp	.+40     	; 0x278e <TASK_changePass+0x4a>
	} else if (flag == 0 && errorTrial < 2) {
    2766:	80 91 81 01 	lds	r24, 0x0181
    276a:	88 23       	and	r24, r24
    276c:	61 f4       	brne	.+24     	; 0x2786 <TASK_changePass+0x42>
    276e:	80 91 7c 01 	lds	r24, 0x017C
    2772:	82 30       	cpi	r24, 0x02	; 2
    2774:	40 f4       	brcc	.+16     	; 0x2786 <TASK_changePass+0x42>
		errorTrial++;
    2776:	80 91 7c 01 	lds	r24, 0x017C
    277a:	8f 5f       	subi	r24, 0xFF	; 255
    277c:	80 93 7c 01 	sts	0x017C, r24
		TASK_changePass();
    2780:	0e 94 a2 13 	call	0x2744	; 0x2744 <TASK_changePass>
    2784:	04 c0       	rjmp	.+8      	; 0x278e <TASK_changePass+0x4a>
	} else {
		TASK_turnOnBuzzer();
    2786:	0e 94 60 13 	call	0x26c0	; 0x26c0 <TASK_turnOnBuzzer>
		errorTrial = 0;
    278a:	10 92 7c 01 	sts	0x017C, r1
	}
}
    278e:	cf 91       	pop	r28
    2790:	df 91       	pop	r29
    2792:	08 95       	ret

00002794 <__udivmodsi4>:
    2794:	a1 e2       	ldi	r26, 0x21	; 33
    2796:	1a 2e       	mov	r1, r26
    2798:	aa 1b       	sub	r26, r26
    279a:	bb 1b       	sub	r27, r27
    279c:	fd 01       	movw	r30, r26
    279e:	0d c0       	rjmp	.+26     	; 0x27ba <__udivmodsi4_ep>

000027a0 <__udivmodsi4_loop>:
    27a0:	aa 1f       	adc	r26, r26
    27a2:	bb 1f       	adc	r27, r27
    27a4:	ee 1f       	adc	r30, r30
    27a6:	ff 1f       	adc	r31, r31
    27a8:	a2 17       	cp	r26, r18
    27aa:	b3 07       	cpc	r27, r19
    27ac:	e4 07       	cpc	r30, r20
    27ae:	f5 07       	cpc	r31, r21
    27b0:	20 f0       	brcs	.+8      	; 0x27ba <__udivmodsi4_ep>
    27b2:	a2 1b       	sub	r26, r18
    27b4:	b3 0b       	sbc	r27, r19
    27b6:	e4 0b       	sbc	r30, r20
    27b8:	f5 0b       	sbc	r31, r21

000027ba <__udivmodsi4_ep>:
    27ba:	66 1f       	adc	r22, r22
    27bc:	77 1f       	adc	r23, r23
    27be:	88 1f       	adc	r24, r24
    27c0:	99 1f       	adc	r25, r25
    27c2:	1a 94       	dec	r1
    27c4:	69 f7       	brne	.-38     	; 0x27a0 <__udivmodsi4_loop>
    27c6:	60 95       	com	r22
    27c8:	70 95       	com	r23
    27ca:	80 95       	com	r24
    27cc:	90 95       	com	r25
    27ce:	9b 01       	movw	r18, r22
    27d0:	ac 01       	movw	r20, r24
    27d2:	bd 01       	movw	r22, r26
    27d4:	cf 01       	movw	r24, r30
    27d6:	08 95       	ret

000027d8 <__prologue_saves__>:
    27d8:	2f 92       	push	r2
    27da:	3f 92       	push	r3
    27dc:	4f 92       	push	r4
    27de:	5f 92       	push	r5
    27e0:	6f 92       	push	r6
    27e2:	7f 92       	push	r7
    27e4:	8f 92       	push	r8
    27e6:	9f 92       	push	r9
    27e8:	af 92       	push	r10
    27ea:	bf 92       	push	r11
    27ec:	cf 92       	push	r12
    27ee:	df 92       	push	r13
    27f0:	ef 92       	push	r14
    27f2:	ff 92       	push	r15
    27f4:	0f 93       	push	r16
    27f6:	1f 93       	push	r17
    27f8:	cf 93       	push	r28
    27fa:	df 93       	push	r29
    27fc:	cd b7       	in	r28, 0x3d	; 61
    27fe:	de b7       	in	r29, 0x3e	; 62
    2800:	ca 1b       	sub	r28, r26
    2802:	db 0b       	sbc	r29, r27
    2804:	0f b6       	in	r0, 0x3f	; 63
    2806:	f8 94       	cli
    2808:	de bf       	out	0x3e, r29	; 62
    280a:	0f be       	out	0x3f, r0	; 63
    280c:	cd bf       	out	0x3d, r28	; 61
    280e:	09 94       	ijmp

00002810 <__epilogue_restores__>:
    2810:	2a 88       	ldd	r2, Y+18	; 0x12
    2812:	39 88       	ldd	r3, Y+17	; 0x11
    2814:	48 88       	ldd	r4, Y+16	; 0x10
    2816:	5f 84       	ldd	r5, Y+15	; 0x0f
    2818:	6e 84       	ldd	r6, Y+14	; 0x0e
    281a:	7d 84       	ldd	r7, Y+13	; 0x0d
    281c:	8c 84       	ldd	r8, Y+12	; 0x0c
    281e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2820:	aa 84       	ldd	r10, Y+10	; 0x0a
    2822:	b9 84       	ldd	r11, Y+9	; 0x09
    2824:	c8 84       	ldd	r12, Y+8	; 0x08
    2826:	df 80       	ldd	r13, Y+7	; 0x07
    2828:	ee 80       	ldd	r14, Y+6	; 0x06
    282a:	fd 80       	ldd	r15, Y+5	; 0x05
    282c:	0c 81       	ldd	r16, Y+4	; 0x04
    282e:	1b 81       	ldd	r17, Y+3	; 0x03
    2830:	aa 81       	ldd	r26, Y+2	; 0x02
    2832:	b9 81       	ldd	r27, Y+1	; 0x01
    2834:	ce 0f       	add	r28, r30
    2836:	d1 1d       	adc	r29, r1
    2838:	0f b6       	in	r0, 0x3f	; 63
    283a:	f8 94       	cli
    283c:	de bf       	out	0x3e, r29	; 62
    283e:	0f be       	out	0x3f, r0	; 63
    2840:	cd bf       	out	0x3d, r28	; 61
    2842:	ed 01       	movw	r28, r26
    2844:	08 95       	ret

00002846 <_exit>:
    2846:	f8 94       	cli

00002848 <__stop_program>:
    2848:	ff cf       	rjmp	.-2      	; 0x2848 <__stop_program>
