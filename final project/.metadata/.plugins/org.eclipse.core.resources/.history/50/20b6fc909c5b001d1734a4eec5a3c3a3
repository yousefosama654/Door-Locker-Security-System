#include"lcd.h"
#include"keypad.h"
#include"util/delay.h"
#include"usart.h"
#include"timer1.h"
#include"avr/interrupt.h"
/* String to store the 5-digits password received from user or EEPROM */
uint8 HMI_ECU_Password_1[5];
uint8 HMI_ECU_Password_2[5];
uint8 flag;
uint8 i;
uint8 key;
uint8 errorTrial = 0;
volatile int TIMER1_g_ticks = 0;

#define OpenDoorTime 10
#define HoldDoorTime 3
#define CloseDoorTime 10
#define DangerTime 60
#define EnterButton 13
#define NormalDelay 800
#define KeyDelay    500
#define UsartDelay  50

void TASK_createNewPass(void);
void TASK_mainInit(void);
void TASK_showOptions(void);
void TASK_checkPass(void);
void TASK_openDoor(void);
void TASK_changePass(void);
void Callback(void);
void TASK_turnOnBuzzer(void);
void TASK_turnOnMotor(void);
int main() {
	TASK_mainInit();
	TASK_createNewPass();
	while (1) {
		TASK_showOptions();
	}
}
void TASK_mainInit(void) {
	sei();
	LCD_init();
	USART_ConfigType config = { DISABLED_PARITY, BIT_1_STOP_SELECT, 8, 9600 };
	USART_init(&config);
	TIMER1_setCallback(Callback);
	Timer1_ConfigType Timer1_configuration =
			{ 0, 8000, F_CPU_1024, Compare_Mode };
	TIMER1_init_Compare(&Timer1_configuration);
}
void TASK_createNewPass(void) {
	LCD_clearScreen();
	LCD_displayString("plz enter pass:");
	LCD_moveCursor(1, 0);
	i = key = 0;
	flag = 1;
	while (i < 5) {
		key = KEYPAD_getPressedKey();
		if (key >= 0 && key <= 9) {
			LCD_displayCharacter('*');
			HMI_ECU_Password_1[i] = key;
			_delay_ms(KeyDelay);
			i++;
		}
	}
	while (KEYPAD_getPressedKey() != EnterButton)
		;
	i = 0;
	LCD_clearScreen();
	LCD_displayString("plz reenter pass:");
	LCD_moveCursor(1, 0);
	while (i < 5) {
		key = KEYPAD_getPressedKey();
		if (key >= 0 && key <= 9) {
			LCD_displayCharacter('*');
			HMI_ECU_Password_2[i] = key;
			_delay_ms(KeyDelay);
			i++;
		}
	}
	while (KEYPAD_getPressedKey() != EnterButton)
		;
	LCD_clearScreen();
	for (int i = 0; i < 5; i++) {
		USART_sendByte(HMI_ECU_Password_1[i]);
		_delay_ms(50);
	}
	for (int i = 0; i < 5; i++) {
		USART_sendByte(HMI_ECU_Password_2[i]);
		_delay_ms(50);
	}
	flag = USART_recieveByte();
	if (flag == 1) {
		LCD_displayString("Matching...");
		_delay_ms(NormalDelay);
	} else {
		LCD_displayString("Not Matching...");
		_delay_ms(NormalDelay);
		TASK_createNewPass();
	}
}
void TASK_showOptions(void) {
	LCD_clearScreen();
	LCD_moveCursor(0, 0);
	LCD_displayString("+ : Open Door");
	LCD_moveCursor(1, 0);
	LCD_displayString("- : Change Pass");
	key = KEYPAD_getPressedKey();
	if (key == '-' || key == '+') {
		USART_sendByte(key);
		if (key == '-') {
			TASK_changePass();
		} else {
			TASK_openDoor();
		}
	} else {
		LCD_clearScreen();
		LCD_displayString("Enter Valid Key");
		_delay_ms(NormalDelay);
		TASK_showOptions();
	}
}
void TASK_checkPass() {
	LCD_clearScreen();
	uint8 HMI_ECU_Password[5];
	LCD_displayString("plz enter pass:");
	LCD_moveCursor(1, 0);
	i = key = 0;
	while (i < 5) {
		key = KEYPAD_getPressedKey();
		if (key >= 0 && key <= 9) {
			LCD_displayCharacter('*');
			HMI_ECU_Password[i] = key;
			_delay_ms(KeyDelay);
			i++;
		}
	}
	while (KEYPAD_getPressedKey() != EnterButton)
		;
	for (int i = 0; i < 5; i++) {
		USART_sendByte(HMI_ECU_Password[i]);
		_delay_ms(UsartDelay);
	}
}
void TASK_openDoor(void) {
	TASK_checkPass();
	flag = USART_recieveByte();
	LCD_clearScreen();
	if (flag == 1) {
		TASK_turnOnMotor();
	} else if (flag == 0 && errorTrial < 2) {
		errorTrial++;
		LCD_displayString("Not Correct...");
		_delay_ms(NormalDelay);
		TASK_openDoor();
	} else {
		TASK_turnOnBuzzer();
		errorTrial = 0;
	}
}
void TASK_changePass(void) {
	TASK_checkPass();
	flag = USART_recieveByte();
	LCD_clearScreen();
	if (flag == 1) {
		LCD_displayString("Correct pass");
		_delay_ms(NormalDelay);
		TASK_createNewPass();
	} else if (flag == 0 && errorTrial < 2) {
		errorTrial++;
		LCD_displayString("Not Correct...");
		_delay_ms(NormalDelay);
		TASK_changePass();
	} else {
		TASK_turnOnBuzzer();
		errorTrial = 0;
	}
}
void Callback(void) {
	TIMER1_g_ticks++;
}
void TASK_turnOnBuzzer(void) {
	TIMER1_g_ticks = 0;
	LCD_clearScreen();
	LCD_displayString("Error !!!");
	while (TIMER1_g_ticks < DangerTime)
		;
}
void TASK_turnOnMotor(void) {
	TIMER1_g_ticks = 0;
	LCD_clearScreen();
	LCD_displayString("Door Unlocking");
	while (TIMER1_g_ticks < OpenDoorTime)
		;
	LCD_clearScreen();
	LCD_displayString("Holding...");
	while (TIMER1_g_ticks < OpenDoorTime + HoldDoorTime)
		;
	LCD_clearScreen();
	LCD_displayString("Door Locking");
	while (TIMER1_g_ticks < OpenDoorTime + HoldDoorTime + CloseDoorTime)
		;
}
