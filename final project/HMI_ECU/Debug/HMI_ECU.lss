
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000350a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000cc  00800060  0000350a  0000359e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  0080012c  0080012c  0000366a  2**0
                  ALLOC
  3 .stab         0000312c  00000000  00000000  0000366c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001231  00000000  00000000  00006798  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000079c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007b09  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007c79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000098c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a7ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b55c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b6bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b949  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c117  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 82 17 	jmp	0x2f04	; 0x2f04 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e0       	ldi	r30, 0x0A	; 10
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 32       	cpi	r26, 0x2C	; 44
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e2       	ldi	r26, 0x2C	; 44
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 33       	cpi	r26, 0x3E	; 62
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 83 1a 	jmp	0x3506	; 0x3506 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 07 1a 	jmp	0x340e	; 0x340e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e1       	ldi	r26, 0x19	; 25
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 23 1a 	jmp	0x3446	; 0x3446 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2f 1a 	jmp	0x345e	; 0x345e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2f 1a 	jmp	0x345e	; 0x345e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 07 1a 	jmp	0x340e	; 0x340e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 e1       	ldi	r24, 0x19	; 25
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 23 1a 	jmp	0x3446	; 0x3446 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 2f 1a 	jmp	0x345e	; 0x345e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 2f 1a 	jmp	0x345e	; 0x345e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 2f 1a 	jmp	0x345e	; 0x345e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 17 1a 	jmp	0x342e	; 0x342e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 33 1a 	jmp	0x3466	; 0x3466 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
#include"Utilities.h"
int main() {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	TASK_mainInit();
     b4e:	0e 94 ae 05 	call	0xb5c	; 0xb5c <TASK_mainInit>
	TASK_createNewPass();
     b52:	0e 94 10 06 	call	0xc20	; 0xc20 <TASK_createNewPass>
	while (1) {
		TASK_showOptions();
     b56:	0e 94 f5 09 	call	0x13ea	; 0x13ea <TASK_showOptions>
     b5a:	fd cf       	rjmp	.-6      	; 0xb56 <main+0x10>

00000b5c <TASK_mainInit>:
*******************************************************************************/
/*
 * Description :
 * Function responsible for Modules initializations .
 */
void TASK_mainInit(void) {
     b5c:	df 93       	push	r29
     b5e:	cf 93       	push	r28
     b60:	cd b7       	in	r28, 0x3d	; 61
     b62:	de b7       	in	r29, 0x3e	; 62
     b64:	65 97       	sbiw	r28, 0x15	; 21
     b66:	0f b6       	in	r0, 0x3f	; 63
     b68:	f8 94       	cli
     b6a:	de bf       	out	0x3e, r29	; 62
     b6c:	0f be       	out	0x3f, r0	; 63
     b6e:	cd bf       	out	0x3d, r28	; 61
	sei();
     b70:	78 94       	sei
	LCD_init();
     b72:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <LCD_init>
	USART_ConfigType config = { DISABLED_PARITY, BIT_1_STOP_SELECT, 8, 9600 };
     b76:	ce 01       	movw	r24, r28
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	9d 87       	std	Y+13, r25	; 0x0d
     b7c:	8c 87       	std	Y+12, r24	; 0x0c
     b7e:	e7 e2       	ldi	r30, 0x27	; 39
     b80:	f1 e0       	ldi	r31, 0x01	; 1
     b82:	ff 87       	std	Y+15, r31	; 0x0f
     b84:	ee 87       	std	Y+14, r30	; 0x0e
     b86:	f5 e0       	ldi	r31, 0x05	; 5
     b88:	f8 8b       	std	Y+16, r31	; 0x10
     b8a:	ee 85       	ldd	r30, Y+14	; 0x0e
     b8c:	ff 85       	ldd	r31, Y+15	; 0x0f
     b8e:	00 80       	ld	r0, Z
     b90:	8e 85       	ldd	r24, Y+14	; 0x0e
     b92:	9f 85       	ldd	r25, Y+15	; 0x0f
     b94:	01 96       	adiw	r24, 0x01	; 1
     b96:	9f 87       	std	Y+15, r25	; 0x0f
     b98:	8e 87       	std	Y+14, r24	; 0x0e
     b9a:	ec 85       	ldd	r30, Y+12	; 0x0c
     b9c:	fd 85       	ldd	r31, Y+13	; 0x0d
     b9e:	00 82       	st	Z, r0
     ba0:	8c 85       	ldd	r24, Y+12	; 0x0c
     ba2:	9d 85       	ldd	r25, Y+13	; 0x0d
     ba4:	01 96       	adiw	r24, 0x01	; 1
     ba6:	9d 87       	std	Y+13, r25	; 0x0d
     ba8:	8c 87       	std	Y+12, r24	; 0x0c
     baa:	98 89       	ldd	r25, Y+16	; 0x10
     bac:	91 50       	subi	r25, 0x01	; 1
     bae:	98 8b       	std	Y+16, r25	; 0x10
     bb0:	e8 89       	ldd	r30, Y+16	; 0x10
     bb2:	ee 23       	and	r30, r30
     bb4:	51 f7       	brne	.-44     	; 0xb8a <TASK_mainInit+0x2e>
	USART_init(&config);
     bb6:	ce 01       	movw	r24, r28
     bb8:	01 96       	adiw	r24, 0x01	; 1
     bba:	0e 94 30 18 	call	0x3060	; 0x3060 <USART_init>
	TIMER1_setCallback(Callback);
     bbe:	87 ec       	ldi	r24, 0xC7	; 199
     bc0:	9d e0       	ldi	r25, 0x0D	; 13
     bc2:	0e 94 1e 18 	call	0x303c	; 0x303c <TIMER1_setCallback>
	Timer1_ConfigType Timer1_configuration =
			{ 0, 8000, F_CPU_1024, Compare_Mode };
     bc6:	ce 01       	movw	r24, r28
     bc8:	06 96       	adiw	r24, 0x06	; 6
     bca:	9a 8b       	std	Y+18, r25	; 0x12
     bcc:	89 8b       	std	Y+17, r24	; 0x11
     bce:	e1 e2       	ldi	r30, 0x21	; 33
     bd0:	f1 e0       	ldi	r31, 0x01	; 1
     bd2:	fc 8b       	std	Y+20, r31	; 0x14
     bd4:	eb 8b       	std	Y+19, r30	; 0x13
     bd6:	f6 e0       	ldi	r31, 0x06	; 6
     bd8:	fd 8b       	std	Y+21, r31	; 0x15
     bda:	eb 89       	ldd	r30, Y+19	; 0x13
     bdc:	fc 89       	ldd	r31, Y+20	; 0x14
     bde:	00 80       	ld	r0, Z
     be0:	8b 89       	ldd	r24, Y+19	; 0x13
     be2:	9c 89       	ldd	r25, Y+20	; 0x14
     be4:	01 96       	adiw	r24, 0x01	; 1
     be6:	9c 8b       	std	Y+20, r25	; 0x14
     be8:	8b 8b       	std	Y+19, r24	; 0x13
     bea:	e9 89       	ldd	r30, Y+17	; 0x11
     bec:	fa 89       	ldd	r31, Y+18	; 0x12
     bee:	00 82       	st	Z, r0
     bf0:	89 89       	ldd	r24, Y+17	; 0x11
     bf2:	9a 89       	ldd	r25, Y+18	; 0x12
     bf4:	01 96       	adiw	r24, 0x01	; 1
     bf6:	9a 8b       	std	Y+18, r25	; 0x12
     bf8:	89 8b       	std	Y+17, r24	; 0x11
     bfa:	9d 89       	ldd	r25, Y+21	; 0x15
     bfc:	91 50       	subi	r25, 0x01	; 1
     bfe:	9d 8b       	std	Y+21, r25	; 0x15
     c00:	ed 89       	ldd	r30, Y+21	; 0x15
     c02:	ee 23       	and	r30, r30
     c04:	51 f7       	brne	.-44     	; 0xbda <TASK_mainInit+0x7e>
	TIMER1_init_Compare(&Timer1_configuration);
     c06:	ce 01       	movw	r24, r28
     c08:	06 96       	adiw	r24, 0x06	; 6
     c0a:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <TIMER1_init_Compare>
}
     c0e:	65 96       	adiw	r28, 0x15	; 21
     c10:	0f b6       	in	r0, 0x3f	; 63
     c12:	f8 94       	cli
     c14:	de bf       	out	0x3e, r29	; 62
     c16:	0f be       	out	0x3f, r0	; 63
     c18:	cd bf       	out	0x3d, r28	; 61
     c1a:	cf 91       	pop	r28
     c1c:	df 91       	pop	r29
     c1e:	08 95       	ret

00000c20 <TASK_createNewPass>:
/*
 * Description :
 * Function responsible for creating new passwords by user inputs .
 */
void TASK_createNewPass(void) {
     c20:	0f 93       	push	r16
     c22:	1f 93       	push	r17
     c24:	df 93       	push	r29
     c26:	cf 93       	push	r28
     c28:	cd b7       	in	r28, 0x3d	; 61
     c2a:	de b7       	in	r29, 0x3e	; 62
     c2c:	c8 55       	subi	r28, 0x58	; 88
     c2e:	d0 40       	sbci	r29, 0x00	; 0
     c30:	0f b6       	in	r0, 0x3f	; 63
     c32:	f8 94       	cli
     c34:	de bf       	out	0x3e, r29	; 62
     c36:	0f be       	out	0x3f, r0	; 63
     c38:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
     c3a:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <LCD_clearScreen>
	LCD_displayString("plz enter pass:");
     c3e:	80 e6       	ldi	r24, 0x60	; 96
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <LCD_displayString>
	LCD_moveCursor(1, 0);
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	60 e0       	ldi	r22, 0x00	; 0
     c4a:	0e 94 40 17 	call	0x2e80	; 0x2e80 <LCD_moveCursor>
	i = key = 0;
     c4e:	10 92 38 01 	sts	0x0138, r1
     c52:	80 91 38 01 	lds	r24, 0x0138
     c56:	80 93 37 01 	sts	0x0137, r24
	flag = 1;
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	80 93 36 01 	sts	0x0136, r24
     c60:	cf c0       	rjmp	.+414    	; 0xe00 <TASK_createNewPass+0x1e0>
	while (i < PassLength) {
		key = KEYPAD_getPressedKey();
     c62:	0e 94 5f 11 	call	0x22be	; 0x22be <KEYPAD_getPressedKey>
     c66:	80 93 38 01 	sts	0x0138, r24
		if (key >= 0 && key <= 9) {
     c6a:	80 91 38 01 	lds	r24, 0x0138
     c6e:	8a 30       	cpi	r24, 0x0A	; 10
     c70:	08 f0       	brcs	.+2      	; 0xc74 <TASK_createNewPass+0x54>
     c72:	c6 c0       	rjmp	.+396    	; 0xe00 <TASK_createNewPass+0x1e0>
			LCD_displayCharacter('*');
     c74:	8a e2       	ldi	r24, 0x2A	; 42
     c76:	0e 94 46 14 	call	0x288c	; 0x288c <LCD_displayCharacter>
			HMI_ECU_Password_1[i] = key;
     c7a:	80 91 37 01 	lds	r24, 0x0137
     c7e:	88 2f       	mov	r24, r24
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	20 91 38 01 	lds	r18, 0x0138
     c86:	fc 01       	movw	r30, r24
     c88:	e7 5c       	subi	r30, 0xC7	; 199
     c8a:	fe 4f       	sbci	r31, 0xFE	; 254
     c8c:	20 83       	st	Z, r18
     c8e:	fe 01       	movw	r30, r28
     c90:	ef 5a       	subi	r30, 0xAF	; 175
     c92:	ff 4f       	sbci	r31, 0xFF	; 255
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	aa ef       	ldi	r26, 0xFA	; 250
     c9a:	b3 e4       	ldi	r27, 0x43	; 67
     c9c:	80 83       	st	Z, r24
     c9e:	91 83       	std	Z+1, r25	; 0x01
     ca0:	a2 83       	std	Z+2, r26	; 0x02
     ca2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ca4:	8e 01       	movw	r16, r28
     ca6:	03 5b       	subi	r16, 0xB3	; 179
     ca8:	1f 4f       	sbci	r17, 0xFF	; 255
     caa:	fe 01       	movw	r30, r28
     cac:	ef 5a       	subi	r30, 0xAF	; 175
     cae:	ff 4f       	sbci	r31, 0xFF	; 255
     cb0:	60 81       	ld	r22, Z
     cb2:	71 81       	ldd	r23, Z+1	; 0x01
     cb4:	82 81       	ldd	r24, Z+2	; 0x02
     cb6:	93 81       	ldd	r25, Z+3	; 0x03
     cb8:	20 e0       	ldi	r18, 0x00	; 0
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	4a ef       	ldi	r20, 0xFA	; 250
     cbe:	54 e4       	ldi	r21, 0x44	; 68
     cc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cc4:	dc 01       	movw	r26, r24
     cc6:	cb 01       	movw	r24, r22
     cc8:	f8 01       	movw	r30, r16
     cca:	80 83       	st	Z, r24
     ccc:	91 83       	std	Z+1, r25	; 0x01
     cce:	a2 83       	std	Z+2, r26	; 0x02
     cd0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     cd2:	fe 01       	movw	r30, r28
     cd4:	e3 5b       	subi	r30, 0xB3	; 179
     cd6:	ff 4f       	sbci	r31, 0xFF	; 255
     cd8:	60 81       	ld	r22, Z
     cda:	71 81       	ldd	r23, Z+1	; 0x01
     cdc:	82 81       	ldd	r24, Z+2	; 0x02
     cde:	93 81       	ldd	r25, Z+3	; 0x03
     ce0:	20 e0       	ldi	r18, 0x00	; 0
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	40 e8       	ldi	r20, 0x80	; 128
     ce6:	5f e3       	ldi	r21, 0x3F	; 63
     ce8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cec:	88 23       	and	r24, r24
     cee:	44 f4       	brge	.+16     	; 0xd00 <TASK_createNewPass+0xe0>
		__ticks = 1;
     cf0:	fe 01       	movw	r30, r28
     cf2:	e5 5b       	subi	r30, 0xB5	; 181
     cf4:	ff 4f       	sbci	r31, 0xFF	; 255
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	91 83       	std	Z+1, r25	; 0x01
     cfc:	80 83       	st	Z, r24
     cfe:	64 c0       	rjmp	.+200    	; 0xdc8 <TASK_createNewPass+0x1a8>
	else if (__tmp > 65535)
     d00:	fe 01       	movw	r30, r28
     d02:	e3 5b       	subi	r30, 0xB3	; 179
     d04:	ff 4f       	sbci	r31, 0xFF	; 255
     d06:	60 81       	ld	r22, Z
     d08:	71 81       	ldd	r23, Z+1	; 0x01
     d0a:	82 81       	ldd	r24, Z+2	; 0x02
     d0c:	93 81       	ldd	r25, Z+3	; 0x03
     d0e:	20 e0       	ldi	r18, 0x00	; 0
     d10:	3f ef       	ldi	r19, 0xFF	; 255
     d12:	4f e7       	ldi	r20, 0x7F	; 127
     d14:	57 e4       	ldi	r21, 0x47	; 71
     d16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d1a:	18 16       	cp	r1, r24
     d1c:	0c f0       	brlt	.+2      	; 0xd20 <TASK_createNewPass+0x100>
     d1e:	43 c0       	rjmp	.+134    	; 0xda6 <TASK_createNewPass+0x186>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d20:	fe 01       	movw	r30, r28
     d22:	ef 5a       	subi	r30, 0xAF	; 175
     d24:	ff 4f       	sbci	r31, 0xFF	; 255
     d26:	60 81       	ld	r22, Z
     d28:	71 81       	ldd	r23, Z+1	; 0x01
     d2a:	82 81       	ldd	r24, Z+2	; 0x02
     d2c:	93 81       	ldd	r25, Z+3	; 0x03
     d2e:	20 e0       	ldi	r18, 0x00	; 0
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	40 e2       	ldi	r20, 0x20	; 32
     d34:	51 e4       	ldi	r21, 0x41	; 65
     d36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d3a:	dc 01       	movw	r26, r24
     d3c:	cb 01       	movw	r24, r22
     d3e:	8e 01       	movw	r16, r28
     d40:	05 5b       	subi	r16, 0xB5	; 181
     d42:	1f 4f       	sbci	r17, 0xFF	; 255
     d44:	bc 01       	movw	r22, r24
     d46:	cd 01       	movw	r24, r26
     d48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d4c:	dc 01       	movw	r26, r24
     d4e:	cb 01       	movw	r24, r22
     d50:	f8 01       	movw	r30, r16
     d52:	91 83       	std	Z+1, r25	; 0x01
     d54:	80 83       	st	Z, r24
     d56:	1f c0       	rjmp	.+62     	; 0xd96 <TASK_createNewPass+0x176>
     d58:	fe 01       	movw	r30, r28
     d5a:	e7 5b       	subi	r30, 0xB7	; 183
     d5c:	ff 4f       	sbci	r31, 0xFF	; 255
     d5e:	88 ec       	ldi	r24, 0xC8	; 200
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	91 83       	std	Z+1, r25	; 0x01
     d64:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d66:	fe 01       	movw	r30, r28
     d68:	e7 5b       	subi	r30, 0xB7	; 183
     d6a:	ff 4f       	sbci	r31, 0xFF	; 255
     d6c:	80 81       	ld	r24, Z
     d6e:	91 81       	ldd	r25, Z+1	; 0x01
     d70:	01 97       	sbiw	r24, 0x01	; 1
     d72:	f1 f7       	brne	.-4      	; 0xd70 <TASK_createNewPass+0x150>
     d74:	fe 01       	movw	r30, r28
     d76:	e7 5b       	subi	r30, 0xB7	; 183
     d78:	ff 4f       	sbci	r31, 0xFF	; 255
     d7a:	91 83       	std	Z+1, r25	; 0x01
     d7c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d7e:	de 01       	movw	r26, r28
     d80:	a5 5b       	subi	r26, 0xB5	; 181
     d82:	bf 4f       	sbci	r27, 0xFF	; 255
     d84:	fe 01       	movw	r30, r28
     d86:	e5 5b       	subi	r30, 0xB5	; 181
     d88:	ff 4f       	sbci	r31, 0xFF	; 255
     d8a:	80 81       	ld	r24, Z
     d8c:	91 81       	ldd	r25, Z+1	; 0x01
     d8e:	01 97       	sbiw	r24, 0x01	; 1
     d90:	11 96       	adiw	r26, 0x01	; 1
     d92:	9c 93       	st	X, r25
     d94:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d96:	fe 01       	movw	r30, r28
     d98:	e5 5b       	subi	r30, 0xB5	; 181
     d9a:	ff 4f       	sbci	r31, 0xFF	; 255
     d9c:	80 81       	ld	r24, Z
     d9e:	91 81       	ldd	r25, Z+1	; 0x01
     da0:	00 97       	sbiw	r24, 0x00	; 0
     da2:	d1 f6       	brne	.-76     	; 0xd58 <TASK_createNewPass+0x138>
     da4:	28 c0       	rjmp	.+80     	; 0xdf6 <TASK_createNewPass+0x1d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     da6:	8e 01       	movw	r16, r28
     da8:	05 5b       	subi	r16, 0xB5	; 181
     daa:	1f 4f       	sbci	r17, 0xFF	; 255
     dac:	fe 01       	movw	r30, r28
     dae:	e3 5b       	subi	r30, 0xB3	; 179
     db0:	ff 4f       	sbci	r31, 0xFF	; 255
     db2:	60 81       	ld	r22, Z
     db4:	71 81       	ldd	r23, Z+1	; 0x01
     db6:	82 81       	ldd	r24, Z+2	; 0x02
     db8:	93 81       	ldd	r25, Z+3	; 0x03
     dba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dbe:	dc 01       	movw	r26, r24
     dc0:	cb 01       	movw	r24, r22
     dc2:	f8 01       	movw	r30, r16
     dc4:	91 83       	std	Z+1, r25	; 0x01
     dc6:	80 83       	st	Z, r24
     dc8:	de 01       	movw	r26, r28
     dca:	a9 5b       	subi	r26, 0xB9	; 185
     dcc:	bf 4f       	sbci	r27, 0xFF	; 255
     dce:	fe 01       	movw	r30, r28
     dd0:	e5 5b       	subi	r30, 0xB5	; 181
     dd2:	ff 4f       	sbci	r31, 0xFF	; 255
     dd4:	80 81       	ld	r24, Z
     dd6:	91 81       	ldd	r25, Z+1	; 0x01
     dd8:	11 96       	adiw	r26, 0x01	; 1
     dda:	9c 93       	st	X, r25
     ddc:	8e 93       	st	-X, r24
     dde:	fe 01       	movw	r30, r28
     de0:	e9 5b       	subi	r30, 0xB9	; 185
     de2:	ff 4f       	sbci	r31, 0xFF	; 255
     de4:	80 81       	ld	r24, Z
     de6:	91 81       	ldd	r25, Z+1	; 0x01
     de8:	01 97       	sbiw	r24, 0x01	; 1
     dea:	f1 f7       	brne	.-4      	; 0xde8 <TASK_createNewPass+0x1c8>
     dec:	fe 01       	movw	r30, r28
     dee:	e9 5b       	subi	r30, 0xB9	; 185
     df0:	ff 4f       	sbci	r31, 0xFF	; 255
     df2:	91 83       	std	Z+1, r25	; 0x01
     df4:	80 83       	st	Z, r24
			_delay_ms(KeyDelay);
			i++;
     df6:	80 91 37 01 	lds	r24, 0x0137
     dfa:	8f 5f       	subi	r24, 0xFF	; 255
     dfc:	80 93 37 01 	sts	0x0137, r24
	LCD_clearScreen();
	LCD_displayString("plz enter pass:");
	LCD_moveCursor(1, 0);
	i = key = 0;
	flag = 1;
	while (i < PassLength) {
     e00:	80 91 37 01 	lds	r24, 0x0137
     e04:	85 30       	cpi	r24, 0x05	; 5
     e06:	08 f4       	brcc	.+2      	; 0xe0a <TASK_createNewPass+0x1ea>
     e08:	2c cf       	rjmp	.-424    	; 0xc62 <TASK_createNewPass+0x42>
			HMI_ECU_Password_1[i] = key;
			_delay_ms(KeyDelay);
			i++;
		}
	}
	while (KEYPAD_getPressedKey() != EnterButton)
     e0a:	0e 94 5f 11 	call	0x22be	; 0x22be <KEYPAD_getPressedKey>
     e0e:	8d 30       	cpi	r24, 0x0D	; 13
     e10:	e1 f7       	brne	.-8      	; 0xe0a <TASK_createNewPass+0x1ea>
		;
	i = 0;
     e12:	10 92 37 01 	sts	0x0137, r1
	LCD_clearScreen();
     e16:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <LCD_clearScreen>
	LCD_displayString("plz reenter pass:");
     e1a:	80 e7       	ldi	r24, 0x70	; 112
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <LCD_displayString>
	LCD_moveCursor(1, 0);
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	0e 94 40 17 	call	0x2e80	; 0x2e80 <LCD_moveCursor>
     e2a:	a0 c0       	rjmp	.+320    	; 0xf6c <TASK_createNewPass+0x34c>
	while (i < PassLength) {
		key = KEYPAD_getPressedKey();
     e2c:	0e 94 5f 11 	call	0x22be	; 0x22be <KEYPAD_getPressedKey>
     e30:	80 93 38 01 	sts	0x0138, r24
		if (key >= 0 && key <= 9) {
     e34:	80 91 38 01 	lds	r24, 0x0138
     e38:	8a 30       	cpi	r24, 0x0A	; 10
     e3a:	08 f0       	brcs	.+2      	; 0xe3e <TASK_createNewPass+0x21e>
     e3c:	97 c0       	rjmp	.+302    	; 0xf6c <TASK_createNewPass+0x34c>
			LCD_displayCharacter('*');
     e3e:	8a e2       	ldi	r24, 0x2A	; 42
     e40:	0e 94 46 14 	call	0x288c	; 0x288c <LCD_displayCharacter>
			HMI_ECU_Password_2[i] = key;
     e44:	80 91 37 01 	lds	r24, 0x0137
     e48:	88 2f       	mov	r24, r24
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	20 91 38 01 	lds	r18, 0x0138
     e50:	fc 01       	movw	r30, r24
     e52:	ef 5c       	subi	r30, 0xCF	; 207
     e54:	fe 4f       	sbci	r31, 0xFE	; 254
     e56:	20 83       	st	Z, r18
     e58:	fe 01       	movw	r30, r28
     e5a:	ed 5b       	subi	r30, 0xBD	; 189
     e5c:	ff 4f       	sbci	r31, 0xFF	; 255
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	aa ef       	ldi	r26, 0xFA	; 250
     e64:	b3 e4       	ldi	r27, 0x43	; 67
     e66:	80 83       	st	Z, r24
     e68:	91 83       	std	Z+1, r25	; 0x01
     e6a:	a2 83       	std	Z+2, r26	; 0x02
     e6c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e6e:	8e 01       	movw	r16, r28
     e70:	01 5c       	subi	r16, 0xC1	; 193
     e72:	1f 4f       	sbci	r17, 0xFF	; 255
     e74:	fe 01       	movw	r30, r28
     e76:	ed 5b       	subi	r30, 0xBD	; 189
     e78:	ff 4f       	sbci	r31, 0xFF	; 255
     e7a:	60 81       	ld	r22, Z
     e7c:	71 81       	ldd	r23, Z+1	; 0x01
     e7e:	82 81       	ldd	r24, Z+2	; 0x02
     e80:	93 81       	ldd	r25, Z+3	; 0x03
     e82:	20 e0       	ldi	r18, 0x00	; 0
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	4a ef       	ldi	r20, 0xFA	; 250
     e88:	54 e4       	ldi	r21, 0x44	; 68
     e8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e8e:	dc 01       	movw	r26, r24
     e90:	cb 01       	movw	r24, r22
     e92:	f8 01       	movw	r30, r16
     e94:	80 83       	st	Z, r24
     e96:	91 83       	std	Z+1, r25	; 0x01
     e98:	a2 83       	std	Z+2, r26	; 0x02
     e9a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e9c:	fe 01       	movw	r30, r28
     e9e:	ff 96       	adiw	r30, 0x3f	; 63
     ea0:	60 81       	ld	r22, Z
     ea2:	71 81       	ldd	r23, Z+1	; 0x01
     ea4:	82 81       	ldd	r24, Z+2	; 0x02
     ea6:	93 81       	ldd	r25, Z+3	; 0x03
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	40 e8       	ldi	r20, 0x80	; 128
     eae:	5f e3       	ldi	r21, 0x3F	; 63
     eb0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     eb4:	88 23       	and	r24, r24
     eb6:	2c f4       	brge	.+10     	; 0xec2 <TASK_createNewPass+0x2a2>
		__ticks = 1;
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	9e af       	std	Y+62, r25	; 0x3e
     ebe:	8d af       	std	Y+61, r24	; 0x3d
     ec0:	46 c0       	rjmp	.+140    	; 0xf4e <TASK_createNewPass+0x32e>
	else if (__tmp > 65535)
     ec2:	fe 01       	movw	r30, r28
     ec4:	ff 96       	adiw	r30, 0x3f	; 63
     ec6:	60 81       	ld	r22, Z
     ec8:	71 81       	ldd	r23, Z+1	; 0x01
     eca:	82 81       	ldd	r24, Z+2	; 0x02
     ecc:	93 81       	ldd	r25, Z+3	; 0x03
     ece:	20 e0       	ldi	r18, 0x00	; 0
     ed0:	3f ef       	ldi	r19, 0xFF	; 255
     ed2:	4f e7       	ldi	r20, 0x7F	; 127
     ed4:	57 e4       	ldi	r21, 0x47	; 71
     ed6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     eda:	18 16       	cp	r1, r24
     edc:	64 f5       	brge	.+88     	; 0xf36 <TASK_createNewPass+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ede:	fe 01       	movw	r30, r28
     ee0:	ed 5b       	subi	r30, 0xBD	; 189
     ee2:	ff 4f       	sbci	r31, 0xFF	; 255
     ee4:	60 81       	ld	r22, Z
     ee6:	71 81       	ldd	r23, Z+1	; 0x01
     ee8:	82 81       	ldd	r24, Z+2	; 0x02
     eea:	93 81       	ldd	r25, Z+3	; 0x03
     eec:	20 e0       	ldi	r18, 0x00	; 0
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	40 e2       	ldi	r20, 0x20	; 32
     ef2:	51 e4       	ldi	r21, 0x41	; 65
     ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ef8:	dc 01       	movw	r26, r24
     efa:	cb 01       	movw	r24, r22
     efc:	bc 01       	movw	r22, r24
     efe:	cd 01       	movw	r24, r26
     f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f04:	dc 01       	movw	r26, r24
     f06:	cb 01       	movw	r24, r22
     f08:	9e af       	std	Y+62, r25	; 0x3e
     f0a:	8d af       	std	Y+61, r24	; 0x3d
     f0c:	0f c0       	rjmp	.+30     	; 0xf2c <TASK_createNewPass+0x30c>
     f0e:	88 ec       	ldi	r24, 0xC8	; 200
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	9c af       	std	Y+60, r25	; 0x3c
     f14:	8b af       	std	Y+59, r24	; 0x3b
     f16:	8b ad       	ldd	r24, Y+59	; 0x3b
     f18:	9c ad       	ldd	r25, Y+60	; 0x3c
     f1a:	01 97       	sbiw	r24, 0x01	; 1
     f1c:	f1 f7       	brne	.-4      	; 0xf1a <TASK_createNewPass+0x2fa>
     f1e:	9c af       	std	Y+60, r25	; 0x3c
     f20:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f22:	8d ad       	ldd	r24, Y+61	; 0x3d
     f24:	9e ad       	ldd	r25, Y+62	; 0x3e
     f26:	01 97       	sbiw	r24, 0x01	; 1
     f28:	9e af       	std	Y+62, r25	; 0x3e
     f2a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f2c:	8d ad       	ldd	r24, Y+61	; 0x3d
     f2e:	9e ad       	ldd	r25, Y+62	; 0x3e
     f30:	00 97       	sbiw	r24, 0x00	; 0
     f32:	69 f7       	brne	.-38     	; 0xf0e <TASK_createNewPass+0x2ee>
     f34:	16 c0       	rjmp	.+44     	; 0xf62 <TASK_createNewPass+0x342>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f36:	fe 01       	movw	r30, r28
     f38:	ff 96       	adiw	r30, 0x3f	; 63
     f3a:	60 81       	ld	r22, Z
     f3c:	71 81       	ldd	r23, Z+1	; 0x01
     f3e:	82 81       	ldd	r24, Z+2	; 0x02
     f40:	93 81       	ldd	r25, Z+3	; 0x03
     f42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f46:	dc 01       	movw	r26, r24
     f48:	cb 01       	movw	r24, r22
     f4a:	9e af       	std	Y+62, r25	; 0x3e
     f4c:	8d af       	std	Y+61, r24	; 0x3d
     f4e:	8d ad       	ldd	r24, Y+61	; 0x3d
     f50:	9e ad       	ldd	r25, Y+62	; 0x3e
     f52:	9a af       	std	Y+58, r25	; 0x3a
     f54:	89 af       	std	Y+57, r24	; 0x39
     f56:	89 ad       	ldd	r24, Y+57	; 0x39
     f58:	9a ad       	ldd	r25, Y+58	; 0x3a
     f5a:	01 97       	sbiw	r24, 0x01	; 1
     f5c:	f1 f7       	brne	.-4      	; 0xf5a <TASK_createNewPass+0x33a>
     f5e:	9a af       	std	Y+58, r25	; 0x3a
     f60:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(KeyDelay);
			i++;
     f62:	80 91 37 01 	lds	r24, 0x0137
     f66:	8f 5f       	subi	r24, 0xFF	; 255
     f68:	80 93 37 01 	sts	0x0137, r24
		;
	i = 0;
	LCD_clearScreen();
	LCD_displayString("plz reenter pass:");
	LCD_moveCursor(1, 0);
	while (i < PassLength) {
     f6c:	80 91 37 01 	lds	r24, 0x0137
     f70:	85 30       	cpi	r24, 0x05	; 5
     f72:	08 f4       	brcc	.+2      	; 0xf76 <TASK_createNewPass+0x356>
     f74:	5b cf       	rjmp	.-330    	; 0xe2c <TASK_createNewPass+0x20c>
			HMI_ECU_Password_2[i] = key;
			_delay_ms(KeyDelay);
			i++;
		}
	}
	while (KEYPAD_getPressedKey() != EnterButton)
     f76:	0e 94 5f 11 	call	0x22be	; 0x22be <KEYPAD_getPressedKey>
     f7a:	8d 30       	cpi	r24, 0x0D	; 13
     f7c:	e1 f7       	brne	.-8      	; 0xf76 <TASK_createNewPass+0x356>
		;
	LCD_clearScreen();
     f7e:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <LCD_clearScreen>
	for (int i = 0; i < PassLength; i++) {
     f82:	fe 01       	movw	r30, r28
     f84:	e9 5a       	subi	r30, 0xA9	; 169
     f86:	ff 4f       	sbci	r31, 0xFF	; 255
     f88:	11 82       	std	Z+1, r1	; 0x01
     f8a:	10 82       	st	Z, r1
     f8c:	89 c0       	rjmp	.+274    	; 0x10a0 <TASK_createNewPass+0x480>
		USART_sendByte(HMI_ECU_Password_1[i]);
     f8e:	fe 01       	movw	r30, r28
     f90:	e9 5a       	subi	r30, 0xA9	; 169
     f92:	ff 4f       	sbci	r31, 0xFF	; 255
     f94:	80 81       	ld	r24, Z
     f96:	91 81       	ldd	r25, Z+1	; 0x01
     f98:	fc 01       	movw	r30, r24
     f9a:	e7 5c       	subi	r30, 0xC7	; 199
     f9c:	fe 4f       	sbci	r31, 0xFE	; 254
     f9e:	80 81       	ld	r24, Z
     fa0:	0e 94 4c 19 	call	0x3298	; 0x3298 <USART_sendByte>
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	a8 e4       	ldi	r26, 0x48	; 72
     faa:	b2 e4       	ldi	r27, 0x42	; 66
     fac:	8d ab       	std	Y+53, r24	; 0x35
     fae:	9e ab       	std	Y+54, r25	; 0x36
     fb0:	af ab       	std	Y+55, r26	; 0x37
     fb2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fb4:	6d a9       	ldd	r22, Y+53	; 0x35
     fb6:	7e a9       	ldd	r23, Y+54	; 0x36
     fb8:	8f a9       	ldd	r24, Y+55	; 0x37
     fba:	98 ad       	ldd	r25, Y+56	; 0x38
     fbc:	20 e0       	ldi	r18, 0x00	; 0
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	4a ef       	ldi	r20, 0xFA	; 250
     fc2:	54 e4       	ldi	r21, 0x44	; 68
     fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fc8:	dc 01       	movw	r26, r24
     fca:	cb 01       	movw	r24, r22
     fcc:	89 ab       	std	Y+49, r24	; 0x31
     fce:	9a ab       	std	Y+50, r25	; 0x32
     fd0:	ab ab       	std	Y+51, r26	; 0x33
     fd2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     fd4:	69 a9       	ldd	r22, Y+49	; 0x31
     fd6:	7a a9       	ldd	r23, Y+50	; 0x32
     fd8:	8b a9       	ldd	r24, Y+51	; 0x33
     fda:	9c a9       	ldd	r25, Y+52	; 0x34
     fdc:	20 e0       	ldi	r18, 0x00	; 0
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	40 e8       	ldi	r20, 0x80	; 128
     fe2:	5f e3       	ldi	r21, 0x3F	; 63
     fe4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fe8:	88 23       	and	r24, r24
     fea:	2c f4       	brge	.+10     	; 0xff6 <TASK_createNewPass+0x3d6>
		__ticks = 1;
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	98 ab       	std	Y+48, r25	; 0x30
     ff2:	8f a7       	std	Y+47, r24	; 0x2f
     ff4:	3f c0       	rjmp	.+126    	; 0x1074 <TASK_createNewPass+0x454>
	else if (__tmp > 65535)
     ff6:	69 a9       	ldd	r22, Y+49	; 0x31
     ff8:	7a a9       	ldd	r23, Y+50	; 0x32
     ffa:	8b a9       	ldd	r24, Y+51	; 0x33
     ffc:	9c a9       	ldd	r25, Y+52	; 0x34
     ffe:	20 e0       	ldi	r18, 0x00	; 0
    1000:	3f ef       	ldi	r19, 0xFF	; 255
    1002:	4f e7       	ldi	r20, 0x7F	; 127
    1004:	57 e4       	ldi	r21, 0x47	; 71
    1006:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    100a:	18 16       	cp	r1, r24
    100c:	4c f5       	brge	.+82     	; 0x1060 <TASK_createNewPass+0x440>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    100e:	6d a9       	ldd	r22, Y+53	; 0x35
    1010:	7e a9       	ldd	r23, Y+54	; 0x36
    1012:	8f a9       	ldd	r24, Y+55	; 0x37
    1014:	98 ad       	ldd	r25, Y+56	; 0x38
    1016:	20 e0       	ldi	r18, 0x00	; 0
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	40 e2       	ldi	r20, 0x20	; 32
    101c:	51 e4       	ldi	r21, 0x41	; 65
    101e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1022:	dc 01       	movw	r26, r24
    1024:	cb 01       	movw	r24, r22
    1026:	bc 01       	movw	r22, r24
    1028:	cd 01       	movw	r24, r26
    102a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    102e:	dc 01       	movw	r26, r24
    1030:	cb 01       	movw	r24, r22
    1032:	98 ab       	std	Y+48, r25	; 0x30
    1034:	8f a7       	std	Y+47, r24	; 0x2f
    1036:	0f c0       	rjmp	.+30     	; 0x1056 <TASK_createNewPass+0x436>
    1038:	88 ec       	ldi	r24, 0xC8	; 200
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	9e a7       	std	Y+46, r25	; 0x2e
    103e:	8d a7       	std	Y+45, r24	; 0x2d
    1040:	8d a5       	ldd	r24, Y+45	; 0x2d
    1042:	9e a5       	ldd	r25, Y+46	; 0x2e
    1044:	01 97       	sbiw	r24, 0x01	; 1
    1046:	f1 f7       	brne	.-4      	; 0x1044 <TASK_createNewPass+0x424>
    1048:	9e a7       	std	Y+46, r25	; 0x2e
    104a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    104c:	8f a5       	ldd	r24, Y+47	; 0x2f
    104e:	98 a9       	ldd	r25, Y+48	; 0x30
    1050:	01 97       	sbiw	r24, 0x01	; 1
    1052:	98 ab       	std	Y+48, r25	; 0x30
    1054:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1056:	8f a5       	ldd	r24, Y+47	; 0x2f
    1058:	98 a9       	ldd	r25, Y+48	; 0x30
    105a:	00 97       	sbiw	r24, 0x00	; 0
    105c:	69 f7       	brne	.-38     	; 0x1038 <TASK_createNewPass+0x418>
    105e:	14 c0       	rjmp	.+40     	; 0x1088 <TASK_createNewPass+0x468>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1060:	69 a9       	ldd	r22, Y+49	; 0x31
    1062:	7a a9       	ldd	r23, Y+50	; 0x32
    1064:	8b a9       	ldd	r24, Y+51	; 0x33
    1066:	9c a9       	ldd	r25, Y+52	; 0x34
    1068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    106c:	dc 01       	movw	r26, r24
    106e:	cb 01       	movw	r24, r22
    1070:	98 ab       	std	Y+48, r25	; 0x30
    1072:	8f a7       	std	Y+47, r24	; 0x2f
    1074:	8f a5       	ldd	r24, Y+47	; 0x2f
    1076:	98 a9       	ldd	r25, Y+48	; 0x30
    1078:	9c a7       	std	Y+44, r25	; 0x2c
    107a:	8b a7       	std	Y+43, r24	; 0x2b
    107c:	8b a5       	ldd	r24, Y+43	; 0x2b
    107e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1080:	01 97       	sbiw	r24, 0x01	; 1
    1082:	f1 f7       	brne	.-4      	; 0x1080 <TASK_createNewPass+0x460>
    1084:	9c a7       	std	Y+44, r25	; 0x2c
    1086:	8b a7       	std	Y+43, r24	; 0x2b
		}
	}
	while (KEYPAD_getPressedKey() != EnterButton)
		;
	LCD_clearScreen();
	for (int i = 0; i < PassLength; i++) {
    1088:	de 01       	movw	r26, r28
    108a:	a9 5a       	subi	r26, 0xA9	; 169
    108c:	bf 4f       	sbci	r27, 0xFF	; 255
    108e:	fe 01       	movw	r30, r28
    1090:	e9 5a       	subi	r30, 0xA9	; 169
    1092:	ff 4f       	sbci	r31, 0xFF	; 255
    1094:	80 81       	ld	r24, Z
    1096:	91 81       	ldd	r25, Z+1	; 0x01
    1098:	01 96       	adiw	r24, 0x01	; 1
    109a:	11 96       	adiw	r26, 0x01	; 1
    109c:	9c 93       	st	X, r25
    109e:	8e 93       	st	-X, r24
    10a0:	fe 01       	movw	r30, r28
    10a2:	e9 5a       	subi	r30, 0xA9	; 169
    10a4:	ff 4f       	sbci	r31, 0xFF	; 255
    10a6:	80 81       	ld	r24, Z
    10a8:	91 81       	ldd	r25, Z+1	; 0x01
    10aa:	85 30       	cpi	r24, 0x05	; 5
    10ac:	91 05       	cpc	r25, r1
    10ae:	0c f4       	brge	.+2      	; 0x10b2 <TASK_createNewPass+0x492>
    10b0:	6e cf       	rjmp	.-292    	; 0xf8e <TASK_createNewPass+0x36e>
		USART_sendByte(HMI_ECU_Password_1[i]);
		_delay_ms(UsartDelay);
	}
	for (int i = 0; i < PassLength; i++) {
    10b2:	fe 01       	movw	r30, r28
    10b4:	eb 5a       	subi	r30, 0xAB	; 171
    10b6:	ff 4f       	sbci	r31, 0xFF	; 255
    10b8:	11 82       	std	Z+1, r1	; 0x01
    10ba:	10 82       	st	Z, r1
    10bc:	89 c0       	rjmp	.+274    	; 0x11d0 <TASK_createNewPass+0x5b0>
		USART_sendByte(HMI_ECU_Password_2[i]);
    10be:	fe 01       	movw	r30, r28
    10c0:	eb 5a       	subi	r30, 0xAB	; 171
    10c2:	ff 4f       	sbci	r31, 0xFF	; 255
    10c4:	80 81       	ld	r24, Z
    10c6:	91 81       	ldd	r25, Z+1	; 0x01
    10c8:	fc 01       	movw	r30, r24
    10ca:	ef 5c       	subi	r30, 0xCF	; 207
    10cc:	fe 4f       	sbci	r31, 0xFE	; 254
    10ce:	80 81       	ld	r24, Z
    10d0:	0e 94 4c 19 	call	0x3298	; 0x3298 <USART_sendByte>
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	a8 e4       	ldi	r26, 0x48	; 72
    10da:	b2 e4       	ldi	r27, 0x42	; 66
    10dc:	8f a3       	std	Y+39, r24	; 0x27
    10de:	98 a7       	std	Y+40, r25	; 0x28
    10e0:	a9 a7       	std	Y+41, r26	; 0x29
    10e2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10e4:	6f a1       	ldd	r22, Y+39	; 0x27
    10e6:	78 a5       	ldd	r23, Y+40	; 0x28
    10e8:	89 a5       	ldd	r24, Y+41	; 0x29
    10ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	4a ef       	ldi	r20, 0xFA	; 250
    10f2:	54 e4       	ldi	r21, 0x44	; 68
    10f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	8b a3       	std	Y+35, r24	; 0x23
    10fe:	9c a3       	std	Y+36, r25	; 0x24
    1100:	ad a3       	std	Y+37, r26	; 0x25
    1102:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1104:	6b a1       	ldd	r22, Y+35	; 0x23
    1106:	7c a1       	ldd	r23, Y+36	; 0x24
    1108:	8d a1       	ldd	r24, Y+37	; 0x25
    110a:	9e a1       	ldd	r25, Y+38	; 0x26
    110c:	20 e0       	ldi	r18, 0x00	; 0
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	40 e8       	ldi	r20, 0x80	; 128
    1112:	5f e3       	ldi	r21, 0x3F	; 63
    1114:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1118:	88 23       	and	r24, r24
    111a:	2c f4       	brge	.+10     	; 0x1126 <TASK_createNewPass+0x506>
		__ticks = 1;
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	9a a3       	std	Y+34, r25	; 0x22
    1122:	89 a3       	std	Y+33, r24	; 0x21
    1124:	3f c0       	rjmp	.+126    	; 0x11a4 <TASK_createNewPass+0x584>
	else if (__tmp > 65535)
    1126:	6b a1       	ldd	r22, Y+35	; 0x23
    1128:	7c a1       	ldd	r23, Y+36	; 0x24
    112a:	8d a1       	ldd	r24, Y+37	; 0x25
    112c:	9e a1       	ldd	r25, Y+38	; 0x26
    112e:	20 e0       	ldi	r18, 0x00	; 0
    1130:	3f ef       	ldi	r19, 0xFF	; 255
    1132:	4f e7       	ldi	r20, 0x7F	; 127
    1134:	57 e4       	ldi	r21, 0x47	; 71
    1136:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    113a:	18 16       	cp	r1, r24
    113c:	4c f5       	brge	.+82     	; 0x1190 <TASK_createNewPass+0x570>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    113e:	6f a1       	ldd	r22, Y+39	; 0x27
    1140:	78 a5       	ldd	r23, Y+40	; 0x28
    1142:	89 a5       	ldd	r24, Y+41	; 0x29
    1144:	9a a5       	ldd	r25, Y+42	; 0x2a
    1146:	20 e0       	ldi	r18, 0x00	; 0
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	40 e2       	ldi	r20, 0x20	; 32
    114c:	51 e4       	ldi	r21, 0x41	; 65
    114e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1152:	dc 01       	movw	r26, r24
    1154:	cb 01       	movw	r24, r22
    1156:	bc 01       	movw	r22, r24
    1158:	cd 01       	movw	r24, r26
    115a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    115e:	dc 01       	movw	r26, r24
    1160:	cb 01       	movw	r24, r22
    1162:	9a a3       	std	Y+34, r25	; 0x22
    1164:	89 a3       	std	Y+33, r24	; 0x21
    1166:	0f c0       	rjmp	.+30     	; 0x1186 <TASK_createNewPass+0x566>
    1168:	88 ec       	ldi	r24, 0xC8	; 200
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	98 a3       	std	Y+32, r25	; 0x20
    116e:	8f 8f       	std	Y+31, r24	; 0x1f
    1170:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1172:	98 a1       	ldd	r25, Y+32	; 0x20
    1174:	01 97       	sbiw	r24, 0x01	; 1
    1176:	f1 f7       	brne	.-4      	; 0x1174 <TASK_createNewPass+0x554>
    1178:	98 a3       	std	Y+32, r25	; 0x20
    117a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    117c:	89 a1       	ldd	r24, Y+33	; 0x21
    117e:	9a a1       	ldd	r25, Y+34	; 0x22
    1180:	01 97       	sbiw	r24, 0x01	; 1
    1182:	9a a3       	std	Y+34, r25	; 0x22
    1184:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1186:	89 a1       	ldd	r24, Y+33	; 0x21
    1188:	9a a1       	ldd	r25, Y+34	; 0x22
    118a:	00 97       	sbiw	r24, 0x00	; 0
    118c:	69 f7       	brne	.-38     	; 0x1168 <TASK_createNewPass+0x548>
    118e:	14 c0       	rjmp	.+40     	; 0x11b8 <TASK_createNewPass+0x598>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1190:	6b a1       	ldd	r22, Y+35	; 0x23
    1192:	7c a1       	ldd	r23, Y+36	; 0x24
    1194:	8d a1       	ldd	r24, Y+37	; 0x25
    1196:	9e a1       	ldd	r25, Y+38	; 0x26
    1198:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    119c:	dc 01       	movw	r26, r24
    119e:	cb 01       	movw	r24, r22
    11a0:	9a a3       	std	Y+34, r25	; 0x22
    11a2:	89 a3       	std	Y+33, r24	; 0x21
    11a4:	89 a1       	ldd	r24, Y+33	; 0x21
    11a6:	9a a1       	ldd	r25, Y+34	; 0x22
    11a8:	9e 8f       	std	Y+30, r25	; 0x1e
    11aa:	8d 8f       	std	Y+29, r24	; 0x1d
    11ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11ae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11b0:	01 97       	sbiw	r24, 0x01	; 1
    11b2:	f1 f7       	brne	.-4      	; 0x11b0 <TASK_createNewPass+0x590>
    11b4:	9e 8f       	std	Y+30, r25	; 0x1e
    11b6:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_clearScreen();
	for (int i = 0; i < PassLength; i++) {
		USART_sendByte(HMI_ECU_Password_1[i]);
		_delay_ms(UsartDelay);
	}
	for (int i = 0; i < PassLength; i++) {
    11b8:	de 01       	movw	r26, r28
    11ba:	ab 5a       	subi	r26, 0xAB	; 171
    11bc:	bf 4f       	sbci	r27, 0xFF	; 255
    11be:	fe 01       	movw	r30, r28
    11c0:	eb 5a       	subi	r30, 0xAB	; 171
    11c2:	ff 4f       	sbci	r31, 0xFF	; 255
    11c4:	80 81       	ld	r24, Z
    11c6:	91 81       	ldd	r25, Z+1	; 0x01
    11c8:	01 96       	adiw	r24, 0x01	; 1
    11ca:	11 96       	adiw	r26, 0x01	; 1
    11cc:	9c 93       	st	X, r25
    11ce:	8e 93       	st	-X, r24
    11d0:	fe 01       	movw	r30, r28
    11d2:	eb 5a       	subi	r30, 0xAB	; 171
    11d4:	ff 4f       	sbci	r31, 0xFF	; 255
    11d6:	80 81       	ld	r24, Z
    11d8:	91 81       	ldd	r25, Z+1	; 0x01
    11da:	85 30       	cpi	r24, 0x05	; 5
    11dc:	91 05       	cpc	r25, r1
    11de:	0c f4       	brge	.+2      	; 0x11e2 <TASK_createNewPass+0x5c2>
    11e0:	6e cf       	rjmp	.-292    	; 0x10be <TASK_createNewPass+0x49e>
		USART_sendByte(HMI_ECU_Password_2[i]);
		_delay_ms(UsartDelay);
	}
	flag = USART_recieveByte();
    11e2:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <USART_recieveByte>
    11e6:	80 93 36 01 	sts	0x0136, r24
	if (flag == 1) {
    11ea:	80 91 36 01 	lds	r24, 0x0136
    11ee:	81 30       	cpi	r24, 0x01	; 1
    11f0:	09 f0       	breq	.+2      	; 0x11f4 <TASK_createNewPass+0x5d4>
    11f2:	77 c0       	rjmp	.+238    	; 0x12e2 <TASK_createNewPass+0x6c2>
		LCD_displayString("Matching...");
    11f4:	82 e8       	ldi	r24, 0x82	; 130
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <LCD_displayString>
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	a8 e4       	ldi	r26, 0x48	; 72
    1202:	b4 e4       	ldi	r27, 0x44	; 68
    1204:	89 8f       	std	Y+25, r24	; 0x19
    1206:	9a 8f       	std	Y+26, r25	; 0x1a
    1208:	ab 8f       	std	Y+27, r26	; 0x1b
    120a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    120c:	69 8d       	ldd	r22, Y+25	; 0x19
    120e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1210:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1212:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	4a ef       	ldi	r20, 0xFA	; 250
    121a:	54 e4       	ldi	r21, 0x44	; 68
    121c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1220:	dc 01       	movw	r26, r24
    1222:	cb 01       	movw	r24, r22
    1224:	8d 8b       	std	Y+21, r24	; 0x15
    1226:	9e 8b       	std	Y+22, r25	; 0x16
    1228:	af 8b       	std	Y+23, r26	; 0x17
    122a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    122c:	6d 89       	ldd	r22, Y+21	; 0x15
    122e:	7e 89       	ldd	r23, Y+22	; 0x16
    1230:	8f 89       	ldd	r24, Y+23	; 0x17
    1232:	98 8d       	ldd	r25, Y+24	; 0x18
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	40 e8       	ldi	r20, 0x80	; 128
    123a:	5f e3       	ldi	r21, 0x3F	; 63
    123c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1240:	88 23       	and	r24, r24
    1242:	2c f4       	brge	.+10     	; 0x124e <TASK_createNewPass+0x62e>
		__ticks = 1;
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	9c 8b       	std	Y+20, r25	; 0x14
    124a:	8b 8b       	std	Y+19, r24	; 0x13
    124c:	3f c0       	rjmp	.+126    	; 0x12cc <TASK_createNewPass+0x6ac>
	else if (__tmp > 65535)
    124e:	6d 89       	ldd	r22, Y+21	; 0x15
    1250:	7e 89       	ldd	r23, Y+22	; 0x16
    1252:	8f 89       	ldd	r24, Y+23	; 0x17
    1254:	98 8d       	ldd	r25, Y+24	; 0x18
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	3f ef       	ldi	r19, 0xFF	; 255
    125a:	4f e7       	ldi	r20, 0x7F	; 127
    125c:	57 e4       	ldi	r21, 0x47	; 71
    125e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1262:	18 16       	cp	r1, r24
    1264:	4c f5       	brge	.+82     	; 0x12b8 <TASK_createNewPass+0x698>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1266:	69 8d       	ldd	r22, Y+25	; 0x19
    1268:	7a 8d       	ldd	r23, Y+26	; 0x1a
    126a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    126c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	40 e2       	ldi	r20, 0x20	; 32
    1274:	51 e4       	ldi	r21, 0x41	; 65
    1276:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    127a:	dc 01       	movw	r26, r24
    127c:	cb 01       	movw	r24, r22
    127e:	bc 01       	movw	r22, r24
    1280:	cd 01       	movw	r24, r26
    1282:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1286:	dc 01       	movw	r26, r24
    1288:	cb 01       	movw	r24, r22
    128a:	9c 8b       	std	Y+20, r25	; 0x14
    128c:	8b 8b       	std	Y+19, r24	; 0x13
    128e:	0f c0       	rjmp	.+30     	; 0x12ae <TASK_createNewPass+0x68e>
    1290:	88 ec       	ldi	r24, 0xC8	; 200
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	9a 8b       	std	Y+18, r25	; 0x12
    1296:	89 8b       	std	Y+17, r24	; 0x11
    1298:	89 89       	ldd	r24, Y+17	; 0x11
    129a:	9a 89       	ldd	r25, Y+18	; 0x12
    129c:	01 97       	sbiw	r24, 0x01	; 1
    129e:	f1 f7       	brne	.-4      	; 0x129c <TASK_createNewPass+0x67c>
    12a0:	9a 8b       	std	Y+18, r25	; 0x12
    12a2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12a4:	8b 89       	ldd	r24, Y+19	; 0x13
    12a6:	9c 89       	ldd	r25, Y+20	; 0x14
    12a8:	01 97       	sbiw	r24, 0x01	; 1
    12aa:	9c 8b       	std	Y+20, r25	; 0x14
    12ac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ae:	8b 89       	ldd	r24, Y+19	; 0x13
    12b0:	9c 89       	ldd	r25, Y+20	; 0x14
    12b2:	00 97       	sbiw	r24, 0x00	; 0
    12b4:	69 f7       	brne	.-38     	; 0x1290 <TASK_createNewPass+0x670>
    12b6:	8d c0       	rjmp	.+282    	; 0x13d2 <TASK_createNewPass+0x7b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12b8:	6d 89       	ldd	r22, Y+21	; 0x15
    12ba:	7e 89       	ldd	r23, Y+22	; 0x16
    12bc:	8f 89       	ldd	r24, Y+23	; 0x17
    12be:	98 8d       	ldd	r25, Y+24	; 0x18
    12c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12c4:	dc 01       	movw	r26, r24
    12c6:	cb 01       	movw	r24, r22
    12c8:	9c 8b       	std	Y+20, r25	; 0x14
    12ca:	8b 8b       	std	Y+19, r24	; 0x13
    12cc:	8b 89       	ldd	r24, Y+19	; 0x13
    12ce:	9c 89       	ldd	r25, Y+20	; 0x14
    12d0:	98 8b       	std	Y+16, r25	; 0x10
    12d2:	8f 87       	std	Y+15, r24	; 0x0f
    12d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    12d6:	98 89       	ldd	r25, Y+16	; 0x10
    12d8:	01 97       	sbiw	r24, 0x01	; 1
    12da:	f1 f7       	brne	.-4      	; 0x12d8 <TASK_createNewPass+0x6b8>
    12dc:	98 8b       	std	Y+16, r25	; 0x10
    12de:	8f 87       	std	Y+15, r24	; 0x0f
    12e0:	78 c0       	rjmp	.+240    	; 0x13d2 <TASK_createNewPass+0x7b2>
		_delay_ms(NormalDelay);
	} else {
		LCD_displayString("Not Matching...");
    12e2:	8e e8       	ldi	r24, 0x8E	; 142
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <LCD_displayString>
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	a8 e4       	ldi	r26, 0x48	; 72
    12f0:	b4 e4       	ldi	r27, 0x44	; 68
    12f2:	8b 87       	std	Y+11, r24	; 0x0b
    12f4:	9c 87       	std	Y+12, r25	; 0x0c
    12f6:	ad 87       	std	Y+13, r26	; 0x0d
    12f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    12fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    12fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1300:	9e 85       	ldd	r25, Y+14	; 0x0e
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	4a ef       	ldi	r20, 0xFA	; 250
    1308:	54 e4       	ldi	r21, 0x44	; 68
    130a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    130e:	dc 01       	movw	r26, r24
    1310:	cb 01       	movw	r24, r22
    1312:	8f 83       	std	Y+7, r24	; 0x07
    1314:	98 87       	std	Y+8, r25	; 0x08
    1316:	a9 87       	std	Y+9, r26	; 0x09
    1318:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    131a:	6f 81       	ldd	r22, Y+7	; 0x07
    131c:	78 85       	ldd	r23, Y+8	; 0x08
    131e:	89 85       	ldd	r24, Y+9	; 0x09
    1320:	9a 85       	ldd	r25, Y+10	; 0x0a
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	40 e8       	ldi	r20, 0x80	; 128
    1328:	5f e3       	ldi	r21, 0x3F	; 63
    132a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    132e:	88 23       	and	r24, r24
    1330:	2c f4       	brge	.+10     	; 0x133c <TASK_createNewPass+0x71c>
		__ticks = 1;
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	9e 83       	std	Y+6, r25	; 0x06
    1338:	8d 83       	std	Y+5, r24	; 0x05
    133a:	3f c0       	rjmp	.+126    	; 0x13ba <TASK_createNewPass+0x79a>
	else if (__tmp > 65535)
    133c:	6f 81       	ldd	r22, Y+7	; 0x07
    133e:	78 85       	ldd	r23, Y+8	; 0x08
    1340:	89 85       	ldd	r24, Y+9	; 0x09
    1342:	9a 85       	ldd	r25, Y+10	; 0x0a
    1344:	20 e0       	ldi	r18, 0x00	; 0
    1346:	3f ef       	ldi	r19, 0xFF	; 255
    1348:	4f e7       	ldi	r20, 0x7F	; 127
    134a:	57 e4       	ldi	r21, 0x47	; 71
    134c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1350:	18 16       	cp	r1, r24
    1352:	4c f5       	brge	.+82     	; 0x13a6 <TASK_createNewPass+0x786>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1354:	6b 85       	ldd	r22, Y+11	; 0x0b
    1356:	7c 85       	ldd	r23, Y+12	; 0x0c
    1358:	8d 85       	ldd	r24, Y+13	; 0x0d
    135a:	9e 85       	ldd	r25, Y+14	; 0x0e
    135c:	20 e0       	ldi	r18, 0x00	; 0
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	40 e2       	ldi	r20, 0x20	; 32
    1362:	51 e4       	ldi	r21, 0x41	; 65
    1364:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1368:	dc 01       	movw	r26, r24
    136a:	cb 01       	movw	r24, r22
    136c:	bc 01       	movw	r22, r24
    136e:	cd 01       	movw	r24, r26
    1370:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1374:	dc 01       	movw	r26, r24
    1376:	cb 01       	movw	r24, r22
    1378:	9e 83       	std	Y+6, r25	; 0x06
    137a:	8d 83       	std	Y+5, r24	; 0x05
    137c:	0f c0       	rjmp	.+30     	; 0x139c <TASK_createNewPass+0x77c>
    137e:	88 ec       	ldi	r24, 0xC8	; 200
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	9c 83       	std	Y+4, r25	; 0x04
    1384:	8b 83       	std	Y+3, r24	; 0x03
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	9c 81       	ldd	r25, Y+4	; 0x04
    138a:	01 97       	sbiw	r24, 0x01	; 1
    138c:	f1 f7       	brne	.-4      	; 0x138a <TASK_createNewPass+0x76a>
    138e:	9c 83       	std	Y+4, r25	; 0x04
    1390:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1392:	8d 81       	ldd	r24, Y+5	; 0x05
    1394:	9e 81       	ldd	r25, Y+6	; 0x06
    1396:	01 97       	sbiw	r24, 0x01	; 1
    1398:	9e 83       	std	Y+6, r25	; 0x06
    139a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    139c:	8d 81       	ldd	r24, Y+5	; 0x05
    139e:	9e 81       	ldd	r25, Y+6	; 0x06
    13a0:	00 97       	sbiw	r24, 0x00	; 0
    13a2:	69 f7       	brne	.-38     	; 0x137e <TASK_createNewPass+0x75e>
    13a4:	14 c0       	rjmp	.+40     	; 0x13ce <TASK_createNewPass+0x7ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13a6:	6f 81       	ldd	r22, Y+7	; 0x07
    13a8:	78 85       	ldd	r23, Y+8	; 0x08
    13aa:	89 85       	ldd	r24, Y+9	; 0x09
    13ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13b2:	dc 01       	movw	r26, r24
    13b4:	cb 01       	movw	r24, r22
    13b6:	9e 83       	std	Y+6, r25	; 0x06
    13b8:	8d 83       	std	Y+5, r24	; 0x05
    13ba:	8d 81       	ldd	r24, Y+5	; 0x05
    13bc:	9e 81       	ldd	r25, Y+6	; 0x06
    13be:	9a 83       	std	Y+2, r25	; 0x02
    13c0:	89 83       	std	Y+1, r24	; 0x01
    13c2:	89 81       	ldd	r24, Y+1	; 0x01
    13c4:	9a 81       	ldd	r25, Y+2	; 0x02
    13c6:	01 97       	sbiw	r24, 0x01	; 1
    13c8:	f1 f7       	brne	.-4      	; 0x13c6 <TASK_createNewPass+0x7a6>
    13ca:	9a 83       	std	Y+2, r25	; 0x02
    13cc:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(NormalDelay);
		TASK_createNewPass();
    13ce:	0e 94 10 06 	call	0xc20	; 0xc20 <TASK_createNewPass>
	}
}
    13d2:	c8 5a       	subi	r28, 0xA8	; 168
    13d4:	df 4f       	sbci	r29, 0xFF	; 255
    13d6:	0f b6       	in	r0, 0x3f	; 63
    13d8:	f8 94       	cli
    13da:	de bf       	out	0x3e, r29	; 62
    13dc:	0f be       	out	0x3f, r0	; 63
    13de:	cd bf       	out	0x3d, r28	; 61
    13e0:	cf 91       	pop	r28
    13e2:	df 91       	pop	r29
    13e4:	1f 91       	pop	r17
    13e6:	0f 91       	pop	r16
    13e8:	08 95       	ret

000013ea <TASK_showOptions>:
 * Description :
 * Function responsible for showing the option of the user.
 * 1-open the door.
 * 2-change the password.
 */
void TASK_showOptions(void) {
    13ea:	df 93       	push	r29
    13ec:	cf 93       	push	r28
    13ee:	cd b7       	in	r28, 0x3d	; 61
    13f0:	de b7       	in	r29, 0x3e	; 62
    13f2:	2e 97       	sbiw	r28, 0x0e	; 14
    13f4:	0f b6       	in	r0, 0x3f	; 63
    13f6:	f8 94       	cli
    13f8:	de bf       	out	0x3e, r29	; 62
    13fa:	0f be       	out	0x3f, r0	; 63
    13fc:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    13fe:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <LCD_clearScreen>
	LCD_moveCursor(0, 0);
    1402:	80 e0       	ldi	r24, 0x00	; 0
    1404:	60 e0       	ldi	r22, 0x00	; 0
    1406:	0e 94 40 17 	call	0x2e80	; 0x2e80 <LCD_moveCursor>
	LCD_displayString("+ : Open Door");
    140a:	8e e9       	ldi	r24, 0x9E	; 158
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <LCD_displayString>
	LCD_moveCursor(1, 0);
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	60 e0       	ldi	r22, 0x00	; 0
    1416:	0e 94 40 17 	call	0x2e80	; 0x2e80 <LCD_moveCursor>
	LCD_displayString("- : Change Pass");
    141a:	8c ea       	ldi	r24, 0xAC	; 172
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <LCD_displayString>
	key = KEYPAD_getPressedKey();
    1422:	0e 94 5f 11 	call	0x22be	; 0x22be <KEYPAD_getPressedKey>
    1426:	80 93 38 01 	sts	0x0138, r24
	if (key == '-' || key == '+') {
    142a:	80 91 38 01 	lds	r24, 0x0138
    142e:	8d 32       	cpi	r24, 0x2D	; 45
    1430:	21 f0       	breq	.+8      	; 0x143a <TASK_showOptions+0x50>
    1432:	80 91 38 01 	lds	r24, 0x0138
    1436:	8b 32       	cpi	r24, 0x2B	; 43
    1438:	71 f4       	brne	.+28     	; 0x1456 <TASK_showOptions+0x6c>
		USART_sendByte(key);
    143a:	80 91 38 01 	lds	r24, 0x0138
    143e:	0e 94 4c 19 	call	0x3298	; 0x3298 <USART_sendByte>
		if (key == '-') {
    1442:	80 91 38 01 	lds	r24, 0x0138
    1446:	8d 32       	cpi	r24, 0x2D	; 45
    1448:	19 f4       	brne	.+6      	; 0x1450 <TASK_showOptions+0x66>
			TASK_changePass();
    144a:	0e 94 a2 0c 	call	0x1944	; 0x1944 <TASK_changePass>
    144e:	7d c0       	rjmp	.+250    	; 0x154a <TASK_showOptions+0x160>
		} else {
			TASK_openDoor();
    1450:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <TASK_openDoor>
    1454:	7a c0       	rjmp	.+244    	; 0x154a <TASK_showOptions+0x160>
		}
	} else {
		LCD_clearScreen();
    1456:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <LCD_clearScreen>
		LCD_displayString("Enter Valid Key");
    145a:	8c eb       	ldi	r24, 0xBC	; 188
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <LCD_displayString>
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	a8 e4       	ldi	r26, 0x48	; 72
    1468:	b4 e4       	ldi	r27, 0x44	; 68
    146a:	8b 87       	std	Y+11, r24	; 0x0b
    146c:	9c 87       	std	Y+12, r25	; 0x0c
    146e:	ad 87       	std	Y+13, r26	; 0x0d
    1470:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1472:	6b 85       	ldd	r22, Y+11	; 0x0b
    1474:	7c 85       	ldd	r23, Y+12	; 0x0c
    1476:	8d 85       	ldd	r24, Y+13	; 0x0d
    1478:	9e 85       	ldd	r25, Y+14	; 0x0e
    147a:	20 e0       	ldi	r18, 0x00	; 0
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	4a ef       	ldi	r20, 0xFA	; 250
    1480:	54 e4       	ldi	r21, 0x44	; 68
    1482:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1486:	dc 01       	movw	r26, r24
    1488:	cb 01       	movw	r24, r22
    148a:	8f 83       	std	Y+7, r24	; 0x07
    148c:	98 87       	std	Y+8, r25	; 0x08
    148e:	a9 87       	std	Y+9, r26	; 0x09
    1490:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1492:	6f 81       	ldd	r22, Y+7	; 0x07
    1494:	78 85       	ldd	r23, Y+8	; 0x08
    1496:	89 85       	ldd	r24, Y+9	; 0x09
    1498:	9a 85       	ldd	r25, Y+10	; 0x0a
    149a:	20 e0       	ldi	r18, 0x00	; 0
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	40 e8       	ldi	r20, 0x80	; 128
    14a0:	5f e3       	ldi	r21, 0x3F	; 63
    14a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14a6:	88 23       	and	r24, r24
    14a8:	2c f4       	brge	.+10     	; 0x14b4 <TASK_showOptions+0xca>
		__ticks = 1;
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	9e 83       	std	Y+6, r25	; 0x06
    14b0:	8d 83       	std	Y+5, r24	; 0x05
    14b2:	3f c0       	rjmp	.+126    	; 0x1532 <TASK_showOptions+0x148>
	else if (__tmp > 65535)
    14b4:	6f 81       	ldd	r22, Y+7	; 0x07
    14b6:	78 85       	ldd	r23, Y+8	; 0x08
    14b8:	89 85       	ldd	r24, Y+9	; 0x09
    14ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	3f ef       	ldi	r19, 0xFF	; 255
    14c0:	4f e7       	ldi	r20, 0x7F	; 127
    14c2:	57 e4       	ldi	r21, 0x47	; 71
    14c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14c8:	18 16       	cp	r1, r24
    14ca:	4c f5       	brge	.+82     	; 0x151e <TASK_showOptions+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    14ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    14d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    14d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	40 e2       	ldi	r20, 0x20	; 32
    14da:	51 e4       	ldi	r21, 0x41	; 65
    14dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e0:	dc 01       	movw	r26, r24
    14e2:	cb 01       	movw	r24, r22
    14e4:	bc 01       	movw	r22, r24
    14e6:	cd 01       	movw	r24, r26
    14e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ec:	dc 01       	movw	r26, r24
    14ee:	cb 01       	movw	r24, r22
    14f0:	9e 83       	std	Y+6, r25	; 0x06
    14f2:	8d 83       	std	Y+5, r24	; 0x05
    14f4:	0f c0       	rjmp	.+30     	; 0x1514 <TASK_showOptions+0x12a>
    14f6:	88 ec       	ldi	r24, 0xC8	; 200
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	9c 83       	std	Y+4, r25	; 0x04
    14fc:	8b 83       	std	Y+3, r24	; 0x03
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	9c 81       	ldd	r25, Y+4	; 0x04
    1502:	01 97       	sbiw	r24, 0x01	; 1
    1504:	f1 f7       	brne	.-4      	; 0x1502 <TASK_showOptions+0x118>
    1506:	9c 83       	std	Y+4, r25	; 0x04
    1508:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    150a:	8d 81       	ldd	r24, Y+5	; 0x05
    150c:	9e 81       	ldd	r25, Y+6	; 0x06
    150e:	01 97       	sbiw	r24, 0x01	; 1
    1510:	9e 83       	std	Y+6, r25	; 0x06
    1512:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1514:	8d 81       	ldd	r24, Y+5	; 0x05
    1516:	9e 81       	ldd	r25, Y+6	; 0x06
    1518:	00 97       	sbiw	r24, 0x00	; 0
    151a:	69 f7       	brne	.-38     	; 0x14f6 <TASK_showOptions+0x10c>
    151c:	14 c0       	rjmp	.+40     	; 0x1546 <TASK_showOptions+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    151e:	6f 81       	ldd	r22, Y+7	; 0x07
    1520:	78 85       	ldd	r23, Y+8	; 0x08
    1522:	89 85       	ldd	r24, Y+9	; 0x09
    1524:	9a 85       	ldd	r25, Y+10	; 0x0a
    1526:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    152a:	dc 01       	movw	r26, r24
    152c:	cb 01       	movw	r24, r22
    152e:	9e 83       	std	Y+6, r25	; 0x06
    1530:	8d 83       	std	Y+5, r24	; 0x05
    1532:	8d 81       	ldd	r24, Y+5	; 0x05
    1534:	9e 81       	ldd	r25, Y+6	; 0x06
    1536:	9a 83       	std	Y+2, r25	; 0x02
    1538:	89 83       	std	Y+1, r24	; 0x01
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	9a 81       	ldd	r25, Y+2	; 0x02
    153e:	01 97       	sbiw	r24, 0x01	; 1
    1540:	f1 f7       	brne	.-4      	; 0x153e <TASK_showOptions+0x154>
    1542:	9a 83       	std	Y+2, r25	; 0x02
    1544:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(NormalDelay);
		TASK_showOptions();
    1546:	0e 94 f5 09 	call	0x13ea	; 0x13ea <TASK_showOptions>
	}
}
    154a:	2e 96       	adiw	r28, 0x0e	; 14
    154c:	0f b6       	in	r0, 0x3f	; 63
    154e:	f8 94       	cli
    1550:	de bf       	out	0x3e, r29	; 62
    1552:	0f be       	out	0x3f, r0	; 63
    1554:	cd bf       	out	0x3d, r28	; 61
    1556:	cf 91       	pop	r28
    1558:	df 91       	pop	r29
    155a:	08 95       	ret

0000155c <TASK_checkPass>:
/*
 * Description :
 * Helper Function responsible for checking the sent password to the given in the eeprom.
 */
void TASK_checkPass() {
    155c:	df 93       	push	r29
    155e:	cf 93       	push	r28
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
    1564:	a3 97       	sbiw	r28, 0x23	; 35
    1566:	0f b6       	in	r0, 0x3f	; 63
    1568:	f8 94       	cli
    156a:	de bf       	out	0x3e, r29	; 62
    156c:	0f be       	out	0x3f, r0	; 63
    156e:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    1570:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <LCD_clearScreen>
	uint8 HMI_ECU_Password[PassLength];
	LCD_displayString("plz enter pass:");
    1574:	80 e6       	ldi	r24, 0x60	; 96
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <LCD_displayString>
	LCD_moveCursor(1, 0);
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	60 e0       	ldi	r22, 0x00	; 0
    1580:	0e 94 40 17 	call	0x2e80	; 0x2e80 <LCD_moveCursor>
	i = key = 0;
    1584:	10 92 38 01 	sts	0x0138, r1
    1588:	80 91 38 01 	lds	r24, 0x0138
    158c:	80 93 37 01 	sts	0x0137, r24
    1590:	8f c0       	rjmp	.+286    	; 0x16b0 <TASK_checkPass+0x154>
	while (i < PassLength) {
		key = KEYPAD_getPressedKey();
    1592:	0e 94 5f 11 	call	0x22be	; 0x22be <KEYPAD_getPressedKey>
    1596:	80 93 38 01 	sts	0x0138, r24
		if (key >= 0 && key <= 9) {
    159a:	80 91 38 01 	lds	r24, 0x0138
    159e:	8a 30       	cpi	r24, 0x0A	; 10
    15a0:	08 f0       	brcs	.+2      	; 0x15a4 <TASK_checkPass+0x48>
    15a2:	86 c0       	rjmp	.+268    	; 0x16b0 <TASK_checkPass+0x154>
			LCD_displayCharacter('*');
    15a4:	8a e2       	ldi	r24, 0x2A	; 42
    15a6:	0e 94 46 14 	call	0x288c	; 0x288c <LCD_displayCharacter>
			HMI_ECU_Password[i] = key;
    15aa:	80 91 37 01 	lds	r24, 0x0137
    15ae:	28 2f       	mov	r18, r24
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	40 91 38 01 	lds	r20, 0x0138
    15b6:	ce 01       	movw	r24, r28
    15b8:	4f 96       	adiw	r24, 0x1f	; 31
    15ba:	fc 01       	movw	r30, r24
    15bc:	e2 0f       	add	r30, r18
    15be:	f3 1f       	adc	r31, r19
    15c0:	40 83       	st	Z, r20
    15c2:	80 e0       	ldi	r24, 0x00	; 0
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	aa ef       	ldi	r26, 0xFA	; 250
    15c8:	b3 e4       	ldi	r27, 0x43	; 67
    15ca:	89 8f       	std	Y+25, r24	; 0x19
    15cc:	9a 8f       	std	Y+26, r25	; 0x1a
    15ce:	ab 8f       	std	Y+27, r26	; 0x1b
    15d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15d2:	69 8d       	ldd	r22, Y+25	; 0x19
    15d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15da:	20 e0       	ldi	r18, 0x00	; 0
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	4a ef       	ldi	r20, 0xFA	; 250
    15e0:	54 e4       	ldi	r21, 0x44	; 68
    15e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e6:	dc 01       	movw	r26, r24
    15e8:	cb 01       	movw	r24, r22
    15ea:	8d 8b       	std	Y+21, r24	; 0x15
    15ec:	9e 8b       	std	Y+22, r25	; 0x16
    15ee:	af 8b       	std	Y+23, r26	; 0x17
    15f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15f2:	6d 89       	ldd	r22, Y+21	; 0x15
    15f4:	7e 89       	ldd	r23, Y+22	; 0x16
    15f6:	8f 89       	ldd	r24, Y+23	; 0x17
    15f8:	98 8d       	ldd	r25, Y+24	; 0x18
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	40 e8       	ldi	r20, 0x80	; 128
    1600:	5f e3       	ldi	r21, 0x3F	; 63
    1602:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1606:	88 23       	and	r24, r24
    1608:	2c f4       	brge	.+10     	; 0x1614 <TASK_checkPass+0xb8>
		__ticks = 1;
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	9c 8b       	std	Y+20, r25	; 0x14
    1610:	8b 8b       	std	Y+19, r24	; 0x13
    1612:	3f c0       	rjmp	.+126    	; 0x1692 <TASK_checkPass+0x136>
	else if (__tmp > 65535)
    1614:	6d 89       	ldd	r22, Y+21	; 0x15
    1616:	7e 89       	ldd	r23, Y+22	; 0x16
    1618:	8f 89       	ldd	r24, Y+23	; 0x17
    161a:	98 8d       	ldd	r25, Y+24	; 0x18
    161c:	20 e0       	ldi	r18, 0x00	; 0
    161e:	3f ef       	ldi	r19, 0xFF	; 255
    1620:	4f e7       	ldi	r20, 0x7F	; 127
    1622:	57 e4       	ldi	r21, 0x47	; 71
    1624:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1628:	18 16       	cp	r1, r24
    162a:	4c f5       	brge	.+82     	; 0x167e <TASK_checkPass+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    162c:	69 8d       	ldd	r22, Y+25	; 0x19
    162e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1630:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1632:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	40 e2       	ldi	r20, 0x20	; 32
    163a:	51 e4       	ldi	r21, 0x41	; 65
    163c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1640:	dc 01       	movw	r26, r24
    1642:	cb 01       	movw	r24, r22
    1644:	bc 01       	movw	r22, r24
    1646:	cd 01       	movw	r24, r26
    1648:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    164c:	dc 01       	movw	r26, r24
    164e:	cb 01       	movw	r24, r22
    1650:	9c 8b       	std	Y+20, r25	; 0x14
    1652:	8b 8b       	std	Y+19, r24	; 0x13
    1654:	0f c0       	rjmp	.+30     	; 0x1674 <TASK_checkPass+0x118>
    1656:	88 ec       	ldi	r24, 0xC8	; 200
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	9a 8b       	std	Y+18, r25	; 0x12
    165c:	89 8b       	std	Y+17, r24	; 0x11
    165e:	89 89       	ldd	r24, Y+17	; 0x11
    1660:	9a 89       	ldd	r25, Y+18	; 0x12
    1662:	01 97       	sbiw	r24, 0x01	; 1
    1664:	f1 f7       	brne	.-4      	; 0x1662 <TASK_checkPass+0x106>
    1666:	9a 8b       	std	Y+18, r25	; 0x12
    1668:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    166a:	8b 89       	ldd	r24, Y+19	; 0x13
    166c:	9c 89       	ldd	r25, Y+20	; 0x14
    166e:	01 97       	sbiw	r24, 0x01	; 1
    1670:	9c 8b       	std	Y+20, r25	; 0x14
    1672:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1674:	8b 89       	ldd	r24, Y+19	; 0x13
    1676:	9c 89       	ldd	r25, Y+20	; 0x14
    1678:	00 97       	sbiw	r24, 0x00	; 0
    167a:	69 f7       	brne	.-38     	; 0x1656 <TASK_checkPass+0xfa>
    167c:	14 c0       	rjmp	.+40     	; 0x16a6 <TASK_checkPass+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    167e:	6d 89       	ldd	r22, Y+21	; 0x15
    1680:	7e 89       	ldd	r23, Y+22	; 0x16
    1682:	8f 89       	ldd	r24, Y+23	; 0x17
    1684:	98 8d       	ldd	r25, Y+24	; 0x18
    1686:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    168a:	dc 01       	movw	r26, r24
    168c:	cb 01       	movw	r24, r22
    168e:	9c 8b       	std	Y+20, r25	; 0x14
    1690:	8b 8b       	std	Y+19, r24	; 0x13
    1692:	8b 89       	ldd	r24, Y+19	; 0x13
    1694:	9c 89       	ldd	r25, Y+20	; 0x14
    1696:	98 8b       	std	Y+16, r25	; 0x10
    1698:	8f 87       	std	Y+15, r24	; 0x0f
    169a:	8f 85       	ldd	r24, Y+15	; 0x0f
    169c:	98 89       	ldd	r25, Y+16	; 0x10
    169e:	01 97       	sbiw	r24, 0x01	; 1
    16a0:	f1 f7       	brne	.-4      	; 0x169e <TASK_checkPass+0x142>
    16a2:	98 8b       	std	Y+16, r25	; 0x10
    16a4:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(KeyDelay);
			i++;
    16a6:	80 91 37 01 	lds	r24, 0x0137
    16aa:	8f 5f       	subi	r24, 0xFF	; 255
    16ac:	80 93 37 01 	sts	0x0137, r24
	LCD_clearScreen();
	uint8 HMI_ECU_Password[PassLength];
	LCD_displayString("plz enter pass:");
	LCD_moveCursor(1, 0);
	i = key = 0;
	while (i < PassLength) {
    16b0:	80 91 37 01 	lds	r24, 0x0137
    16b4:	85 30       	cpi	r24, 0x05	; 5
    16b6:	08 f4       	brcc	.+2      	; 0x16ba <TASK_checkPass+0x15e>
    16b8:	6c cf       	rjmp	.-296    	; 0x1592 <TASK_checkPass+0x36>
			HMI_ECU_Password[i] = key;
			_delay_ms(KeyDelay);
			i++;
		}
	}
	while (KEYPAD_getPressedKey() != EnterButton)
    16ba:	0e 94 5f 11 	call	0x22be	; 0x22be <KEYPAD_getPressedKey>
    16be:	8d 30       	cpi	r24, 0x0D	; 13
    16c0:	e1 f7       	brne	.-8      	; 0x16ba <TASK_checkPass+0x15e>
		;
	for (int i = 0; i < PassLength; i++) {
    16c2:	1e 8e       	std	Y+30, r1	; 0x1e
    16c4:	1d 8e       	std	Y+29, r1	; 0x1d
    16c6:	81 c0       	rjmp	.+258    	; 0x17ca <TASK_checkPass+0x26e>
		USART_sendByte(HMI_ECU_Password[i]);
    16c8:	2d 8d       	ldd	r18, Y+29	; 0x1d
    16ca:	3e 8d       	ldd	r19, Y+30	; 0x1e
    16cc:	ce 01       	movw	r24, r28
    16ce:	4f 96       	adiw	r24, 0x1f	; 31
    16d0:	fc 01       	movw	r30, r24
    16d2:	e2 0f       	add	r30, r18
    16d4:	f3 1f       	adc	r31, r19
    16d6:	80 81       	ld	r24, Z
    16d8:	0e 94 4c 19 	call	0x3298	; 0x3298 <USART_sendByte>
    16dc:	80 e0       	ldi	r24, 0x00	; 0
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	a8 e4       	ldi	r26, 0x48	; 72
    16e2:	b2 e4       	ldi	r27, 0x42	; 66
    16e4:	8b 87       	std	Y+11, r24	; 0x0b
    16e6:	9c 87       	std	Y+12, r25	; 0x0c
    16e8:	ad 87       	std	Y+13, r26	; 0x0d
    16ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    16f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    16f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    16f4:	20 e0       	ldi	r18, 0x00	; 0
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	4a ef       	ldi	r20, 0xFA	; 250
    16fa:	54 e4       	ldi	r21, 0x44	; 68
    16fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	8f 83       	std	Y+7, r24	; 0x07
    1706:	98 87       	std	Y+8, r25	; 0x08
    1708:	a9 87       	std	Y+9, r26	; 0x09
    170a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    170c:	6f 81       	ldd	r22, Y+7	; 0x07
    170e:	78 85       	ldd	r23, Y+8	; 0x08
    1710:	89 85       	ldd	r24, Y+9	; 0x09
    1712:	9a 85       	ldd	r25, Y+10	; 0x0a
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	40 e8       	ldi	r20, 0x80	; 128
    171a:	5f e3       	ldi	r21, 0x3F	; 63
    171c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1720:	88 23       	and	r24, r24
    1722:	2c f4       	brge	.+10     	; 0x172e <TASK_checkPass+0x1d2>
		__ticks = 1;
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	9e 83       	std	Y+6, r25	; 0x06
    172a:	8d 83       	std	Y+5, r24	; 0x05
    172c:	3f c0       	rjmp	.+126    	; 0x17ac <TASK_checkPass+0x250>
	else if (__tmp > 65535)
    172e:	6f 81       	ldd	r22, Y+7	; 0x07
    1730:	78 85       	ldd	r23, Y+8	; 0x08
    1732:	89 85       	ldd	r24, Y+9	; 0x09
    1734:	9a 85       	ldd	r25, Y+10	; 0x0a
    1736:	20 e0       	ldi	r18, 0x00	; 0
    1738:	3f ef       	ldi	r19, 0xFF	; 255
    173a:	4f e7       	ldi	r20, 0x7F	; 127
    173c:	57 e4       	ldi	r21, 0x47	; 71
    173e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1742:	18 16       	cp	r1, r24
    1744:	4c f5       	brge	.+82     	; 0x1798 <TASK_checkPass+0x23c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1746:	6b 85       	ldd	r22, Y+11	; 0x0b
    1748:	7c 85       	ldd	r23, Y+12	; 0x0c
    174a:	8d 85       	ldd	r24, Y+13	; 0x0d
    174c:	9e 85       	ldd	r25, Y+14	; 0x0e
    174e:	20 e0       	ldi	r18, 0x00	; 0
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	40 e2       	ldi	r20, 0x20	; 32
    1754:	51 e4       	ldi	r21, 0x41	; 65
    1756:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    175a:	dc 01       	movw	r26, r24
    175c:	cb 01       	movw	r24, r22
    175e:	bc 01       	movw	r22, r24
    1760:	cd 01       	movw	r24, r26
    1762:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1766:	dc 01       	movw	r26, r24
    1768:	cb 01       	movw	r24, r22
    176a:	9e 83       	std	Y+6, r25	; 0x06
    176c:	8d 83       	std	Y+5, r24	; 0x05
    176e:	0f c0       	rjmp	.+30     	; 0x178e <TASK_checkPass+0x232>
    1770:	88 ec       	ldi	r24, 0xC8	; 200
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	9c 83       	std	Y+4, r25	; 0x04
    1776:	8b 83       	std	Y+3, r24	; 0x03
    1778:	8b 81       	ldd	r24, Y+3	; 0x03
    177a:	9c 81       	ldd	r25, Y+4	; 0x04
    177c:	01 97       	sbiw	r24, 0x01	; 1
    177e:	f1 f7       	brne	.-4      	; 0x177c <TASK_checkPass+0x220>
    1780:	9c 83       	std	Y+4, r25	; 0x04
    1782:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1784:	8d 81       	ldd	r24, Y+5	; 0x05
    1786:	9e 81       	ldd	r25, Y+6	; 0x06
    1788:	01 97       	sbiw	r24, 0x01	; 1
    178a:	9e 83       	std	Y+6, r25	; 0x06
    178c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    178e:	8d 81       	ldd	r24, Y+5	; 0x05
    1790:	9e 81       	ldd	r25, Y+6	; 0x06
    1792:	00 97       	sbiw	r24, 0x00	; 0
    1794:	69 f7       	brne	.-38     	; 0x1770 <TASK_checkPass+0x214>
    1796:	14 c0       	rjmp	.+40     	; 0x17c0 <TASK_checkPass+0x264>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1798:	6f 81       	ldd	r22, Y+7	; 0x07
    179a:	78 85       	ldd	r23, Y+8	; 0x08
    179c:	89 85       	ldd	r24, Y+9	; 0x09
    179e:	9a 85       	ldd	r25, Y+10	; 0x0a
    17a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17a4:	dc 01       	movw	r26, r24
    17a6:	cb 01       	movw	r24, r22
    17a8:	9e 83       	std	Y+6, r25	; 0x06
    17aa:	8d 83       	std	Y+5, r24	; 0x05
    17ac:	8d 81       	ldd	r24, Y+5	; 0x05
    17ae:	9e 81       	ldd	r25, Y+6	; 0x06
    17b0:	9a 83       	std	Y+2, r25	; 0x02
    17b2:	89 83       	std	Y+1, r24	; 0x01
    17b4:	89 81       	ldd	r24, Y+1	; 0x01
    17b6:	9a 81       	ldd	r25, Y+2	; 0x02
    17b8:	01 97       	sbiw	r24, 0x01	; 1
    17ba:	f1 f7       	brne	.-4      	; 0x17b8 <TASK_checkPass+0x25c>
    17bc:	9a 83       	std	Y+2, r25	; 0x02
    17be:	89 83       	std	Y+1, r24	; 0x01
			i++;
		}
	}
	while (KEYPAD_getPressedKey() != EnterButton)
		;
	for (int i = 0; i < PassLength; i++) {
    17c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17c2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17c4:	01 96       	adiw	r24, 0x01	; 1
    17c6:	9e 8f       	std	Y+30, r25	; 0x1e
    17c8:	8d 8f       	std	Y+29, r24	; 0x1d
    17ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17cc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17ce:	85 30       	cpi	r24, 0x05	; 5
    17d0:	91 05       	cpc	r25, r1
    17d2:	0c f4       	brge	.+2      	; 0x17d6 <TASK_checkPass+0x27a>
    17d4:	79 cf       	rjmp	.-270    	; 0x16c8 <TASK_checkPass+0x16c>
		USART_sendByte(HMI_ECU_Password[i]);
		_delay_ms(UsartDelay);
	}
}
    17d6:	a3 96       	adiw	r28, 0x23	; 35
    17d8:	0f b6       	in	r0, 0x3f	; 63
    17da:	f8 94       	cli
    17dc:	de bf       	out	0x3e, r29	; 62
    17de:	0f be       	out	0x3f, r0	; 63
    17e0:	cd bf       	out	0x3d, r28	; 61
    17e2:	cf 91       	pop	r28
    17e4:	df 91       	pop	r29
    17e6:	08 95       	ret

000017e8 <TASK_openDoor>:
/*
 * Description :
 * Function responsible for door management .
 */
void TASK_openDoor(void) {
    17e8:	df 93       	push	r29
    17ea:	cf 93       	push	r28
    17ec:	cd b7       	in	r28, 0x3d	; 61
    17ee:	de b7       	in	r29, 0x3e	; 62
    17f0:	2e 97       	sbiw	r28, 0x0e	; 14
    17f2:	0f b6       	in	r0, 0x3f	; 63
    17f4:	f8 94       	cli
    17f6:	de bf       	out	0x3e, r29	; 62
    17f8:	0f be       	out	0x3f, r0	; 63
    17fa:	cd bf       	out	0x3d, r28	; 61
	TASK_checkPass();
    17fc:	0e 94 ae 0a 	call	0x155c	; 0x155c <TASK_checkPass>
	flag = USART_recieveByte();
    1800:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <USART_recieveByte>
    1804:	80 93 36 01 	sts	0x0136, r24
	LCD_clearScreen();
    1808:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <LCD_clearScreen>
	if (flag == 1) {
    180c:	80 91 36 01 	lds	r24, 0x0136
    1810:	81 30       	cpi	r24, 0x01	; 1
    1812:	19 f4       	brne	.+6      	; 0x181a <TASK_openDoor+0x32>
		TASK_turnOnMotor();
    1814:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <TASK_turnOnMotor>
    1818:	8c c0       	rjmp	.+280    	; 0x1932 <TASK_openDoor+0x14a>
	} else if (flag == 0 && errorTrial < 2) {
    181a:	80 91 36 01 	lds	r24, 0x0136
    181e:	88 23       	and	r24, r24
    1820:	09 f0       	breq	.+2      	; 0x1824 <TASK_openDoor+0x3c>
    1822:	83 c0       	rjmp	.+262    	; 0x192a <TASK_openDoor+0x142>
    1824:	80 91 2c 01 	lds	r24, 0x012C
    1828:	82 30       	cpi	r24, 0x02	; 2
    182a:	08 f0       	brcs	.+2      	; 0x182e <TASK_openDoor+0x46>
    182c:	7e c0       	rjmp	.+252    	; 0x192a <TASK_openDoor+0x142>
		errorTrial++;
    182e:	80 91 2c 01 	lds	r24, 0x012C
    1832:	8f 5f       	subi	r24, 0xFF	; 255
    1834:	80 93 2c 01 	sts	0x012C, r24
		LCD_displayString("Not Correct...");
    1838:	8c ec       	ldi	r24, 0xCC	; 204
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <LCD_displayString>
    1840:	80 e0       	ldi	r24, 0x00	; 0
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	a8 e4       	ldi	r26, 0x48	; 72
    1846:	b4 e4       	ldi	r27, 0x44	; 68
    1848:	8b 87       	std	Y+11, r24	; 0x0b
    184a:	9c 87       	std	Y+12, r25	; 0x0c
    184c:	ad 87       	std	Y+13, r26	; 0x0d
    184e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1850:	6b 85       	ldd	r22, Y+11	; 0x0b
    1852:	7c 85       	ldd	r23, Y+12	; 0x0c
    1854:	8d 85       	ldd	r24, Y+13	; 0x0d
    1856:	9e 85       	ldd	r25, Y+14	; 0x0e
    1858:	20 e0       	ldi	r18, 0x00	; 0
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	4a ef       	ldi	r20, 0xFA	; 250
    185e:	54 e4       	ldi	r21, 0x44	; 68
    1860:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1864:	dc 01       	movw	r26, r24
    1866:	cb 01       	movw	r24, r22
    1868:	8f 83       	std	Y+7, r24	; 0x07
    186a:	98 87       	std	Y+8, r25	; 0x08
    186c:	a9 87       	std	Y+9, r26	; 0x09
    186e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1870:	6f 81       	ldd	r22, Y+7	; 0x07
    1872:	78 85       	ldd	r23, Y+8	; 0x08
    1874:	89 85       	ldd	r24, Y+9	; 0x09
    1876:	9a 85       	ldd	r25, Y+10	; 0x0a
    1878:	20 e0       	ldi	r18, 0x00	; 0
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	40 e8       	ldi	r20, 0x80	; 128
    187e:	5f e3       	ldi	r21, 0x3F	; 63
    1880:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1884:	88 23       	and	r24, r24
    1886:	2c f4       	brge	.+10     	; 0x1892 <TASK_openDoor+0xaa>
		__ticks = 1;
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	9e 83       	std	Y+6, r25	; 0x06
    188e:	8d 83       	std	Y+5, r24	; 0x05
    1890:	3f c0       	rjmp	.+126    	; 0x1910 <TASK_openDoor+0x128>
	else if (__tmp > 65535)
    1892:	6f 81       	ldd	r22, Y+7	; 0x07
    1894:	78 85       	ldd	r23, Y+8	; 0x08
    1896:	89 85       	ldd	r24, Y+9	; 0x09
    1898:	9a 85       	ldd	r25, Y+10	; 0x0a
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	3f ef       	ldi	r19, 0xFF	; 255
    189e:	4f e7       	ldi	r20, 0x7F	; 127
    18a0:	57 e4       	ldi	r21, 0x47	; 71
    18a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18a6:	18 16       	cp	r1, r24
    18a8:	4c f5       	brge	.+82     	; 0x18fc <TASK_openDoor+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    18ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    18ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    18b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	40 e2       	ldi	r20, 0x20	; 32
    18b8:	51 e4       	ldi	r21, 0x41	; 65
    18ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18be:	dc 01       	movw	r26, r24
    18c0:	cb 01       	movw	r24, r22
    18c2:	bc 01       	movw	r22, r24
    18c4:	cd 01       	movw	r24, r26
    18c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ca:	dc 01       	movw	r26, r24
    18cc:	cb 01       	movw	r24, r22
    18ce:	9e 83       	std	Y+6, r25	; 0x06
    18d0:	8d 83       	std	Y+5, r24	; 0x05
    18d2:	0f c0       	rjmp	.+30     	; 0x18f2 <TASK_openDoor+0x10a>
    18d4:	88 ec       	ldi	r24, 0xC8	; 200
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	9c 83       	std	Y+4, r25	; 0x04
    18da:	8b 83       	std	Y+3, r24	; 0x03
    18dc:	8b 81       	ldd	r24, Y+3	; 0x03
    18de:	9c 81       	ldd	r25, Y+4	; 0x04
    18e0:	01 97       	sbiw	r24, 0x01	; 1
    18e2:	f1 f7       	brne	.-4      	; 0x18e0 <TASK_openDoor+0xf8>
    18e4:	9c 83       	std	Y+4, r25	; 0x04
    18e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18e8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ea:	9e 81       	ldd	r25, Y+6	; 0x06
    18ec:	01 97       	sbiw	r24, 0x01	; 1
    18ee:	9e 83       	std	Y+6, r25	; 0x06
    18f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18f2:	8d 81       	ldd	r24, Y+5	; 0x05
    18f4:	9e 81       	ldd	r25, Y+6	; 0x06
    18f6:	00 97       	sbiw	r24, 0x00	; 0
    18f8:	69 f7       	brne	.-38     	; 0x18d4 <TASK_openDoor+0xec>
    18fa:	14 c0       	rjmp	.+40     	; 0x1924 <TASK_openDoor+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18fc:	6f 81       	ldd	r22, Y+7	; 0x07
    18fe:	78 85       	ldd	r23, Y+8	; 0x08
    1900:	89 85       	ldd	r24, Y+9	; 0x09
    1902:	9a 85       	ldd	r25, Y+10	; 0x0a
    1904:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1908:	dc 01       	movw	r26, r24
    190a:	cb 01       	movw	r24, r22
    190c:	9e 83       	std	Y+6, r25	; 0x06
    190e:	8d 83       	std	Y+5, r24	; 0x05
    1910:	8d 81       	ldd	r24, Y+5	; 0x05
    1912:	9e 81       	ldd	r25, Y+6	; 0x06
    1914:	9a 83       	std	Y+2, r25	; 0x02
    1916:	89 83       	std	Y+1, r24	; 0x01
    1918:	89 81       	ldd	r24, Y+1	; 0x01
    191a:	9a 81       	ldd	r25, Y+2	; 0x02
    191c:	01 97       	sbiw	r24, 0x01	; 1
    191e:	f1 f7       	brne	.-4      	; 0x191c <TASK_openDoor+0x134>
    1920:	9a 83       	std	Y+2, r25	; 0x02
    1922:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(NormalDelay);
		TASK_openDoor();
    1924:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <TASK_openDoor>
    1928:	04 c0       	rjmp	.+8      	; 0x1932 <TASK_openDoor+0x14a>
	} else {
		TASK_turnOnBuzzer();
    192a:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <TASK_turnOnBuzzer>
		errorTrial = 0;
    192e:	10 92 2c 01 	sts	0x012C, r1
	}
}
    1932:	2e 96       	adiw	r28, 0x0e	; 14
    1934:	0f b6       	in	r0, 0x3f	; 63
    1936:	f8 94       	cli
    1938:	de bf       	out	0x3e, r29	; 62
    193a:	0f be       	out	0x3f, r0	; 63
    193c:	cd bf       	out	0x3d, r28	; 61
    193e:	cf 91       	pop	r28
    1940:	df 91       	pop	r29
    1942:	08 95       	ret

00001944 <TASK_changePass>:
/*
 * Description :
 * Function responsible for changing password management .
 */
void TASK_changePass(void) {
    1944:	df 93       	push	r29
    1946:	cf 93       	push	r28
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
    194c:	6c 97       	sbiw	r28, 0x1c	; 28
    194e:	0f b6       	in	r0, 0x3f	; 63
    1950:	f8 94       	cli
    1952:	de bf       	out	0x3e, r29	; 62
    1954:	0f be       	out	0x3f, r0	; 63
    1956:	cd bf       	out	0x3d, r28	; 61
	TASK_checkPass();
    1958:	0e 94 ae 0a 	call	0x155c	; 0x155c <TASK_checkPass>
	flag = USART_recieveByte();
    195c:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <USART_recieveByte>
    1960:	80 93 36 01 	sts	0x0136, r24
	LCD_clearScreen();
    1964:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <LCD_clearScreen>
	if (flag == 1) {
    1968:	80 91 36 01 	lds	r24, 0x0136
    196c:	81 30       	cpi	r24, 0x01	; 1
    196e:	09 f0       	breq	.+2      	; 0x1972 <TASK_changePass+0x2e>
    1970:	79 c0       	rjmp	.+242    	; 0x1a64 <TASK_changePass+0x120>
		LCD_displayString("Correct pass");
    1972:	8b ed       	ldi	r24, 0xDB	; 219
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <LCD_displayString>
    197a:	80 e0       	ldi	r24, 0x00	; 0
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	a8 e4       	ldi	r26, 0x48	; 72
    1980:	b4 e4       	ldi	r27, 0x44	; 68
    1982:	89 8f       	std	Y+25, r24	; 0x19
    1984:	9a 8f       	std	Y+26, r25	; 0x1a
    1986:	ab 8f       	std	Y+27, r26	; 0x1b
    1988:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    198a:	69 8d       	ldd	r22, Y+25	; 0x19
    198c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    198e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1990:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1992:	20 e0       	ldi	r18, 0x00	; 0
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	4a ef       	ldi	r20, 0xFA	; 250
    1998:	54 e4       	ldi	r21, 0x44	; 68
    199a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    199e:	dc 01       	movw	r26, r24
    19a0:	cb 01       	movw	r24, r22
    19a2:	8d 8b       	std	Y+21, r24	; 0x15
    19a4:	9e 8b       	std	Y+22, r25	; 0x16
    19a6:	af 8b       	std	Y+23, r26	; 0x17
    19a8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19aa:	6d 89       	ldd	r22, Y+21	; 0x15
    19ac:	7e 89       	ldd	r23, Y+22	; 0x16
    19ae:	8f 89       	ldd	r24, Y+23	; 0x17
    19b0:	98 8d       	ldd	r25, Y+24	; 0x18
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	40 e8       	ldi	r20, 0x80	; 128
    19b8:	5f e3       	ldi	r21, 0x3F	; 63
    19ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19be:	88 23       	and	r24, r24
    19c0:	2c f4       	brge	.+10     	; 0x19cc <TASK_changePass+0x88>
		__ticks = 1;
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	9c 8b       	std	Y+20, r25	; 0x14
    19c8:	8b 8b       	std	Y+19, r24	; 0x13
    19ca:	3f c0       	rjmp	.+126    	; 0x1a4a <TASK_changePass+0x106>
	else if (__tmp > 65535)
    19cc:	6d 89       	ldd	r22, Y+21	; 0x15
    19ce:	7e 89       	ldd	r23, Y+22	; 0x16
    19d0:	8f 89       	ldd	r24, Y+23	; 0x17
    19d2:	98 8d       	ldd	r25, Y+24	; 0x18
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	3f ef       	ldi	r19, 0xFF	; 255
    19d8:	4f e7       	ldi	r20, 0x7F	; 127
    19da:	57 e4       	ldi	r21, 0x47	; 71
    19dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19e0:	18 16       	cp	r1, r24
    19e2:	4c f5       	brge	.+82     	; 0x1a36 <TASK_changePass+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e4:	69 8d       	ldd	r22, Y+25	; 0x19
    19e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	40 e2       	ldi	r20, 0x20	; 32
    19f2:	51 e4       	ldi	r21, 0x41	; 65
    19f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f8:	dc 01       	movw	r26, r24
    19fa:	cb 01       	movw	r24, r22
    19fc:	bc 01       	movw	r22, r24
    19fe:	cd 01       	movw	r24, r26
    1a00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a04:	dc 01       	movw	r26, r24
    1a06:	cb 01       	movw	r24, r22
    1a08:	9c 8b       	std	Y+20, r25	; 0x14
    1a0a:	8b 8b       	std	Y+19, r24	; 0x13
    1a0c:	0f c0       	rjmp	.+30     	; 0x1a2c <TASK_changePass+0xe8>
    1a0e:	88 ec       	ldi	r24, 0xC8	; 200
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	9a 8b       	std	Y+18, r25	; 0x12
    1a14:	89 8b       	std	Y+17, r24	; 0x11
    1a16:	89 89       	ldd	r24, Y+17	; 0x11
    1a18:	9a 89       	ldd	r25, Y+18	; 0x12
    1a1a:	01 97       	sbiw	r24, 0x01	; 1
    1a1c:	f1 f7       	brne	.-4      	; 0x1a1a <TASK_changePass+0xd6>
    1a1e:	9a 8b       	std	Y+18, r25	; 0x12
    1a20:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a22:	8b 89       	ldd	r24, Y+19	; 0x13
    1a24:	9c 89       	ldd	r25, Y+20	; 0x14
    1a26:	01 97       	sbiw	r24, 0x01	; 1
    1a28:	9c 8b       	std	Y+20, r25	; 0x14
    1a2a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a2c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a2e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a30:	00 97       	sbiw	r24, 0x00	; 0
    1a32:	69 f7       	brne	.-38     	; 0x1a0e <TASK_changePass+0xca>
    1a34:	14 c0       	rjmp	.+40     	; 0x1a5e <TASK_changePass+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a36:	6d 89       	ldd	r22, Y+21	; 0x15
    1a38:	7e 89       	ldd	r23, Y+22	; 0x16
    1a3a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a3c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a42:	dc 01       	movw	r26, r24
    1a44:	cb 01       	movw	r24, r22
    1a46:	9c 8b       	std	Y+20, r25	; 0x14
    1a48:	8b 8b       	std	Y+19, r24	; 0x13
    1a4a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a4c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a4e:	98 8b       	std	Y+16, r25	; 0x10
    1a50:	8f 87       	std	Y+15, r24	; 0x0f
    1a52:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a54:	98 89       	ldd	r25, Y+16	; 0x10
    1a56:	01 97       	sbiw	r24, 0x01	; 1
    1a58:	f1 f7       	brne	.-4      	; 0x1a56 <TASK_changePass+0x112>
    1a5a:	98 8b       	std	Y+16, r25	; 0x10
    1a5c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(NormalDelay);
		TASK_createNewPass();
    1a5e:	0e 94 10 06 	call	0xc20	; 0xc20 <TASK_createNewPass>
    1a62:	8c c0       	rjmp	.+280    	; 0x1b7c <TASK_changePass+0x238>
	} else if (flag == 0 && errorTrial < 2) {
    1a64:	80 91 36 01 	lds	r24, 0x0136
    1a68:	88 23       	and	r24, r24
    1a6a:	09 f0       	breq	.+2      	; 0x1a6e <TASK_changePass+0x12a>
    1a6c:	83 c0       	rjmp	.+262    	; 0x1b74 <TASK_changePass+0x230>
    1a6e:	80 91 2c 01 	lds	r24, 0x012C
    1a72:	82 30       	cpi	r24, 0x02	; 2
    1a74:	08 f0       	brcs	.+2      	; 0x1a78 <TASK_changePass+0x134>
    1a76:	7e c0       	rjmp	.+252    	; 0x1b74 <TASK_changePass+0x230>
		errorTrial++;
    1a78:	80 91 2c 01 	lds	r24, 0x012C
    1a7c:	8f 5f       	subi	r24, 0xFF	; 255
    1a7e:	80 93 2c 01 	sts	0x012C, r24
		LCD_displayString("Not Correct...");
    1a82:	8c ec       	ldi	r24, 0xCC	; 204
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <LCD_displayString>
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	a8 e4       	ldi	r26, 0x48	; 72
    1a90:	b4 e4       	ldi	r27, 0x44	; 68
    1a92:	8b 87       	std	Y+11, r24	; 0x0b
    1a94:	9c 87       	std	Y+12, r25	; 0x0c
    1a96:	ad 87       	std	Y+13, r26	; 0x0d
    1a98:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aa0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	4a ef       	ldi	r20, 0xFA	; 250
    1aa8:	54 e4       	ldi	r21, 0x44	; 68
    1aaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aae:	dc 01       	movw	r26, r24
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	8f 83       	std	Y+7, r24	; 0x07
    1ab4:	98 87       	std	Y+8, r25	; 0x08
    1ab6:	a9 87       	std	Y+9, r26	; 0x09
    1ab8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aba:	6f 81       	ldd	r22, Y+7	; 0x07
    1abc:	78 85       	ldd	r23, Y+8	; 0x08
    1abe:	89 85       	ldd	r24, Y+9	; 0x09
    1ac0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	40 e8       	ldi	r20, 0x80	; 128
    1ac8:	5f e3       	ldi	r21, 0x3F	; 63
    1aca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ace:	88 23       	and	r24, r24
    1ad0:	2c f4       	brge	.+10     	; 0x1adc <TASK_changePass+0x198>
		__ticks = 1;
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	9e 83       	std	Y+6, r25	; 0x06
    1ad8:	8d 83       	std	Y+5, r24	; 0x05
    1ada:	3f c0       	rjmp	.+126    	; 0x1b5a <TASK_changePass+0x216>
	else if (__tmp > 65535)
    1adc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ade:	78 85       	ldd	r23, Y+8	; 0x08
    1ae0:	89 85       	ldd	r24, Y+9	; 0x09
    1ae2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	3f ef       	ldi	r19, 0xFF	; 255
    1ae8:	4f e7       	ldi	r20, 0x7F	; 127
    1aea:	57 e4       	ldi	r21, 0x47	; 71
    1aec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1af0:	18 16       	cp	r1, r24
    1af2:	4c f5       	brge	.+82     	; 0x1b46 <TASK_changePass+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1af6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1af8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1afa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	40 e2       	ldi	r20, 0x20	; 32
    1b02:	51 e4       	ldi	r21, 0x41	; 65
    1b04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b08:	dc 01       	movw	r26, r24
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	bc 01       	movw	r22, r24
    1b0e:	cd 01       	movw	r24, r26
    1b10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	9e 83       	std	Y+6, r25	; 0x06
    1b1a:	8d 83       	std	Y+5, r24	; 0x05
    1b1c:	0f c0       	rjmp	.+30     	; 0x1b3c <TASK_changePass+0x1f8>
    1b1e:	88 ec       	ldi	r24, 0xC8	; 200
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	9c 83       	std	Y+4, r25	; 0x04
    1b24:	8b 83       	std	Y+3, r24	; 0x03
    1b26:	8b 81       	ldd	r24, Y+3	; 0x03
    1b28:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2a:	01 97       	sbiw	r24, 0x01	; 1
    1b2c:	f1 f7       	brne	.-4      	; 0x1b2a <TASK_changePass+0x1e6>
    1b2e:	9c 83       	std	Y+4, r25	; 0x04
    1b30:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b32:	8d 81       	ldd	r24, Y+5	; 0x05
    1b34:	9e 81       	ldd	r25, Y+6	; 0x06
    1b36:	01 97       	sbiw	r24, 0x01	; 1
    1b38:	9e 83       	std	Y+6, r25	; 0x06
    1b3a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b40:	00 97       	sbiw	r24, 0x00	; 0
    1b42:	69 f7       	brne	.-38     	; 0x1b1e <TASK_changePass+0x1da>
    1b44:	14 c0       	rjmp	.+40     	; 0x1b6e <TASK_changePass+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b46:	6f 81       	ldd	r22, Y+7	; 0x07
    1b48:	78 85       	ldd	r23, Y+8	; 0x08
    1b4a:	89 85       	ldd	r24, Y+9	; 0x09
    1b4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b52:	dc 01       	movw	r26, r24
    1b54:	cb 01       	movw	r24, r22
    1b56:	9e 83       	std	Y+6, r25	; 0x06
    1b58:	8d 83       	std	Y+5, r24	; 0x05
    1b5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b5e:	9a 83       	std	Y+2, r25	; 0x02
    1b60:	89 83       	std	Y+1, r24	; 0x01
    1b62:	89 81       	ldd	r24, Y+1	; 0x01
    1b64:	9a 81       	ldd	r25, Y+2	; 0x02
    1b66:	01 97       	sbiw	r24, 0x01	; 1
    1b68:	f1 f7       	brne	.-4      	; 0x1b66 <TASK_changePass+0x222>
    1b6a:	9a 83       	std	Y+2, r25	; 0x02
    1b6c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(NormalDelay);
		TASK_changePass();
    1b6e:	0e 94 a2 0c 	call	0x1944	; 0x1944 <TASK_changePass>
    1b72:	04 c0       	rjmp	.+8      	; 0x1b7c <TASK_changePass+0x238>
	} else {
		TASK_turnOnBuzzer();
    1b74:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <TASK_turnOnBuzzer>
		errorTrial = 0;
    1b78:	10 92 2c 01 	sts	0x012C, r1
	}
}
    1b7c:	6c 96       	adiw	r28, 0x1c	; 28
    1b7e:	0f b6       	in	r0, 0x3f	; 63
    1b80:	f8 94       	cli
    1b82:	de bf       	out	0x3e, r29	; 62
    1b84:	0f be       	out	0x3f, r0	; 63
    1b86:	cd bf       	out	0x3d, r28	; 61
    1b88:	cf 91       	pop	r28
    1b8a:	df 91       	pop	r29
    1b8c:	08 95       	ret

00001b8e <Callback>:
/*
 * Description :
 * Function responsible for call back for timer 1 .
 */
void Callback(void) {
    1b8e:	df 93       	push	r29
    1b90:	cf 93       	push	r28
    1b92:	cd b7       	in	r28, 0x3d	; 61
    1b94:	de b7       	in	r29, 0x3e	; 62
	TIMER1_g_ticks++;
    1b96:	80 91 2d 01 	lds	r24, 0x012D
    1b9a:	90 91 2e 01 	lds	r25, 0x012E
    1b9e:	01 96       	adiw	r24, 0x01	; 1
    1ba0:	90 93 2e 01 	sts	0x012E, r25
    1ba4:	80 93 2d 01 	sts	0x012D, r24
}
    1ba8:	cf 91       	pop	r28
    1baa:	df 91       	pop	r29
    1bac:	08 95       	ret

00001bae <TASK_turnOnBuzzer>:
/*
* Description :
* Function responsible for showing the state of Error.
*/
void TASK_turnOnBuzzer(void) {
    1bae:	df 93       	push	r29
    1bb0:	cf 93       	push	r28
    1bb2:	cd b7       	in	r28, 0x3d	; 61
    1bb4:	de b7       	in	r29, 0x3e	; 62
	TIMER1_g_ticks = 0;
    1bb6:	10 92 2e 01 	sts	0x012E, r1
    1bba:	10 92 2d 01 	sts	0x012D, r1
	LCD_clearScreen();
    1bbe:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <LCD_clearScreen>
	LCD_displayString("Error !!!");
    1bc2:	88 ee       	ldi	r24, 0xE8	; 232
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <LCD_displayString>
	while (TIMER1_g_ticks < DangerTime)
    1bca:	80 91 2d 01 	lds	r24, 0x012D
    1bce:	90 91 2e 01 	lds	r25, 0x012E
    1bd2:	8c 33       	cpi	r24, 0x3C	; 60
    1bd4:	91 05       	cpc	r25, r1
    1bd6:	cc f3       	brlt	.-14     	; 0x1bca <TASK_turnOnBuzzer+0x1c>
		;
}
    1bd8:	cf 91       	pop	r28
    1bda:	df 91       	pop	r29
    1bdc:	08 95       	ret

00001bde <TASK_turnOnMotor>:
/*
* Description :
* Function responsible for showing the state of door.
*/
void TASK_turnOnMotor(void) {
    1bde:	df 93       	push	r29
    1be0:	cf 93       	push	r28
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
	TIMER1_g_ticks = 0;
    1be6:	10 92 2e 01 	sts	0x012E, r1
    1bea:	10 92 2d 01 	sts	0x012D, r1
	LCD_clearScreen();
    1bee:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <LCD_clearScreen>
	LCD_displayString("Door Unlocking");
    1bf2:	82 ef       	ldi	r24, 0xF2	; 242
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <LCD_displayString>
	while (TIMER1_g_ticks < OpenDoorTime)
    1bfa:	80 91 2d 01 	lds	r24, 0x012D
    1bfe:	90 91 2e 01 	lds	r25, 0x012E
    1c02:	8a 30       	cpi	r24, 0x0A	; 10
    1c04:	91 05       	cpc	r25, r1
    1c06:	cc f3       	brlt	.-14     	; 0x1bfa <TASK_turnOnMotor+0x1c>
		;
	LCD_clearScreen();
    1c08:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <LCD_clearScreen>
	LCD_displayString("Holding...");
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	91 e0       	ldi	r25, 0x01	; 1
    1c10:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <LCD_displayString>
	while (TIMER1_g_ticks < OpenDoorTime + HoldDoorTime)
    1c14:	80 91 2d 01 	lds	r24, 0x012D
    1c18:	90 91 2e 01 	lds	r25, 0x012E
    1c1c:	8d 30       	cpi	r24, 0x0D	; 13
    1c1e:	91 05       	cpc	r25, r1
    1c20:	cc f3       	brlt	.-14     	; 0x1c14 <TASK_turnOnMotor+0x36>
		;
	LCD_clearScreen();
    1c22:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <LCD_clearScreen>
	LCD_displayString("Door Locking");
    1c26:	8c e0       	ldi	r24, 0x0C	; 12
    1c28:	91 e0       	ldi	r25, 0x01	; 1
    1c2a:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <LCD_displayString>
	while (TIMER1_g_ticks < OpenDoorTime + HoldDoorTime + CloseDoorTime)
    1c2e:	80 91 2d 01 	lds	r24, 0x012D
    1c32:	90 91 2e 01 	lds	r25, 0x012E
    1c36:	87 31       	cpi	r24, 0x17	; 23
    1c38:	91 05       	cpc	r25, r1
    1c3a:	cc f3       	brlt	.-14     	; 0x1c2e <TASK_turnOnMotor+0x50>
		;
}
    1c3c:	cf 91       	pop	r28
    1c3e:	df 91       	pop	r29
    1c40:	08 95       	ret

00001c42 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1c42:	df 93       	push	r29
    1c44:	cf 93       	push	r28
    1c46:	00 d0       	rcall	.+0      	; 0x1c48 <GPIO_setupPinDirection+0x6>
    1c48:	00 d0       	rcall	.+0      	; 0x1c4a <GPIO_setupPinDirection+0x8>
    1c4a:	0f 92       	push	r0
    1c4c:	cd b7       	in	r28, 0x3d	; 61
    1c4e:	de b7       	in	r29, 0x3e	; 62
    1c50:	89 83       	std	Y+1, r24	; 0x01
    1c52:	6a 83       	std	Y+2, r22	; 0x02
    1c54:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1c56:	8a 81       	ldd	r24, Y+2	; 0x02
    1c58:	88 30       	cpi	r24, 0x08	; 8
    1c5a:	08 f0       	brcs	.+2      	; 0x1c5e <GPIO_setupPinDirection+0x1c>
    1c5c:	d5 c0       	rjmp	.+426    	; 0x1e08 <GPIO_setupPinDirection+0x1c6>
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
    1c60:	84 30       	cpi	r24, 0x04	; 4
    1c62:	08 f0       	brcs	.+2      	; 0x1c66 <GPIO_setupPinDirection+0x24>
    1c64:	d1 c0       	rjmp	.+418    	; 0x1e08 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1c66:	89 81       	ldd	r24, Y+1	; 0x01
    1c68:	28 2f       	mov	r18, r24
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	3d 83       	std	Y+5, r19	; 0x05
    1c6e:	2c 83       	std	Y+4, r18	; 0x04
    1c70:	8c 81       	ldd	r24, Y+4	; 0x04
    1c72:	9d 81       	ldd	r25, Y+5	; 0x05
    1c74:	81 30       	cpi	r24, 0x01	; 1
    1c76:	91 05       	cpc	r25, r1
    1c78:	09 f4       	brne	.+2      	; 0x1c7c <GPIO_setupPinDirection+0x3a>
    1c7a:	43 c0       	rjmp	.+134    	; 0x1d02 <GPIO_setupPinDirection+0xc0>
    1c7c:	2c 81       	ldd	r18, Y+4	; 0x04
    1c7e:	3d 81       	ldd	r19, Y+5	; 0x05
    1c80:	22 30       	cpi	r18, 0x02	; 2
    1c82:	31 05       	cpc	r19, r1
    1c84:	2c f4       	brge	.+10     	; 0x1c90 <GPIO_setupPinDirection+0x4e>
    1c86:	8c 81       	ldd	r24, Y+4	; 0x04
    1c88:	9d 81       	ldd	r25, Y+5	; 0x05
    1c8a:	00 97       	sbiw	r24, 0x00	; 0
    1c8c:	71 f0       	breq	.+28     	; 0x1caa <GPIO_setupPinDirection+0x68>
    1c8e:	bc c0       	rjmp	.+376    	; 0x1e08 <GPIO_setupPinDirection+0x1c6>
    1c90:	2c 81       	ldd	r18, Y+4	; 0x04
    1c92:	3d 81       	ldd	r19, Y+5	; 0x05
    1c94:	22 30       	cpi	r18, 0x02	; 2
    1c96:	31 05       	cpc	r19, r1
    1c98:	09 f4       	brne	.+2      	; 0x1c9c <GPIO_setupPinDirection+0x5a>
    1c9a:	5f c0       	rjmp	.+190    	; 0x1d5a <GPIO_setupPinDirection+0x118>
    1c9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca0:	83 30       	cpi	r24, 0x03	; 3
    1ca2:	91 05       	cpc	r25, r1
    1ca4:	09 f4       	brne	.+2      	; 0x1ca8 <GPIO_setupPinDirection+0x66>
    1ca6:	85 c0       	rjmp	.+266    	; 0x1db2 <GPIO_setupPinDirection+0x170>
    1ca8:	af c0       	rjmp	.+350    	; 0x1e08 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1caa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cac:	81 30       	cpi	r24, 0x01	; 1
    1cae:	a1 f4       	brne	.+40     	; 0x1cd8 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1cb0:	aa e3       	ldi	r26, 0x3A	; 58
    1cb2:	b0 e0       	ldi	r27, 0x00	; 0
    1cb4:	ea e3       	ldi	r30, 0x3A	; 58
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	48 2f       	mov	r20, r24
    1cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbe:	28 2f       	mov	r18, r24
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	02 2e       	mov	r0, r18
    1cc8:	02 c0       	rjmp	.+4      	; 0x1cce <GPIO_setupPinDirection+0x8c>
    1cca:	88 0f       	add	r24, r24
    1ccc:	99 1f       	adc	r25, r25
    1cce:	0a 94       	dec	r0
    1cd0:	e2 f7       	brpl	.-8      	; 0x1cca <GPIO_setupPinDirection+0x88>
    1cd2:	84 2b       	or	r24, r20
    1cd4:	8c 93       	st	X, r24
    1cd6:	98 c0       	rjmp	.+304    	; 0x1e08 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1cd8:	aa e3       	ldi	r26, 0x3A	; 58
    1cda:	b0 e0       	ldi	r27, 0x00	; 0
    1cdc:	ea e3       	ldi	r30, 0x3A	; 58
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	80 81       	ld	r24, Z
    1ce2:	48 2f       	mov	r20, r24
    1ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce6:	28 2f       	mov	r18, r24
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	02 2e       	mov	r0, r18
    1cf0:	02 c0       	rjmp	.+4      	; 0x1cf6 <GPIO_setupPinDirection+0xb4>
    1cf2:	88 0f       	add	r24, r24
    1cf4:	99 1f       	adc	r25, r25
    1cf6:	0a 94       	dec	r0
    1cf8:	e2 f7       	brpl	.-8      	; 0x1cf2 <GPIO_setupPinDirection+0xb0>
    1cfa:	80 95       	com	r24
    1cfc:	84 23       	and	r24, r20
    1cfe:	8c 93       	st	X, r24
    1d00:	83 c0       	rjmp	.+262    	; 0x1e08 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1d02:	8b 81       	ldd	r24, Y+3	; 0x03
    1d04:	81 30       	cpi	r24, 0x01	; 1
    1d06:	a1 f4       	brne	.+40     	; 0x1d30 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1d08:	a7 e3       	ldi	r26, 0x37	; 55
    1d0a:	b0 e0       	ldi	r27, 0x00	; 0
    1d0c:	e7 e3       	ldi	r30, 0x37	; 55
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	80 81       	ld	r24, Z
    1d12:	48 2f       	mov	r20, r24
    1d14:	8a 81       	ldd	r24, Y+2	; 0x02
    1d16:	28 2f       	mov	r18, r24
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	02 2e       	mov	r0, r18
    1d20:	02 c0       	rjmp	.+4      	; 0x1d26 <GPIO_setupPinDirection+0xe4>
    1d22:	88 0f       	add	r24, r24
    1d24:	99 1f       	adc	r25, r25
    1d26:	0a 94       	dec	r0
    1d28:	e2 f7       	brpl	.-8      	; 0x1d22 <GPIO_setupPinDirection+0xe0>
    1d2a:	84 2b       	or	r24, r20
    1d2c:	8c 93       	st	X, r24
    1d2e:	6c c0       	rjmp	.+216    	; 0x1e08 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1d30:	a7 e3       	ldi	r26, 0x37	; 55
    1d32:	b0 e0       	ldi	r27, 0x00	; 0
    1d34:	e7 e3       	ldi	r30, 0x37	; 55
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	80 81       	ld	r24, Z
    1d3a:	48 2f       	mov	r20, r24
    1d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3e:	28 2f       	mov	r18, r24
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	02 2e       	mov	r0, r18
    1d48:	02 c0       	rjmp	.+4      	; 0x1d4e <GPIO_setupPinDirection+0x10c>
    1d4a:	88 0f       	add	r24, r24
    1d4c:	99 1f       	adc	r25, r25
    1d4e:	0a 94       	dec	r0
    1d50:	e2 f7       	brpl	.-8      	; 0x1d4a <GPIO_setupPinDirection+0x108>
    1d52:	80 95       	com	r24
    1d54:	84 23       	and	r24, r20
    1d56:	8c 93       	st	X, r24
    1d58:	57 c0       	rjmp	.+174    	; 0x1e08 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5c:	81 30       	cpi	r24, 0x01	; 1
    1d5e:	a1 f4       	brne	.+40     	; 0x1d88 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1d60:	a4 e3       	ldi	r26, 0x34	; 52
    1d62:	b0 e0       	ldi	r27, 0x00	; 0
    1d64:	e4 e3       	ldi	r30, 0x34	; 52
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	80 81       	ld	r24, Z
    1d6a:	48 2f       	mov	r20, r24
    1d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6e:	28 2f       	mov	r18, r24
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	02 2e       	mov	r0, r18
    1d78:	02 c0       	rjmp	.+4      	; 0x1d7e <GPIO_setupPinDirection+0x13c>
    1d7a:	88 0f       	add	r24, r24
    1d7c:	99 1f       	adc	r25, r25
    1d7e:	0a 94       	dec	r0
    1d80:	e2 f7       	brpl	.-8      	; 0x1d7a <GPIO_setupPinDirection+0x138>
    1d82:	84 2b       	or	r24, r20
    1d84:	8c 93       	st	X, r24
    1d86:	40 c0       	rjmp	.+128    	; 0x1e08 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1d88:	a4 e3       	ldi	r26, 0x34	; 52
    1d8a:	b0 e0       	ldi	r27, 0x00	; 0
    1d8c:	e4 e3       	ldi	r30, 0x34	; 52
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	80 81       	ld	r24, Z
    1d92:	48 2f       	mov	r20, r24
    1d94:	8a 81       	ldd	r24, Y+2	; 0x02
    1d96:	28 2f       	mov	r18, r24
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	02 2e       	mov	r0, r18
    1da0:	02 c0       	rjmp	.+4      	; 0x1da6 <GPIO_setupPinDirection+0x164>
    1da2:	88 0f       	add	r24, r24
    1da4:	99 1f       	adc	r25, r25
    1da6:	0a 94       	dec	r0
    1da8:	e2 f7       	brpl	.-8      	; 0x1da2 <GPIO_setupPinDirection+0x160>
    1daa:	80 95       	com	r24
    1dac:	84 23       	and	r24, r20
    1dae:	8c 93       	st	X, r24
    1db0:	2b c0       	rjmp	.+86     	; 0x1e08 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1db2:	8b 81       	ldd	r24, Y+3	; 0x03
    1db4:	81 30       	cpi	r24, 0x01	; 1
    1db6:	a1 f4       	brne	.+40     	; 0x1de0 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1db8:	a1 e3       	ldi	r26, 0x31	; 49
    1dba:	b0 e0       	ldi	r27, 0x00	; 0
    1dbc:	e1 e3       	ldi	r30, 0x31	; 49
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	80 81       	ld	r24, Z
    1dc2:	48 2f       	mov	r20, r24
    1dc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc6:	28 2f       	mov	r18, r24
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	02 2e       	mov	r0, r18
    1dd0:	02 c0       	rjmp	.+4      	; 0x1dd6 <GPIO_setupPinDirection+0x194>
    1dd2:	88 0f       	add	r24, r24
    1dd4:	99 1f       	adc	r25, r25
    1dd6:	0a 94       	dec	r0
    1dd8:	e2 f7       	brpl	.-8      	; 0x1dd2 <GPIO_setupPinDirection+0x190>
    1dda:	84 2b       	or	r24, r20
    1ddc:	8c 93       	st	X, r24
    1dde:	14 c0       	rjmp	.+40     	; 0x1e08 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1de0:	a1 e3       	ldi	r26, 0x31	; 49
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	e1 e3       	ldi	r30, 0x31	; 49
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	80 81       	ld	r24, Z
    1dea:	48 2f       	mov	r20, r24
    1dec:	8a 81       	ldd	r24, Y+2	; 0x02
    1dee:	28 2f       	mov	r18, r24
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	02 2e       	mov	r0, r18
    1df8:	02 c0       	rjmp	.+4      	; 0x1dfe <GPIO_setupPinDirection+0x1bc>
    1dfa:	88 0f       	add	r24, r24
    1dfc:	99 1f       	adc	r25, r25
    1dfe:	0a 94       	dec	r0
    1e00:	e2 f7       	brpl	.-8      	; 0x1dfa <GPIO_setupPinDirection+0x1b8>
    1e02:	80 95       	com	r24
    1e04:	84 23       	and	r24, r20
    1e06:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1e08:	0f 90       	pop	r0
    1e0a:	0f 90       	pop	r0
    1e0c:	0f 90       	pop	r0
    1e0e:	0f 90       	pop	r0
    1e10:	0f 90       	pop	r0
    1e12:	cf 91       	pop	r28
    1e14:	df 91       	pop	r29
    1e16:	08 95       	ret

00001e18 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1e18:	df 93       	push	r29
    1e1a:	cf 93       	push	r28
    1e1c:	00 d0       	rcall	.+0      	; 0x1e1e <GPIO_writePin+0x6>
    1e1e:	00 d0       	rcall	.+0      	; 0x1e20 <GPIO_writePin+0x8>
    1e20:	0f 92       	push	r0
    1e22:	cd b7       	in	r28, 0x3d	; 61
    1e24:	de b7       	in	r29, 0x3e	; 62
    1e26:	89 83       	std	Y+1, r24	; 0x01
    1e28:	6a 83       	std	Y+2, r22	; 0x02
    1e2a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1e2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2e:	88 30       	cpi	r24, 0x08	; 8
    1e30:	08 f0       	brcs	.+2      	; 0x1e34 <GPIO_writePin+0x1c>
    1e32:	d5 c0       	rjmp	.+426    	; 0x1fde <GPIO_writePin+0x1c6>
    1e34:	89 81       	ldd	r24, Y+1	; 0x01
    1e36:	84 30       	cpi	r24, 0x04	; 4
    1e38:	08 f0       	brcs	.+2      	; 0x1e3c <GPIO_writePin+0x24>
    1e3a:	d1 c0       	rjmp	.+418    	; 0x1fde <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1e3c:	89 81       	ldd	r24, Y+1	; 0x01
    1e3e:	28 2f       	mov	r18, r24
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	3d 83       	std	Y+5, r19	; 0x05
    1e44:	2c 83       	std	Y+4, r18	; 0x04
    1e46:	8c 81       	ldd	r24, Y+4	; 0x04
    1e48:	9d 81       	ldd	r25, Y+5	; 0x05
    1e4a:	81 30       	cpi	r24, 0x01	; 1
    1e4c:	91 05       	cpc	r25, r1
    1e4e:	09 f4       	brne	.+2      	; 0x1e52 <GPIO_writePin+0x3a>
    1e50:	43 c0       	rjmp	.+134    	; 0x1ed8 <GPIO_writePin+0xc0>
    1e52:	2c 81       	ldd	r18, Y+4	; 0x04
    1e54:	3d 81       	ldd	r19, Y+5	; 0x05
    1e56:	22 30       	cpi	r18, 0x02	; 2
    1e58:	31 05       	cpc	r19, r1
    1e5a:	2c f4       	brge	.+10     	; 0x1e66 <GPIO_writePin+0x4e>
    1e5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e5e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e60:	00 97       	sbiw	r24, 0x00	; 0
    1e62:	71 f0       	breq	.+28     	; 0x1e80 <GPIO_writePin+0x68>
    1e64:	bc c0       	rjmp	.+376    	; 0x1fde <GPIO_writePin+0x1c6>
    1e66:	2c 81       	ldd	r18, Y+4	; 0x04
    1e68:	3d 81       	ldd	r19, Y+5	; 0x05
    1e6a:	22 30       	cpi	r18, 0x02	; 2
    1e6c:	31 05       	cpc	r19, r1
    1e6e:	09 f4       	brne	.+2      	; 0x1e72 <GPIO_writePin+0x5a>
    1e70:	5f c0       	rjmp	.+190    	; 0x1f30 <GPIO_writePin+0x118>
    1e72:	8c 81       	ldd	r24, Y+4	; 0x04
    1e74:	9d 81       	ldd	r25, Y+5	; 0x05
    1e76:	83 30       	cpi	r24, 0x03	; 3
    1e78:	91 05       	cpc	r25, r1
    1e7a:	09 f4       	brne	.+2      	; 0x1e7e <GPIO_writePin+0x66>
    1e7c:	85 c0       	rjmp	.+266    	; 0x1f88 <GPIO_writePin+0x170>
    1e7e:	af c0       	rjmp	.+350    	; 0x1fde <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1e80:	8b 81       	ldd	r24, Y+3	; 0x03
    1e82:	81 30       	cpi	r24, 0x01	; 1
    1e84:	a1 f4       	brne	.+40     	; 0x1eae <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1e86:	ab e3       	ldi	r26, 0x3B	; 59
    1e88:	b0 e0       	ldi	r27, 0x00	; 0
    1e8a:	eb e3       	ldi	r30, 0x3B	; 59
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	80 81       	ld	r24, Z
    1e90:	48 2f       	mov	r20, r24
    1e92:	8a 81       	ldd	r24, Y+2	; 0x02
    1e94:	28 2f       	mov	r18, r24
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	02 2e       	mov	r0, r18
    1e9e:	02 c0       	rjmp	.+4      	; 0x1ea4 <GPIO_writePin+0x8c>
    1ea0:	88 0f       	add	r24, r24
    1ea2:	99 1f       	adc	r25, r25
    1ea4:	0a 94       	dec	r0
    1ea6:	e2 f7       	brpl	.-8      	; 0x1ea0 <GPIO_writePin+0x88>
    1ea8:	84 2b       	or	r24, r20
    1eaa:	8c 93       	st	X, r24
    1eac:	98 c0       	rjmp	.+304    	; 0x1fde <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1eae:	ab e3       	ldi	r26, 0x3B	; 59
    1eb0:	b0 e0       	ldi	r27, 0x00	; 0
    1eb2:	eb e3       	ldi	r30, 0x3B	; 59
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	80 81       	ld	r24, Z
    1eb8:	48 2f       	mov	r20, r24
    1eba:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebc:	28 2f       	mov	r18, r24
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	02 2e       	mov	r0, r18
    1ec6:	02 c0       	rjmp	.+4      	; 0x1ecc <GPIO_writePin+0xb4>
    1ec8:	88 0f       	add	r24, r24
    1eca:	99 1f       	adc	r25, r25
    1ecc:	0a 94       	dec	r0
    1ece:	e2 f7       	brpl	.-8      	; 0x1ec8 <GPIO_writePin+0xb0>
    1ed0:	80 95       	com	r24
    1ed2:	84 23       	and	r24, r20
    1ed4:	8c 93       	st	X, r24
    1ed6:	83 c0       	rjmp	.+262    	; 0x1fde <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eda:	81 30       	cpi	r24, 0x01	; 1
    1edc:	a1 f4       	brne	.+40     	; 0x1f06 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1ede:	a8 e3       	ldi	r26, 0x38	; 56
    1ee0:	b0 e0       	ldi	r27, 0x00	; 0
    1ee2:	e8 e3       	ldi	r30, 0x38	; 56
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	80 81       	ld	r24, Z
    1ee8:	48 2f       	mov	r20, r24
    1eea:	8a 81       	ldd	r24, Y+2	; 0x02
    1eec:	28 2f       	mov	r18, r24
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	02 2e       	mov	r0, r18
    1ef6:	02 c0       	rjmp	.+4      	; 0x1efc <GPIO_writePin+0xe4>
    1ef8:	88 0f       	add	r24, r24
    1efa:	99 1f       	adc	r25, r25
    1efc:	0a 94       	dec	r0
    1efe:	e2 f7       	brpl	.-8      	; 0x1ef8 <GPIO_writePin+0xe0>
    1f00:	84 2b       	or	r24, r20
    1f02:	8c 93       	st	X, r24
    1f04:	6c c0       	rjmp	.+216    	; 0x1fde <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1f06:	a8 e3       	ldi	r26, 0x38	; 56
    1f08:	b0 e0       	ldi	r27, 0x00	; 0
    1f0a:	e8 e3       	ldi	r30, 0x38	; 56
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	80 81       	ld	r24, Z
    1f10:	48 2f       	mov	r20, r24
    1f12:	8a 81       	ldd	r24, Y+2	; 0x02
    1f14:	28 2f       	mov	r18, r24
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	02 2e       	mov	r0, r18
    1f1e:	02 c0       	rjmp	.+4      	; 0x1f24 <GPIO_writePin+0x10c>
    1f20:	88 0f       	add	r24, r24
    1f22:	99 1f       	adc	r25, r25
    1f24:	0a 94       	dec	r0
    1f26:	e2 f7       	brpl	.-8      	; 0x1f20 <GPIO_writePin+0x108>
    1f28:	80 95       	com	r24
    1f2a:	84 23       	and	r24, r20
    1f2c:	8c 93       	st	X, r24
    1f2e:	57 c0       	rjmp	.+174    	; 0x1fde <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1f30:	8b 81       	ldd	r24, Y+3	; 0x03
    1f32:	81 30       	cpi	r24, 0x01	; 1
    1f34:	a1 f4       	brne	.+40     	; 0x1f5e <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1f36:	a5 e3       	ldi	r26, 0x35	; 53
    1f38:	b0 e0       	ldi	r27, 0x00	; 0
    1f3a:	e5 e3       	ldi	r30, 0x35	; 53
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	80 81       	ld	r24, Z
    1f40:	48 2f       	mov	r20, r24
    1f42:	8a 81       	ldd	r24, Y+2	; 0x02
    1f44:	28 2f       	mov	r18, r24
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	02 2e       	mov	r0, r18
    1f4e:	02 c0       	rjmp	.+4      	; 0x1f54 <GPIO_writePin+0x13c>
    1f50:	88 0f       	add	r24, r24
    1f52:	99 1f       	adc	r25, r25
    1f54:	0a 94       	dec	r0
    1f56:	e2 f7       	brpl	.-8      	; 0x1f50 <GPIO_writePin+0x138>
    1f58:	84 2b       	or	r24, r20
    1f5a:	8c 93       	st	X, r24
    1f5c:	40 c0       	rjmp	.+128    	; 0x1fde <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1f5e:	a5 e3       	ldi	r26, 0x35	; 53
    1f60:	b0 e0       	ldi	r27, 0x00	; 0
    1f62:	e5 e3       	ldi	r30, 0x35	; 53
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	80 81       	ld	r24, Z
    1f68:	48 2f       	mov	r20, r24
    1f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6c:	28 2f       	mov	r18, r24
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	02 2e       	mov	r0, r18
    1f76:	02 c0       	rjmp	.+4      	; 0x1f7c <GPIO_writePin+0x164>
    1f78:	88 0f       	add	r24, r24
    1f7a:	99 1f       	adc	r25, r25
    1f7c:	0a 94       	dec	r0
    1f7e:	e2 f7       	brpl	.-8      	; 0x1f78 <GPIO_writePin+0x160>
    1f80:	80 95       	com	r24
    1f82:	84 23       	and	r24, r20
    1f84:	8c 93       	st	X, r24
    1f86:	2b c0       	rjmp	.+86     	; 0x1fde <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1f88:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8a:	81 30       	cpi	r24, 0x01	; 1
    1f8c:	a1 f4       	brne	.+40     	; 0x1fb6 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1f8e:	a2 e3       	ldi	r26, 0x32	; 50
    1f90:	b0 e0       	ldi	r27, 0x00	; 0
    1f92:	e2 e3       	ldi	r30, 0x32	; 50
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	80 81       	ld	r24, Z
    1f98:	48 2f       	mov	r20, r24
    1f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9c:	28 2f       	mov	r18, r24
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	81 e0       	ldi	r24, 0x01	; 1
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	02 2e       	mov	r0, r18
    1fa6:	02 c0       	rjmp	.+4      	; 0x1fac <GPIO_writePin+0x194>
    1fa8:	88 0f       	add	r24, r24
    1faa:	99 1f       	adc	r25, r25
    1fac:	0a 94       	dec	r0
    1fae:	e2 f7       	brpl	.-8      	; 0x1fa8 <GPIO_writePin+0x190>
    1fb0:	84 2b       	or	r24, r20
    1fb2:	8c 93       	st	X, r24
    1fb4:	14 c0       	rjmp	.+40     	; 0x1fde <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1fb6:	a2 e3       	ldi	r26, 0x32	; 50
    1fb8:	b0 e0       	ldi	r27, 0x00	; 0
    1fba:	e2 e3       	ldi	r30, 0x32	; 50
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	80 81       	ld	r24, Z
    1fc0:	48 2f       	mov	r20, r24
    1fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc4:	28 2f       	mov	r18, r24
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	81 e0       	ldi	r24, 0x01	; 1
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	02 2e       	mov	r0, r18
    1fce:	02 c0       	rjmp	.+4      	; 0x1fd4 <GPIO_writePin+0x1bc>
    1fd0:	88 0f       	add	r24, r24
    1fd2:	99 1f       	adc	r25, r25
    1fd4:	0a 94       	dec	r0
    1fd6:	e2 f7       	brpl	.-8      	; 0x1fd0 <GPIO_writePin+0x1b8>
    1fd8:	80 95       	com	r24
    1fda:	84 23       	and	r24, r20
    1fdc:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1fde:	0f 90       	pop	r0
    1fe0:	0f 90       	pop	r0
    1fe2:	0f 90       	pop	r0
    1fe4:	0f 90       	pop	r0
    1fe6:	0f 90       	pop	r0
    1fe8:	cf 91       	pop	r28
    1fea:	df 91       	pop	r29
    1fec:	08 95       	ret

00001fee <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1fee:	df 93       	push	r29
    1ff0:	cf 93       	push	r28
    1ff2:	00 d0       	rcall	.+0      	; 0x1ff4 <GPIO_readPin+0x6>
    1ff4:	00 d0       	rcall	.+0      	; 0x1ff6 <GPIO_readPin+0x8>
    1ff6:	0f 92       	push	r0
    1ff8:	cd b7       	in	r28, 0x3d	; 61
    1ffa:	de b7       	in	r29, 0x3e	; 62
    1ffc:	8a 83       	std	Y+2, r24	; 0x02
    1ffe:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    2000:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2002:	8b 81       	ldd	r24, Y+3	; 0x03
    2004:	88 30       	cpi	r24, 0x08	; 8
    2006:	08 f0       	brcs	.+2      	; 0x200a <GPIO_readPin+0x1c>
    2008:	84 c0       	rjmp	.+264    	; 0x2112 <GPIO_readPin+0x124>
    200a:	8a 81       	ldd	r24, Y+2	; 0x02
    200c:	84 30       	cpi	r24, 0x04	; 4
    200e:	08 f0       	brcs	.+2      	; 0x2012 <GPIO_readPin+0x24>
    2010:	80 c0       	rjmp	.+256    	; 0x2112 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2012:	8a 81       	ldd	r24, Y+2	; 0x02
    2014:	28 2f       	mov	r18, r24
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	3d 83       	std	Y+5, r19	; 0x05
    201a:	2c 83       	std	Y+4, r18	; 0x04
    201c:	4c 81       	ldd	r20, Y+4	; 0x04
    201e:	5d 81       	ldd	r21, Y+5	; 0x05
    2020:	41 30       	cpi	r20, 0x01	; 1
    2022:	51 05       	cpc	r21, r1
    2024:	79 f1       	breq	.+94     	; 0x2084 <GPIO_readPin+0x96>
    2026:	8c 81       	ldd	r24, Y+4	; 0x04
    2028:	9d 81       	ldd	r25, Y+5	; 0x05
    202a:	82 30       	cpi	r24, 0x02	; 2
    202c:	91 05       	cpc	r25, r1
    202e:	34 f4       	brge	.+12     	; 0x203c <GPIO_readPin+0x4e>
    2030:	2c 81       	ldd	r18, Y+4	; 0x04
    2032:	3d 81       	ldd	r19, Y+5	; 0x05
    2034:	21 15       	cp	r18, r1
    2036:	31 05       	cpc	r19, r1
    2038:	69 f0       	breq	.+26     	; 0x2054 <GPIO_readPin+0x66>
    203a:	6b c0       	rjmp	.+214    	; 0x2112 <GPIO_readPin+0x124>
    203c:	4c 81       	ldd	r20, Y+4	; 0x04
    203e:	5d 81       	ldd	r21, Y+5	; 0x05
    2040:	42 30       	cpi	r20, 0x02	; 2
    2042:	51 05       	cpc	r21, r1
    2044:	b9 f1       	breq	.+110    	; 0x20b4 <GPIO_readPin+0xc6>
    2046:	8c 81       	ldd	r24, Y+4	; 0x04
    2048:	9d 81       	ldd	r25, Y+5	; 0x05
    204a:	83 30       	cpi	r24, 0x03	; 3
    204c:	91 05       	cpc	r25, r1
    204e:	09 f4       	brne	.+2      	; 0x2052 <GPIO_readPin+0x64>
    2050:	49 c0       	rjmp	.+146    	; 0x20e4 <GPIO_readPin+0xf6>
    2052:	5f c0       	rjmp	.+190    	; 0x2112 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    2054:	e9 e3       	ldi	r30, 0x39	; 57
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	80 81       	ld	r24, Z
    205a:	28 2f       	mov	r18, r24
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	8b 81       	ldd	r24, Y+3	; 0x03
    2060:	88 2f       	mov	r24, r24
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	a9 01       	movw	r20, r18
    2066:	02 c0       	rjmp	.+4      	; 0x206c <GPIO_readPin+0x7e>
    2068:	55 95       	asr	r21
    206a:	47 95       	ror	r20
    206c:	8a 95       	dec	r24
    206e:	e2 f7       	brpl	.-8      	; 0x2068 <GPIO_readPin+0x7a>
    2070:	ca 01       	movw	r24, r20
    2072:	81 70       	andi	r24, 0x01	; 1
    2074:	90 70       	andi	r25, 0x00	; 0
    2076:	88 23       	and	r24, r24
    2078:	19 f0       	breq	.+6      	; 0x2080 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	89 83       	std	Y+1, r24	; 0x01
    207e:	49 c0       	rjmp	.+146    	; 0x2112 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2080:	19 82       	std	Y+1, r1	; 0x01
    2082:	47 c0       	rjmp	.+142    	; 0x2112 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2084:	e6 e3       	ldi	r30, 0x36	; 54
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	80 81       	ld	r24, Z
    208a:	28 2f       	mov	r18, r24
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	8b 81       	ldd	r24, Y+3	; 0x03
    2090:	88 2f       	mov	r24, r24
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	a9 01       	movw	r20, r18
    2096:	02 c0       	rjmp	.+4      	; 0x209c <GPIO_readPin+0xae>
    2098:	55 95       	asr	r21
    209a:	47 95       	ror	r20
    209c:	8a 95       	dec	r24
    209e:	e2 f7       	brpl	.-8      	; 0x2098 <GPIO_readPin+0xaa>
    20a0:	ca 01       	movw	r24, r20
    20a2:	81 70       	andi	r24, 0x01	; 1
    20a4:	90 70       	andi	r25, 0x00	; 0
    20a6:	88 23       	and	r24, r24
    20a8:	19 f0       	breq	.+6      	; 0x20b0 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	89 83       	std	Y+1, r24	; 0x01
    20ae:	31 c0       	rjmp	.+98     	; 0x2112 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    20b0:	19 82       	std	Y+1, r1	; 0x01
    20b2:	2f c0       	rjmp	.+94     	; 0x2112 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    20b4:	e3 e3       	ldi	r30, 0x33	; 51
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	28 2f       	mov	r18, r24
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	8b 81       	ldd	r24, Y+3	; 0x03
    20c0:	88 2f       	mov	r24, r24
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	a9 01       	movw	r20, r18
    20c6:	02 c0       	rjmp	.+4      	; 0x20cc <GPIO_readPin+0xde>
    20c8:	55 95       	asr	r21
    20ca:	47 95       	ror	r20
    20cc:	8a 95       	dec	r24
    20ce:	e2 f7       	brpl	.-8      	; 0x20c8 <GPIO_readPin+0xda>
    20d0:	ca 01       	movw	r24, r20
    20d2:	81 70       	andi	r24, 0x01	; 1
    20d4:	90 70       	andi	r25, 0x00	; 0
    20d6:	88 23       	and	r24, r24
    20d8:	19 f0       	breq	.+6      	; 0x20e0 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	89 83       	std	Y+1, r24	; 0x01
    20de:	19 c0       	rjmp	.+50     	; 0x2112 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    20e0:	19 82       	std	Y+1, r1	; 0x01
    20e2:	17 c0       	rjmp	.+46     	; 0x2112 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    20e4:	e0 e3       	ldi	r30, 0x30	; 48
    20e6:	f0 e0       	ldi	r31, 0x00	; 0
    20e8:	80 81       	ld	r24, Z
    20ea:	28 2f       	mov	r18, r24
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	8b 81       	ldd	r24, Y+3	; 0x03
    20f0:	88 2f       	mov	r24, r24
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	a9 01       	movw	r20, r18
    20f6:	02 c0       	rjmp	.+4      	; 0x20fc <GPIO_readPin+0x10e>
    20f8:	55 95       	asr	r21
    20fa:	47 95       	ror	r20
    20fc:	8a 95       	dec	r24
    20fe:	e2 f7       	brpl	.-8      	; 0x20f8 <GPIO_readPin+0x10a>
    2100:	ca 01       	movw	r24, r20
    2102:	81 70       	andi	r24, 0x01	; 1
    2104:	90 70       	andi	r25, 0x00	; 0
    2106:	88 23       	and	r24, r24
    2108:	19 f0       	breq	.+6      	; 0x2110 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	89 83       	std	Y+1, r24	; 0x01
    210e:	01 c0       	rjmp	.+2      	; 0x2112 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2110:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2112:	89 81       	ldd	r24, Y+1	; 0x01
}
    2114:	0f 90       	pop	r0
    2116:	0f 90       	pop	r0
    2118:	0f 90       	pop	r0
    211a:	0f 90       	pop	r0
    211c:	0f 90       	pop	r0
    211e:	cf 91       	pop	r28
    2120:	df 91       	pop	r29
    2122:	08 95       	ret

00002124 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2124:	df 93       	push	r29
    2126:	cf 93       	push	r28
    2128:	00 d0       	rcall	.+0      	; 0x212a <GPIO_setupPortDirection+0x6>
    212a:	00 d0       	rcall	.+0      	; 0x212c <GPIO_setupPortDirection+0x8>
    212c:	cd b7       	in	r28, 0x3d	; 61
    212e:	de b7       	in	r29, 0x3e	; 62
    2130:	89 83       	std	Y+1, r24	; 0x01
    2132:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2134:	89 81       	ldd	r24, Y+1	; 0x01
    2136:	84 30       	cpi	r24, 0x04	; 4
    2138:	90 f5       	brcc	.+100    	; 0x219e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    213a:	89 81       	ldd	r24, Y+1	; 0x01
    213c:	28 2f       	mov	r18, r24
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	3c 83       	std	Y+4, r19	; 0x04
    2142:	2b 83       	std	Y+3, r18	; 0x03
    2144:	8b 81       	ldd	r24, Y+3	; 0x03
    2146:	9c 81       	ldd	r25, Y+4	; 0x04
    2148:	81 30       	cpi	r24, 0x01	; 1
    214a:	91 05       	cpc	r25, r1
    214c:	d1 f0       	breq	.+52     	; 0x2182 <GPIO_setupPortDirection+0x5e>
    214e:	2b 81       	ldd	r18, Y+3	; 0x03
    2150:	3c 81       	ldd	r19, Y+4	; 0x04
    2152:	22 30       	cpi	r18, 0x02	; 2
    2154:	31 05       	cpc	r19, r1
    2156:	2c f4       	brge	.+10     	; 0x2162 <GPIO_setupPortDirection+0x3e>
    2158:	8b 81       	ldd	r24, Y+3	; 0x03
    215a:	9c 81       	ldd	r25, Y+4	; 0x04
    215c:	00 97       	sbiw	r24, 0x00	; 0
    215e:	61 f0       	breq	.+24     	; 0x2178 <GPIO_setupPortDirection+0x54>
    2160:	1e c0       	rjmp	.+60     	; 0x219e <GPIO_setupPortDirection+0x7a>
    2162:	2b 81       	ldd	r18, Y+3	; 0x03
    2164:	3c 81       	ldd	r19, Y+4	; 0x04
    2166:	22 30       	cpi	r18, 0x02	; 2
    2168:	31 05       	cpc	r19, r1
    216a:	81 f0       	breq	.+32     	; 0x218c <GPIO_setupPortDirection+0x68>
    216c:	8b 81       	ldd	r24, Y+3	; 0x03
    216e:	9c 81       	ldd	r25, Y+4	; 0x04
    2170:	83 30       	cpi	r24, 0x03	; 3
    2172:	91 05       	cpc	r25, r1
    2174:	81 f0       	breq	.+32     	; 0x2196 <GPIO_setupPortDirection+0x72>
    2176:	13 c0       	rjmp	.+38     	; 0x219e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2178:	ea e3       	ldi	r30, 0x3A	; 58
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	8a 81       	ldd	r24, Y+2	; 0x02
    217e:	80 83       	st	Z, r24
    2180:	0e c0       	rjmp	.+28     	; 0x219e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2182:	e7 e3       	ldi	r30, 0x37	; 55
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	8a 81       	ldd	r24, Y+2	; 0x02
    2188:	80 83       	st	Z, r24
    218a:	09 c0       	rjmp	.+18     	; 0x219e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    218c:	e4 e3       	ldi	r30, 0x34	; 52
    218e:	f0 e0       	ldi	r31, 0x00	; 0
    2190:	8a 81       	ldd	r24, Y+2	; 0x02
    2192:	80 83       	st	Z, r24
    2194:	04 c0       	rjmp	.+8      	; 0x219e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2196:	e1 e3       	ldi	r30, 0x31	; 49
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	8a 81       	ldd	r24, Y+2	; 0x02
    219c:	80 83       	st	Z, r24
			break;
		}
	}
}
    219e:	0f 90       	pop	r0
    21a0:	0f 90       	pop	r0
    21a2:	0f 90       	pop	r0
    21a4:	0f 90       	pop	r0
    21a6:	cf 91       	pop	r28
    21a8:	df 91       	pop	r29
    21aa:	08 95       	ret

000021ac <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    21ac:	df 93       	push	r29
    21ae:	cf 93       	push	r28
    21b0:	00 d0       	rcall	.+0      	; 0x21b2 <GPIO_writePort+0x6>
    21b2:	00 d0       	rcall	.+0      	; 0x21b4 <GPIO_writePort+0x8>
    21b4:	cd b7       	in	r28, 0x3d	; 61
    21b6:	de b7       	in	r29, 0x3e	; 62
    21b8:	89 83       	std	Y+1, r24	; 0x01
    21ba:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    21bc:	89 81       	ldd	r24, Y+1	; 0x01
    21be:	84 30       	cpi	r24, 0x04	; 4
    21c0:	90 f5       	brcc	.+100    	; 0x2226 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    21c2:	89 81       	ldd	r24, Y+1	; 0x01
    21c4:	28 2f       	mov	r18, r24
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	3c 83       	std	Y+4, r19	; 0x04
    21ca:	2b 83       	std	Y+3, r18	; 0x03
    21cc:	8b 81       	ldd	r24, Y+3	; 0x03
    21ce:	9c 81       	ldd	r25, Y+4	; 0x04
    21d0:	81 30       	cpi	r24, 0x01	; 1
    21d2:	91 05       	cpc	r25, r1
    21d4:	d1 f0       	breq	.+52     	; 0x220a <GPIO_writePort+0x5e>
    21d6:	2b 81       	ldd	r18, Y+3	; 0x03
    21d8:	3c 81       	ldd	r19, Y+4	; 0x04
    21da:	22 30       	cpi	r18, 0x02	; 2
    21dc:	31 05       	cpc	r19, r1
    21de:	2c f4       	brge	.+10     	; 0x21ea <GPIO_writePort+0x3e>
    21e0:	8b 81       	ldd	r24, Y+3	; 0x03
    21e2:	9c 81       	ldd	r25, Y+4	; 0x04
    21e4:	00 97       	sbiw	r24, 0x00	; 0
    21e6:	61 f0       	breq	.+24     	; 0x2200 <GPIO_writePort+0x54>
    21e8:	1e c0       	rjmp	.+60     	; 0x2226 <GPIO_writePort+0x7a>
    21ea:	2b 81       	ldd	r18, Y+3	; 0x03
    21ec:	3c 81       	ldd	r19, Y+4	; 0x04
    21ee:	22 30       	cpi	r18, 0x02	; 2
    21f0:	31 05       	cpc	r19, r1
    21f2:	81 f0       	breq	.+32     	; 0x2214 <GPIO_writePort+0x68>
    21f4:	8b 81       	ldd	r24, Y+3	; 0x03
    21f6:	9c 81       	ldd	r25, Y+4	; 0x04
    21f8:	83 30       	cpi	r24, 0x03	; 3
    21fa:	91 05       	cpc	r25, r1
    21fc:	81 f0       	breq	.+32     	; 0x221e <GPIO_writePort+0x72>
    21fe:	13 c0       	rjmp	.+38     	; 0x2226 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2200:	eb e3       	ldi	r30, 0x3B	; 59
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	8a 81       	ldd	r24, Y+2	; 0x02
    2206:	80 83       	st	Z, r24
    2208:	0e c0       	rjmp	.+28     	; 0x2226 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    220a:	e8 e3       	ldi	r30, 0x38	; 56
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	8a 81       	ldd	r24, Y+2	; 0x02
    2210:	80 83       	st	Z, r24
    2212:	09 c0       	rjmp	.+18     	; 0x2226 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2214:	e5 e3       	ldi	r30, 0x35	; 53
    2216:	f0 e0       	ldi	r31, 0x00	; 0
    2218:	8a 81       	ldd	r24, Y+2	; 0x02
    221a:	80 83       	st	Z, r24
    221c:	04 c0       	rjmp	.+8      	; 0x2226 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    221e:	e2 e3       	ldi	r30, 0x32	; 50
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	8a 81       	ldd	r24, Y+2	; 0x02
    2224:	80 83       	st	Z, r24
			break;
		}
	}
}
    2226:	0f 90       	pop	r0
    2228:	0f 90       	pop	r0
    222a:	0f 90       	pop	r0
    222c:	0f 90       	pop	r0
    222e:	cf 91       	pop	r28
    2230:	df 91       	pop	r29
    2232:	08 95       	ret

00002234 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2234:	df 93       	push	r29
    2236:	cf 93       	push	r28
    2238:	00 d0       	rcall	.+0      	; 0x223a <GPIO_readPort+0x6>
    223a:	00 d0       	rcall	.+0      	; 0x223c <GPIO_readPort+0x8>
    223c:	cd b7       	in	r28, 0x3d	; 61
    223e:	de b7       	in	r29, 0x3e	; 62
    2240:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2242:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2244:	8a 81       	ldd	r24, Y+2	; 0x02
    2246:	84 30       	cpi	r24, 0x04	; 4
    2248:	90 f5       	brcc	.+100    	; 0x22ae <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    224a:	8a 81       	ldd	r24, Y+2	; 0x02
    224c:	28 2f       	mov	r18, r24
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	3c 83       	std	Y+4, r19	; 0x04
    2252:	2b 83       	std	Y+3, r18	; 0x03
    2254:	8b 81       	ldd	r24, Y+3	; 0x03
    2256:	9c 81       	ldd	r25, Y+4	; 0x04
    2258:	81 30       	cpi	r24, 0x01	; 1
    225a:	91 05       	cpc	r25, r1
    225c:	d1 f0       	breq	.+52     	; 0x2292 <GPIO_readPort+0x5e>
    225e:	2b 81       	ldd	r18, Y+3	; 0x03
    2260:	3c 81       	ldd	r19, Y+4	; 0x04
    2262:	22 30       	cpi	r18, 0x02	; 2
    2264:	31 05       	cpc	r19, r1
    2266:	2c f4       	brge	.+10     	; 0x2272 <GPIO_readPort+0x3e>
    2268:	8b 81       	ldd	r24, Y+3	; 0x03
    226a:	9c 81       	ldd	r25, Y+4	; 0x04
    226c:	00 97       	sbiw	r24, 0x00	; 0
    226e:	61 f0       	breq	.+24     	; 0x2288 <GPIO_readPort+0x54>
    2270:	1e c0       	rjmp	.+60     	; 0x22ae <GPIO_readPort+0x7a>
    2272:	2b 81       	ldd	r18, Y+3	; 0x03
    2274:	3c 81       	ldd	r19, Y+4	; 0x04
    2276:	22 30       	cpi	r18, 0x02	; 2
    2278:	31 05       	cpc	r19, r1
    227a:	81 f0       	breq	.+32     	; 0x229c <GPIO_readPort+0x68>
    227c:	8b 81       	ldd	r24, Y+3	; 0x03
    227e:	9c 81       	ldd	r25, Y+4	; 0x04
    2280:	83 30       	cpi	r24, 0x03	; 3
    2282:	91 05       	cpc	r25, r1
    2284:	81 f0       	breq	.+32     	; 0x22a6 <GPIO_readPort+0x72>
    2286:	13 c0       	rjmp	.+38     	; 0x22ae <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2288:	e9 e3       	ldi	r30, 0x39	; 57
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	80 81       	ld	r24, Z
    228e:	89 83       	std	Y+1, r24	; 0x01
    2290:	0e c0       	rjmp	.+28     	; 0x22ae <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2292:	e6 e3       	ldi	r30, 0x36	; 54
    2294:	f0 e0       	ldi	r31, 0x00	; 0
    2296:	80 81       	ld	r24, Z
    2298:	89 83       	std	Y+1, r24	; 0x01
    229a:	09 c0       	rjmp	.+18     	; 0x22ae <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    229c:	e3 e3       	ldi	r30, 0x33	; 51
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	80 81       	ld	r24, Z
    22a2:	89 83       	std	Y+1, r24	; 0x01
    22a4:	04 c0       	rjmp	.+8      	; 0x22ae <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    22a6:	e0 e3       	ldi	r30, 0x30	; 48
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	80 81       	ld	r24, Z
    22ac:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    22ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    22b0:	0f 90       	pop	r0
    22b2:	0f 90       	pop	r0
    22b4:	0f 90       	pop	r0
    22b6:	0f 90       	pop	r0
    22b8:	cf 91       	pop	r28
    22ba:	df 91       	pop	r29
    22bc:	08 95       	ret

000022be <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    22be:	df 93       	push	r29
    22c0:	cf 93       	push	r28
    22c2:	00 d0       	rcall	.+0      	; 0x22c4 <KEYPAD_getPressedKey+0x6>
    22c4:	0f 92       	push	r0
    22c6:	cd b7       	in	r28, 0x3d	; 61
    22c8:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    22ca:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    22cc:	1b 82       	std	Y+3, r1	; 0x03
    22ce:	43 c0       	rjmp	.+134    	; 0x2356 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    22d0:	82 e0       	ldi	r24, 0x02	; 2
    22d2:	60 e0       	ldi	r22, 0x00	; 0
    22d4:	0e 94 92 10 	call	0x2124	; 0x2124 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    22d8:	8b 81       	ldd	r24, Y+3	; 0x03
    22da:	98 2f       	mov	r25, r24
    22dc:	9c 5f       	subi	r25, 0xFC	; 252
    22de:	82 e0       	ldi	r24, 0x02	; 2
    22e0:	69 2f       	mov	r22, r25
    22e2:	41 e0       	ldi	r20, 0x01	; 1
    22e4:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <GPIO_setupPinDirection>

#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    22e8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ea:	88 2f       	mov	r24, r24
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	9c 01       	movw	r18, r24
    22f0:	2c 5f       	subi	r18, 0xFC	; 252
    22f2:	3f 4f       	sbci	r19, 0xFF	; 255
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	02 c0       	rjmp	.+4      	; 0x22fe <KEYPAD_getPressedKey+0x40>
    22fa:	88 0f       	add	r24, r24
    22fc:	99 1f       	adc	r25, r25
    22fe:	2a 95       	dec	r18
    2300:	e2 f7       	brpl	.-8      	; 0x22fa <KEYPAD_getPressedKey+0x3c>
    2302:	80 95       	com	r24
    2304:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    2306:	82 e0       	ldi	r24, 0x02	; 2
    2308:	69 81       	ldd	r22, Y+1	; 0x01
    230a:	0e 94 d6 10 	call	0x21ac	; 0x21ac <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    230e:	1a 82       	std	Y+2, r1	; 0x02
    2310:	1c c0       	rjmp	.+56     	; 0x234a <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    2312:	82 e0       	ldi	r24, 0x02	; 2
    2314:	6a 81       	ldd	r22, Y+2	; 0x02
    2316:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <GPIO_readPin>
    231a:	88 23       	and	r24, r24
    231c:	99 f4       	brne	.+38     	; 0x2344 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    231e:	8a 81       	ldd	r24, Y+2	; 0x02
    2320:	88 2f       	mov	r24, r24
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	88 0f       	add	r24, r24
    2326:	99 1f       	adc	r25, r25
    2328:	88 0f       	add	r24, r24
    232a:	99 1f       	adc	r25, r25
    232c:	98 2f       	mov	r25, r24
    232e:	8b 81       	ldd	r24, Y+3	; 0x03
    2330:	89 0f       	add	r24, r25
    2332:	8f 5f       	subi	r24, 0xFF	; 255
    2334:	0e 94 b0 11 	call	0x2360	; 0x2360 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    2338:	0f 90       	pop	r0
    233a:	0f 90       	pop	r0
    233c:	0f 90       	pop	r0
    233e:	cf 91       	pop	r28
    2340:	df 91       	pop	r29
    2342:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    2344:	8a 81       	ldd	r24, Y+2	; 0x02
    2346:	8f 5f       	subi	r24, 0xFF	; 255
    2348:	8a 83       	std	Y+2, r24	; 0x02
    234a:	8a 81       	ldd	r24, Y+2	; 0x02
    234c:	84 30       	cpi	r24, 0x04	; 4
    234e:	08 f3       	brcs	.-62     	; 0x2312 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2350:	8b 81       	ldd	r24, Y+3	; 0x03
    2352:	8f 5f       	subi	r24, 0xFF	; 255
    2354:	8b 83       	std	Y+3, r24	; 0x03
    2356:	8b 81       	ldd	r24, Y+3	; 0x03
    2358:	84 30       	cpi	r24, 0x04	; 4
    235a:	08 f4       	brcc	.+2      	; 0x235e <KEYPAD_getPressedKey+0xa0>
    235c:	b9 cf       	rjmp	.-142    	; 0x22d0 <KEYPAD_getPressedKey+0x12>
    235e:	b6 cf       	rjmp	.-148    	; 0x22cc <KEYPAD_getPressedKey+0xe>

00002360 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2360:	df 93       	push	r29
    2362:	cf 93       	push	r28
    2364:	00 d0       	rcall	.+0      	; 0x2366 <KEYPAD_4x4_adjustKeyNumber+0x6>
    2366:	00 d0       	rcall	.+0      	; 0x2368 <KEYPAD_4x4_adjustKeyNumber+0x8>
    2368:	cd b7       	in	r28, 0x3d	; 61
    236a:	de b7       	in	r29, 0x3e	; 62
    236c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    236e:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2370:	8a 81       	ldd	r24, Y+2	; 0x02
    2372:	28 2f       	mov	r18, r24
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	3c 83       	std	Y+4, r19	; 0x04
    2378:	2b 83       	std	Y+3, r18	; 0x03
    237a:	8b 81       	ldd	r24, Y+3	; 0x03
    237c:	9c 81       	ldd	r25, Y+4	; 0x04
    237e:	88 30       	cpi	r24, 0x08	; 8
    2380:	91 05       	cpc	r25, r1
    2382:	09 f4       	brne	.+2      	; 0x2386 <KEYPAD_4x4_adjustKeyNumber+0x26>
    2384:	70 c0       	rjmp	.+224    	; 0x2466 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2386:	2b 81       	ldd	r18, Y+3	; 0x03
    2388:	3c 81       	ldd	r19, Y+4	; 0x04
    238a:	29 30       	cpi	r18, 0x09	; 9
    238c:	31 05       	cpc	r19, r1
    238e:	5c f5       	brge	.+86     	; 0x23e6 <KEYPAD_4x4_adjustKeyNumber+0x86>
    2390:	8b 81       	ldd	r24, Y+3	; 0x03
    2392:	9c 81       	ldd	r25, Y+4	; 0x04
    2394:	84 30       	cpi	r24, 0x04	; 4
    2396:	91 05       	cpc	r25, r1
    2398:	09 f4       	brne	.+2      	; 0x239c <KEYPAD_4x4_adjustKeyNumber+0x3c>
    239a:	59 c0       	rjmp	.+178    	; 0x244e <KEYPAD_4x4_adjustKeyNumber+0xee>
    239c:	2b 81       	ldd	r18, Y+3	; 0x03
    239e:	3c 81       	ldd	r19, Y+4	; 0x04
    23a0:	25 30       	cpi	r18, 0x05	; 5
    23a2:	31 05       	cpc	r19, r1
    23a4:	9c f4       	brge	.+38     	; 0x23cc <KEYPAD_4x4_adjustKeyNumber+0x6c>
    23a6:	8b 81       	ldd	r24, Y+3	; 0x03
    23a8:	9c 81       	ldd	r25, Y+4	; 0x04
    23aa:	82 30       	cpi	r24, 0x02	; 2
    23ac:	91 05       	cpc	r25, r1
    23ae:	09 f4       	brne	.+2      	; 0x23b2 <KEYPAD_4x4_adjustKeyNumber+0x52>
    23b0:	48 c0       	rjmp	.+144    	; 0x2442 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    23b2:	2b 81       	ldd	r18, Y+3	; 0x03
    23b4:	3c 81       	ldd	r19, Y+4	; 0x04
    23b6:	23 30       	cpi	r18, 0x03	; 3
    23b8:	31 05       	cpc	r19, r1
    23ba:	0c f0       	brlt	.+2      	; 0x23be <KEYPAD_4x4_adjustKeyNumber+0x5e>
    23bc:	45 c0       	rjmp	.+138    	; 0x2448 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    23be:	8b 81       	ldd	r24, Y+3	; 0x03
    23c0:	9c 81       	ldd	r25, Y+4	; 0x04
    23c2:	81 30       	cpi	r24, 0x01	; 1
    23c4:	91 05       	cpc	r25, r1
    23c6:	09 f4       	brne	.+2      	; 0x23ca <KEYPAD_4x4_adjustKeyNumber+0x6a>
    23c8:	39 c0       	rjmp	.+114    	; 0x243c <KEYPAD_4x4_adjustKeyNumber+0xdc>
    23ca:	67 c0       	rjmp	.+206    	; 0x249a <KEYPAD_4x4_adjustKeyNumber+0x13a>
    23cc:	2b 81       	ldd	r18, Y+3	; 0x03
    23ce:	3c 81       	ldd	r19, Y+4	; 0x04
    23d0:	26 30       	cpi	r18, 0x06	; 6
    23d2:	31 05       	cpc	r19, r1
    23d4:	09 f4       	brne	.+2      	; 0x23d8 <KEYPAD_4x4_adjustKeyNumber+0x78>
    23d6:	41 c0       	rjmp	.+130    	; 0x245a <KEYPAD_4x4_adjustKeyNumber+0xfa>
    23d8:	8b 81       	ldd	r24, Y+3	; 0x03
    23da:	9c 81       	ldd	r25, Y+4	; 0x04
    23dc:	87 30       	cpi	r24, 0x07	; 7
    23de:	91 05       	cpc	r25, r1
    23e0:	0c f0       	brlt	.+2      	; 0x23e4 <KEYPAD_4x4_adjustKeyNumber+0x84>
    23e2:	3e c0       	rjmp	.+124    	; 0x2460 <KEYPAD_4x4_adjustKeyNumber+0x100>
    23e4:	37 c0       	rjmp	.+110    	; 0x2454 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    23e6:	2b 81       	ldd	r18, Y+3	; 0x03
    23e8:	3c 81       	ldd	r19, Y+4	; 0x04
    23ea:	2c 30       	cpi	r18, 0x0C	; 12
    23ec:	31 05       	cpc	r19, r1
    23ee:	09 f4       	brne	.+2      	; 0x23f2 <KEYPAD_4x4_adjustKeyNumber+0x92>
    23f0:	46 c0       	rjmp	.+140    	; 0x247e <KEYPAD_4x4_adjustKeyNumber+0x11e>
    23f2:	8b 81       	ldd	r24, Y+3	; 0x03
    23f4:	9c 81       	ldd	r25, Y+4	; 0x04
    23f6:	8d 30       	cpi	r24, 0x0D	; 13
    23f8:	91 05       	cpc	r25, r1
    23fa:	5c f4       	brge	.+22     	; 0x2412 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    23fc:	2b 81       	ldd	r18, Y+3	; 0x03
    23fe:	3c 81       	ldd	r19, Y+4	; 0x04
    2400:	2a 30       	cpi	r18, 0x0A	; 10
    2402:	31 05       	cpc	r19, r1
    2404:	b1 f1       	breq	.+108    	; 0x2472 <KEYPAD_4x4_adjustKeyNumber+0x112>
    2406:	8b 81       	ldd	r24, Y+3	; 0x03
    2408:	9c 81       	ldd	r25, Y+4	; 0x04
    240a:	8b 30       	cpi	r24, 0x0B	; 11
    240c:	91 05       	cpc	r25, r1
    240e:	a4 f5       	brge	.+104    	; 0x2478 <KEYPAD_4x4_adjustKeyNumber+0x118>
    2410:	2d c0       	rjmp	.+90     	; 0x246c <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2412:	2b 81       	ldd	r18, Y+3	; 0x03
    2414:	3c 81       	ldd	r19, Y+4	; 0x04
    2416:	2e 30       	cpi	r18, 0x0E	; 14
    2418:	31 05       	cpc	r19, r1
    241a:	b9 f1       	breq	.+110    	; 0x248a <KEYPAD_4x4_adjustKeyNumber+0x12a>
    241c:	8b 81       	ldd	r24, Y+3	; 0x03
    241e:	9c 81       	ldd	r25, Y+4	; 0x04
    2420:	8e 30       	cpi	r24, 0x0E	; 14
    2422:	91 05       	cpc	r25, r1
    2424:	7c f1       	brlt	.+94     	; 0x2484 <KEYPAD_4x4_adjustKeyNumber+0x124>
    2426:	2b 81       	ldd	r18, Y+3	; 0x03
    2428:	3c 81       	ldd	r19, Y+4	; 0x04
    242a:	2f 30       	cpi	r18, 0x0F	; 15
    242c:	31 05       	cpc	r19, r1
    242e:	79 f1       	breq	.+94     	; 0x248e <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2430:	8b 81       	ldd	r24, Y+3	; 0x03
    2432:	9c 81       	ldd	r25, Y+4	; 0x04
    2434:	80 31       	cpi	r24, 0x10	; 16
    2436:	91 05       	cpc	r25, r1
    2438:	69 f1       	breq	.+90     	; 0x2494 <KEYPAD_4x4_adjustKeyNumber+0x134>
    243a:	2f c0       	rjmp	.+94     	; 0x249a <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    243c:	87 e0       	ldi	r24, 0x07	; 7
    243e:	89 83       	std	Y+1, r24	; 0x01
    2440:	2e c0       	rjmp	.+92     	; 0x249e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2442:	88 e0       	ldi	r24, 0x08	; 8
    2444:	89 83       	std	Y+1, r24	; 0x01
    2446:	2b c0       	rjmp	.+86     	; 0x249e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2448:	89 e0       	ldi	r24, 0x09	; 9
    244a:	89 83       	std	Y+1, r24	; 0x01
    244c:	28 c0       	rjmp	.+80     	; 0x249e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    244e:	85 e2       	ldi	r24, 0x25	; 37
    2450:	89 83       	std	Y+1, r24	; 0x01
    2452:	25 c0       	rjmp	.+74     	; 0x249e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2454:	84 e0       	ldi	r24, 0x04	; 4
    2456:	89 83       	std	Y+1, r24	; 0x01
    2458:	22 c0       	rjmp	.+68     	; 0x249e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    245a:	85 e0       	ldi	r24, 0x05	; 5
    245c:	89 83       	std	Y+1, r24	; 0x01
    245e:	1f c0       	rjmp	.+62     	; 0x249e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2460:	86 e0       	ldi	r24, 0x06	; 6
    2462:	89 83       	std	Y+1, r24	; 0x01
    2464:	1c c0       	rjmp	.+56     	; 0x249e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2466:	8a e2       	ldi	r24, 0x2A	; 42
    2468:	89 83       	std	Y+1, r24	; 0x01
    246a:	19 c0       	rjmp	.+50     	; 0x249e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    246c:	81 e0       	ldi	r24, 0x01	; 1
    246e:	89 83       	std	Y+1, r24	; 0x01
    2470:	16 c0       	rjmp	.+44     	; 0x249e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2472:	82 e0       	ldi	r24, 0x02	; 2
    2474:	89 83       	std	Y+1, r24	; 0x01
    2476:	13 c0       	rjmp	.+38     	; 0x249e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    2478:	83 e0       	ldi	r24, 0x03	; 3
    247a:	89 83       	std	Y+1, r24	; 0x01
    247c:	10 c0       	rjmp	.+32     	; 0x249e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    247e:	8d e2       	ldi	r24, 0x2D	; 45
    2480:	89 83       	std	Y+1, r24	; 0x01
    2482:	0d c0       	rjmp	.+26     	; 0x249e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2484:	8d e0       	ldi	r24, 0x0D	; 13
    2486:	89 83       	std	Y+1, r24	; 0x01
    2488:	0a c0       	rjmp	.+20     	; 0x249e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    248a:	19 82       	std	Y+1, r1	; 0x01
    248c:	08 c0       	rjmp	.+16     	; 0x249e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    248e:	8d e3       	ldi	r24, 0x3D	; 61
    2490:	89 83       	std	Y+1, r24	; 0x01
    2492:	05 c0       	rjmp	.+10     	; 0x249e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2494:	8b e2       	ldi	r24, 0x2B	; 43
    2496:	89 83       	std	Y+1, r24	; 0x01
    2498:	02 c0       	rjmp	.+4      	; 0x249e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    249a:	8a 81       	ldd	r24, Y+2	; 0x02
    249c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    249e:	89 81       	ldd	r24, Y+1	; 0x01
} 
    24a0:	0f 90       	pop	r0
    24a2:	0f 90       	pop	r0
    24a4:	0f 90       	pop	r0
    24a6:	0f 90       	pop	r0
    24a8:	cf 91       	pop	r28
    24aa:	df 91       	pop	r29
    24ac:	08 95       	ret

000024ae <LCD_sendCommand>:
#include"common_macros.h"
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command) {
    24ae:	df 93       	push	r29
    24b0:	cf 93       	push	r28
    24b2:	cd b7       	in	r28, 0x3d	; 61
    24b4:	de b7       	in	r29, 0x3e	; 62
    24b6:	e9 97       	sbiw	r28, 0x39	; 57
    24b8:	0f b6       	in	r0, 0x3f	; 63
    24ba:	f8 94       	cli
    24bc:	de bf       	out	0x3e, r29	; 62
    24be:	0f be       	out	0x3f, r0	; 63
    24c0:	cd bf       	out	0x3d, r28	; 61
    24c2:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	61 e0       	ldi	r22, 0x01	; 1
    24c8:	40 e0       	ldi	r20, 0x00	; 0
    24ca:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <GPIO_writePin>
    24ce:	80 e0       	ldi	r24, 0x00	; 0
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	a0 e8       	ldi	r26, 0x80	; 128
    24d4:	bf e3       	ldi	r27, 0x3F	; 63
    24d6:	8d ab       	std	Y+53, r24	; 0x35
    24d8:	9e ab       	std	Y+54, r25	; 0x36
    24da:	af ab       	std	Y+55, r26	; 0x37
    24dc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24de:	6d a9       	ldd	r22, Y+53	; 0x35
    24e0:	7e a9       	ldd	r23, Y+54	; 0x36
    24e2:	8f a9       	ldd	r24, Y+55	; 0x37
    24e4:	98 ad       	ldd	r25, Y+56	; 0x38
    24e6:	20 e0       	ldi	r18, 0x00	; 0
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	4a ef       	ldi	r20, 0xFA	; 250
    24ec:	54 e4       	ldi	r21, 0x44	; 68
    24ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f2:	dc 01       	movw	r26, r24
    24f4:	cb 01       	movw	r24, r22
    24f6:	89 ab       	std	Y+49, r24	; 0x31
    24f8:	9a ab       	std	Y+50, r25	; 0x32
    24fa:	ab ab       	std	Y+51, r26	; 0x33
    24fc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    24fe:	69 a9       	ldd	r22, Y+49	; 0x31
    2500:	7a a9       	ldd	r23, Y+50	; 0x32
    2502:	8b a9       	ldd	r24, Y+51	; 0x33
    2504:	9c a9       	ldd	r25, Y+52	; 0x34
    2506:	20 e0       	ldi	r18, 0x00	; 0
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	40 e8       	ldi	r20, 0x80	; 128
    250c:	5f e3       	ldi	r21, 0x3F	; 63
    250e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2512:	88 23       	and	r24, r24
    2514:	2c f4       	brge	.+10     	; 0x2520 <LCD_sendCommand+0x72>
		__ticks = 1;
    2516:	81 e0       	ldi	r24, 0x01	; 1
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	98 ab       	std	Y+48, r25	; 0x30
    251c:	8f a7       	std	Y+47, r24	; 0x2f
    251e:	3f c0       	rjmp	.+126    	; 0x259e <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    2520:	69 a9       	ldd	r22, Y+49	; 0x31
    2522:	7a a9       	ldd	r23, Y+50	; 0x32
    2524:	8b a9       	ldd	r24, Y+51	; 0x33
    2526:	9c a9       	ldd	r25, Y+52	; 0x34
    2528:	20 e0       	ldi	r18, 0x00	; 0
    252a:	3f ef       	ldi	r19, 0xFF	; 255
    252c:	4f e7       	ldi	r20, 0x7F	; 127
    252e:	57 e4       	ldi	r21, 0x47	; 71
    2530:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2534:	18 16       	cp	r1, r24
    2536:	4c f5       	brge	.+82     	; 0x258a <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2538:	6d a9       	ldd	r22, Y+53	; 0x35
    253a:	7e a9       	ldd	r23, Y+54	; 0x36
    253c:	8f a9       	ldd	r24, Y+55	; 0x37
    253e:	98 ad       	ldd	r25, Y+56	; 0x38
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	40 e2       	ldi	r20, 0x20	; 32
    2546:	51 e4       	ldi	r21, 0x41	; 65
    2548:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    254c:	dc 01       	movw	r26, r24
    254e:	cb 01       	movw	r24, r22
    2550:	bc 01       	movw	r22, r24
    2552:	cd 01       	movw	r24, r26
    2554:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	98 ab       	std	Y+48, r25	; 0x30
    255e:	8f a7       	std	Y+47, r24	; 0x2f
    2560:	0f c0       	rjmp	.+30     	; 0x2580 <LCD_sendCommand+0xd2>
    2562:	88 ec       	ldi	r24, 0xC8	; 200
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	9e a7       	std	Y+46, r25	; 0x2e
    2568:	8d a7       	std	Y+45, r24	; 0x2d
    256a:	8d a5       	ldd	r24, Y+45	; 0x2d
    256c:	9e a5       	ldd	r25, Y+46	; 0x2e
    256e:	01 97       	sbiw	r24, 0x01	; 1
    2570:	f1 f7       	brne	.-4      	; 0x256e <LCD_sendCommand+0xc0>
    2572:	9e a7       	std	Y+46, r25	; 0x2e
    2574:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2576:	8f a5       	ldd	r24, Y+47	; 0x2f
    2578:	98 a9       	ldd	r25, Y+48	; 0x30
    257a:	01 97       	sbiw	r24, 0x01	; 1
    257c:	98 ab       	std	Y+48, r25	; 0x30
    257e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2580:	8f a5       	ldd	r24, Y+47	; 0x2f
    2582:	98 a9       	ldd	r25, Y+48	; 0x30
    2584:	00 97       	sbiw	r24, 0x00	; 0
    2586:	69 f7       	brne	.-38     	; 0x2562 <LCD_sendCommand+0xb4>
    2588:	14 c0       	rjmp	.+40     	; 0x25b2 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    258a:	69 a9       	ldd	r22, Y+49	; 0x31
    258c:	7a a9       	ldd	r23, Y+50	; 0x32
    258e:	8b a9       	ldd	r24, Y+51	; 0x33
    2590:	9c a9       	ldd	r25, Y+52	; 0x34
    2592:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2596:	dc 01       	movw	r26, r24
    2598:	cb 01       	movw	r24, r22
    259a:	98 ab       	std	Y+48, r25	; 0x30
    259c:	8f a7       	std	Y+47, r24	; 0x2f
    259e:	8f a5       	ldd	r24, Y+47	; 0x2f
    25a0:	98 a9       	ldd	r25, Y+48	; 0x30
    25a2:	9c a7       	std	Y+44, r25	; 0x2c
    25a4:	8b a7       	std	Y+43, r24	; 0x2b
    25a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    25a8:	9c a5       	ldd	r25, Y+44	; 0x2c
    25aa:	01 97       	sbiw	r24, 0x01	; 1
    25ac:	f1 f7       	brne	.-4      	; 0x25aa <LCD_sendCommand+0xfc>
    25ae:	9c a7       	std	Y+44, r25	; 0x2c
    25b0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    25b2:	81 e0       	ldi	r24, 0x01	; 1
    25b4:	60 e0       	ldi	r22, 0x00	; 0
    25b6:	41 e0       	ldi	r20, 0x01	; 1
    25b8:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <GPIO_writePin>
    25bc:	80 e0       	ldi	r24, 0x00	; 0
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	a0 e8       	ldi	r26, 0x80	; 128
    25c2:	bf e3       	ldi	r27, 0x3F	; 63
    25c4:	8f a3       	std	Y+39, r24	; 0x27
    25c6:	98 a7       	std	Y+40, r25	; 0x28
    25c8:	a9 a7       	std	Y+41, r26	; 0x29
    25ca:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25cc:	6f a1       	ldd	r22, Y+39	; 0x27
    25ce:	78 a5       	ldd	r23, Y+40	; 0x28
    25d0:	89 a5       	ldd	r24, Y+41	; 0x29
    25d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    25d4:	20 e0       	ldi	r18, 0x00	; 0
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	4a ef       	ldi	r20, 0xFA	; 250
    25da:	54 e4       	ldi	r21, 0x44	; 68
    25dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e0:	dc 01       	movw	r26, r24
    25e2:	cb 01       	movw	r24, r22
    25e4:	8b a3       	std	Y+35, r24	; 0x23
    25e6:	9c a3       	std	Y+36, r25	; 0x24
    25e8:	ad a3       	std	Y+37, r26	; 0x25
    25ea:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    25ec:	6b a1       	ldd	r22, Y+35	; 0x23
    25ee:	7c a1       	ldd	r23, Y+36	; 0x24
    25f0:	8d a1       	ldd	r24, Y+37	; 0x25
    25f2:	9e a1       	ldd	r25, Y+38	; 0x26
    25f4:	20 e0       	ldi	r18, 0x00	; 0
    25f6:	30 e0       	ldi	r19, 0x00	; 0
    25f8:	40 e8       	ldi	r20, 0x80	; 128
    25fa:	5f e3       	ldi	r21, 0x3F	; 63
    25fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2600:	88 23       	and	r24, r24
    2602:	2c f4       	brge	.+10     	; 0x260e <LCD_sendCommand+0x160>
		__ticks = 1;
    2604:	81 e0       	ldi	r24, 0x01	; 1
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	9a a3       	std	Y+34, r25	; 0x22
    260a:	89 a3       	std	Y+33, r24	; 0x21
    260c:	3f c0       	rjmp	.+126    	; 0x268c <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    260e:	6b a1       	ldd	r22, Y+35	; 0x23
    2610:	7c a1       	ldd	r23, Y+36	; 0x24
    2612:	8d a1       	ldd	r24, Y+37	; 0x25
    2614:	9e a1       	ldd	r25, Y+38	; 0x26
    2616:	20 e0       	ldi	r18, 0x00	; 0
    2618:	3f ef       	ldi	r19, 0xFF	; 255
    261a:	4f e7       	ldi	r20, 0x7F	; 127
    261c:	57 e4       	ldi	r21, 0x47	; 71
    261e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2622:	18 16       	cp	r1, r24
    2624:	4c f5       	brge	.+82     	; 0x2678 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2626:	6f a1       	ldd	r22, Y+39	; 0x27
    2628:	78 a5       	ldd	r23, Y+40	; 0x28
    262a:	89 a5       	ldd	r24, Y+41	; 0x29
    262c:	9a a5       	ldd	r25, Y+42	; 0x2a
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	40 e2       	ldi	r20, 0x20	; 32
    2634:	51 e4       	ldi	r21, 0x41	; 65
    2636:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    263a:	dc 01       	movw	r26, r24
    263c:	cb 01       	movw	r24, r22
    263e:	bc 01       	movw	r22, r24
    2640:	cd 01       	movw	r24, r26
    2642:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2646:	dc 01       	movw	r26, r24
    2648:	cb 01       	movw	r24, r22
    264a:	9a a3       	std	Y+34, r25	; 0x22
    264c:	89 a3       	std	Y+33, r24	; 0x21
    264e:	0f c0       	rjmp	.+30     	; 0x266e <LCD_sendCommand+0x1c0>
    2650:	88 ec       	ldi	r24, 0xC8	; 200
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	98 a3       	std	Y+32, r25	; 0x20
    2656:	8f 8f       	std	Y+31, r24	; 0x1f
    2658:	8f 8d       	ldd	r24, Y+31	; 0x1f
    265a:	98 a1       	ldd	r25, Y+32	; 0x20
    265c:	01 97       	sbiw	r24, 0x01	; 1
    265e:	f1 f7       	brne	.-4      	; 0x265c <LCD_sendCommand+0x1ae>
    2660:	98 a3       	std	Y+32, r25	; 0x20
    2662:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2664:	89 a1       	ldd	r24, Y+33	; 0x21
    2666:	9a a1       	ldd	r25, Y+34	; 0x22
    2668:	01 97       	sbiw	r24, 0x01	; 1
    266a:	9a a3       	std	Y+34, r25	; 0x22
    266c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    266e:	89 a1       	ldd	r24, Y+33	; 0x21
    2670:	9a a1       	ldd	r25, Y+34	; 0x22
    2672:	00 97       	sbiw	r24, 0x00	; 0
    2674:	69 f7       	brne	.-38     	; 0x2650 <LCD_sendCommand+0x1a2>
    2676:	14 c0       	rjmp	.+40     	; 0x26a0 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2678:	6b a1       	ldd	r22, Y+35	; 0x23
    267a:	7c a1       	ldd	r23, Y+36	; 0x24
    267c:	8d a1       	ldd	r24, Y+37	; 0x25
    267e:	9e a1       	ldd	r25, Y+38	; 0x26
    2680:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2684:	dc 01       	movw	r26, r24
    2686:	cb 01       	movw	r24, r22
    2688:	9a a3       	std	Y+34, r25	; 0x22
    268a:	89 a3       	std	Y+33, r24	; 0x21
    268c:	89 a1       	ldd	r24, Y+33	; 0x21
    268e:	9a a1       	ldd	r25, Y+34	; 0x22
    2690:	9e 8f       	std	Y+30, r25	; 0x1e
    2692:	8d 8f       	std	Y+29, r24	; 0x1d
    2694:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2696:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2698:	01 97       	sbiw	r24, 0x01	; 1
    269a:	f1 f7       	brne	.-4      	; 0x2698 <LCD_sendCommand+0x1ea>
    269c:	9e 8f       	std	Y+30, r25	; 0x1e
    269e:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(command, 3));
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
	_delay_ms(1);
#elif(LCD_DATA_BITS_MODE==8)
	GPIO_writePort(LCD_DATA_PORT_ID,command);
    26a0:	80 e0       	ldi	r24, 0x00	; 0
    26a2:	69 ad       	ldd	r22, Y+57	; 0x39
    26a4:	0e 94 d6 10 	call	0x21ac	; 0x21ac <GPIO_writePort>
    26a8:	80 e0       	ldi	r24, 0x00	; 0
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	a0 e8       	ldi	r26, 0x80	; 128
    26ae:	bf e3       	ldi	r27, 0x3F	; 63
    26b0:	89 8f       	std	Y+25, r24	; 0x19
    26b2:	9a 8f       	std	Y+26, r25	; 0x1a
    26b4:	ab 8f       	std	Y+27, r26	; 0x1b
    26b6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26b8:	69 8d       	ldd	r22, Y+25	; 0x19
    26ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	4a ef       	ldi	r20, 0xFA	; 250
    26c6:	54 e4       	ldi	r21, 0x44	; 68
    26c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	8d 8b       	std	Y+21, r24	; 0x15
    26d2:	9e 8b       	std	Y+22, r25	; 0x16
    26d4:	af 8b       	std	Y+23, r26	; 0x17
    26d6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26d8:	6d 89       	ldd	r22, Y+21	; 0x15
    26da:	7e 89       	ldd	r23, Y+22	; 0x16
    26dc:	8f 89       	ldd	r24, Y+23	; 0x17
    26de:	98 8d       	ldd	r25, Y+24	; 0x18
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	40 e8       	ldi	r20, 0x80	; 128
    26e6:	5f e3       	ldi	r21, 0x3F	; 63
    26e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26ec:	88 23       	and	r24, r24
    26ee:	2c f4       	brge	.+10     	; 0x26fa <LCD_sendCommand+0x24c>
		__ticks = 1;
    26f0:	81 e0       	ldi	r24, 0x01	; 1
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	9c 8b       	std	Y+20, r25	; 0x14
    26f6:	8b 8b       	std	Y+19, r24	; 0x13
    26f8:	3f c0       	rjmp	.+126    	; 0x2778 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    26fa:	6d 89       	ldd	r22, Y+21	; 0x15
    26fc:	7e 89       	ldd	r23, Y+22	; 0x16
    26fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2700:	98 8d       	ldd	r25, Y+24	; 0x18
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	3f ef       	ldi	r19, 0xFF	; 255
    2706:	4f e7       	ldi	r20, 0x7F	; 127
    2708:	57 e4       	ldi	r21, 0x47	; 71
    270a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    270e:	18 16       	cp	r1, r24
    2710:	4c f5       	brge	.+82     	; 0x2764 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2712:	69 8d       	ldd	r22, Y+25	; 0x19
    2714:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2716:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2718:	9c 8d       	ldd	r25, Y+28	; 0x1c
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	40 e2       	ldi	r20, 0x20	; 32
    2720:	51 e4       	ldi	r21, 0x41	; 65
    2722:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2726:	dc 01       	movw	r26, r24
    2728:	cb 01       	movw	r24, r22
    272a:	bc 01       	movw	r22, r24
    272c:	cd 01       	movw	r24, r26
    272e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	9c 8b       	std	Y+20, r25	; 0x14
    2738:	8b 8b       	std	Y+19, r24	; 0x13
    273a:	0f c0       	rjmp	.+30     	; 0x275a <LCD_sendCommand+0x2ac>
    273c:	88 ec       	ldi	r24, 0xC8	; 200
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	9a 8b       	std	Y+18, r25	; 0x12
    2742:	89 8b       	std	Y+17, r24	; 0x11
    2744:	89 89       	ldd	r24, Y+17	; 0x11
    2746:	9a 89       	ldd	r25, Y+18	; 0x12
    2748:	01 97       	sbiw	r24, 0x01	; 1
    274a:	f1 f7       	brne	.-4      	; 0x2748 <LCD_sendCommand+0x29a>
    274c:	9a 8b       	std	Y+18, r25	; 0x12
    274e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2750:	8b 89       	ldd	r24, Y+19	; 0x13
    2752:	9c 89       	ldd	r25, Y+20	; 0x14
    2754:	01 97       	sbiw	r24, 0x01	; 1
    2756:	9c 8b       	std	Y+20, r25	; 0x14
    2758:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    275a:	8b 89       	ldd	r24, Y+19	; 0x13
    275c:	9c 89       	ldd	r25, Y+20	; 0x14
    275e:	00 97       	sbiw	r24, 0x00	; 0
    2760:	69 f7       	brne	.-38     	; 0x273c <LCD_sendCommand+0x28e>
    2762:	14 c0       	rjmp	.+40     	; 0x278c <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2764:	6d 89       	ldd	r22, Y+21	; 0x15
    2766:	7e 89       	ldd	r23, Y+22	; 0x16
    2768:	8f 89       	ldd	r24, Y+23	; 0x17
    276a:	98 8d       	ldd	r25, Y+24	; 0x18
    276c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2770:	dc 01       	movw	r26, r24
    2772:	cb 01       	movw	r24, r22
    2774:	9c 8b       	std	Y+20, r25	; 0x14
    2776:	8b 8b       	std	Y+19, r24	; 0x13
    2778:	8b 89       	ldd	r24, Y+19	; 0x13
    277a:	9c 89       	ldd	r25, Y+20	; 0x14
    277c:	98 8b       	std	Y+16, r25	; 0x10
    277e:	8f 87       	std	Y+15, r24	; 0x0f
    2780:	8f 85       	ldd	r24, Y+15	; 0x0f
    2782:	98 89       	ldd	r25, Y+16	; 0x10
    2784:	01 97       	sbiw	r24, 0x01	; 1
    2786:	f1 f7       	brne	.-4      	; 0x2784 <LCD_sendCommand+0x2d6>
    2788:	98 8b       	std	Y+16, r25	; 0x10
    278a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	60 e0       	ldi	r22, 0x00	; 0
    2790:	40 e0       	ldi	r20, 0x00	; 0
    2792:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <GPIO_writePin>
    2796:	80 e0       	ldi	r24, 0x00	; 0
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	a0 e8       	ldi	r26, 0x80	; 128
    279c:	bf e3       	ldi	r27, 0x3F	; 63
    279e:	8b 87       	std	Y+11, r24	; 0x0b
    27a0:	9c 87       	std	Y+12, r25	; 0x0c
    27a2:	ad 87       	std	Y+13, r26	; 0x0d
    27a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    27a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    27aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    27ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    27ae:	20 e0       	ldi	r18, 0x00	; 0
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	4a ef       	ldi	r20, 0xFA	; 250
    27b4:	54 e4       	ldi	r21, 0x44	; 68
    27b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ba:	dc 01       	movw	r26, r24
    27bc:	cb 01       	movw	r24, r22
    27be:	8f 83       	std	Y+7, r24	; 0x07
    27c0:	98 87       	std	Y+8, r25	; 0x08
    27c2:	a9 87       	std	Y+9, r26	; 0x09
    27c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27c6:	6f 81       	ldd	r22, Y+7	; 0x07
    27c8:	78 85       	ldd	r23, Y+8	; 0x08
    27ca:	89 85       	ldd	r24, Y+9	; 0x09
    27cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ce:	20 e0       	ldi	r18, 0x00	; 0
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	40 e8       	ldi	r20, 0x80	; 128
    27d4:	5f e3       	ldi	r21, 0x3F	; 63
    27d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27da:	88 23       	and	r24, r24
    27dc:	2c f4       	brge	.+10     	; 0x27e8 <LCD_sendCommand+0x33a>
		__ticks = 1;
    27de:	81 e0       	ldi	r24, 0x01	; 1
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	9e 83       	std	Y+6, r25	; 0x06
    27e4:	8d 83       	std	Y+5, r24	; 0x05
    27e6:	3f c0       	rjmp	.+126    	; 0x2866 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    27e8:	6f 81       	ldd	r22, Y+7	; 0x07
    27ea:	78 85       	ldd	r23, Y+8	; 0x08
    27ec:	89 85       	ldd	r24, Y+9	; 0x09
    27ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f0:	20 e0       	ldi	r18, 0x00	; 0
    27f2:	3f ef       	ldi	r19, 0xFF	; 255
    27f4:	4f e7       	ldi	r20, 0x7F	; 127
    27f6:	57 e4       	ldi	r21, 0x47	; 71
    27f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27fc:	18 16       	cp	r1, r24
    27fe:	4c f5       	brge	.+82     	; 0x2852 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2800:	6b 85       	ldd	r22, Y+11	; 0x0b
    2802:	7c 85       	ldd	r23, Y+12	; 0x0c
    2804:	8d 85       	ldd	r24, Y+13	; 0x0d
    2806:	9e 85       	ldd	r25, Y+14	; 0x0e
    2808:	20 e0       	ldi	r18, 0x00	; 0
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	40 e2       	ldi	r20, 0x20	; 32
    280e:	51 e4       	ldi	r21, 0x41	; 65
    2810:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2814:	dc 01       	movw	r26, r24
    2816:	cb 01       	movw	r24, r22
    2818:	bc 01       	movw	r22, r24
    281a:	cd 01       	movw	r24, r26
    281c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2820:	dc 01       	movw	r26, r24
    2822:	cb 01       	movw	r24, r22
    2824:	9e 83       	std	Y+6, r25	; 0x06
    2826:	8d 83       	std	Y+5, r24	; 0x05
    2828:	0f c0       	rjmp	.+30     	; 0x2848 <LCD_sendCommand+0x39a>
    282a:	88 ec       	ldi	r24, 0xC8	; 200
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	9c 83       	std	Y+4, r25	; 0x04
    2830:	8b 83       	std	Y+3, r24	; 0x03
    2832:	8b 81       	ldd	r24, Y+3	; 0x03
    2834:	9c 81       	ldd	r25, Y+4	; 0x04
    2836:	01 97       	sbiw	r24, 0x01	; 1
    2838:	f1 f7       	brne	.-4      	; 0x2836 <LCD_sendCommand+0x388>
    283a:	9c 83       	std	Y+4, r25	; 0x04
    283c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    283e:	8d 81       	ldd	r24, Y+5	; 0x05
    2840:	9e 81       	ldd	r25, Y+6	; 0x06
    2842:	01 97       	sbiw	r24, 0x01	; 1
    2844:	9e 83       	std	Y+6, r25	; 0x06
    2846:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2848:	8d 81       	ldd	r24, Y+5	; 0x05
    284a:	9e 81       	ldd	r25, Y+6	; 0x06
    284c:	00 97       	sbiw	r24, 0x00	; 0
    284e:	69 f7       	brne	.-38     	; 0x282a <LCD_sendCommand+0x37c>
    2850:	14 c0       	rjmp	.+40     	; 0x287a <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2852:	6f 81       	ldd	r22, Y+7	; 0x07
    2854:	78 85       	ldd	r23, Y+8	; 0x08
    2856:	89 85       	ldd	r24, Y+9	; 0x09
    2858:	9a 85       	ldd	r25, Y+10	; 0x0a
    285a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    285e:	dc 01       	movw	r26, r24
    2860:	cb 01       	movw	r24, r22
    2862:	9e 83       	std	Y+6, r25	; 0x06
    2864:	8d 83       	std	Y+5, r24	; 0x05
    2866:	8d 81       	ldd	r24, Y+5	; 0x05
    2868:	9e 81       	ldd	r25, Y+6	; 0x06
    286a:	9a 83       	std	Y+2, r25	; 0x02
    286c:	89 83       	std	Y+1, r24	; 0x01
    286e:	89 81       	ldd	r24, Y+1	; 0x01
    2870:	9a 81       	ldd	r25, Y+2	; 0x02
    2872:	01 97       	sbiw	r24, 0x01	; 1
    2874:	f1 f7       	brne	.-4      	; 0x2872 <LCD_sendCommand+0x3c4>
    2876:	9a 83       	std	Y+2, r25	; 0x02
    2878:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
#endif
}
    287a:	e9 96       	adiw	r28, 0x39	; 57
    287c:	0f b6       	in	r0, 0x3f	; 63
    287e:	f8 94       	cli
    2880:	de bf       	out	0x3e, r29	; 62
    2882:	0f be       	out	0x3f, r0	; 63
    2884:	cd bf       	out	0x3d, r28	; 61
    2886:	cf 91       	pop	r28
    2888:	df 91       	pop	r29
    288a:	08 95       	ret

0000288c <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 character) {
    288c:	df 93       	push	r29
    288e:	cf 93       	push	r28
    2890:	cd b7       	in	r28, 0x3d	; 61
    2892:	de b7       	in	r29, 0x3e	; 62
    2894:	e9 97       	sbiw	r28, 0x39	; 57
    2896:	0f b6       	in	r0, 0x3f	; 63
    2898:	f8 94       	cli
    289a:	de bf       	out	0x3e, r29	; 62
    289c:	0f be       	out	0x3f, r0	; 63
    289e:	cd bf       	out	0x3d, r28	; 61
    28a0:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    28a2:	81 e0       	ldi	r24, 0x01	; 1
    28a4:	61 e0       	ldi	r22, 0x01	; 1
    28a6:	41 e0       	ldi	r20, 0x01	; 1
    28a8:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <GPIO_writePin>
    28ac:	80 e0       	ldi	r24, 0x00	; 0
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	a0 e8       	ldi	r26, 0x80	; 128
    28b2:	bf e3       	ldi	r27, 0x3F	; 63
    28b4:	8d ab       	std	Y+53, r24	; 0x35
    28b6:	9e ab       	std	Y+54, r25	; 0x36
    28b8:	af ab       	std	Y+55, r26	; 0x37
    28ba:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28bc:	6d a9       	ldd	r22, Y+53	; 0x35
    28be:	7e a9       	ldd	r23, Y+54	; 0x36
    28c0:	8f a9       	ldd	r24, Y+55	; 0x37
    28c2:	98 ad       	ldd	r25, Y+56	; 0x38
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	4a ef       	ldi	r20, 0xFA	; 250
    28ca:	54 e4       	ldi	r21, 0x44	; 68
    28cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d0:	dc 01       	movw	r26, r24
    28d2:	cb 01       	movw	r24, r22
    28d4:	89 ab       	std	Y+49, r24	; 0x31
    28d6:	9a ab       	std	Y+50, r25	; 0x32
    28d8:	ab ab       	std	Y+51, r26	; 0x33
    28da:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    28dc:	69 a9       	ldd	r22, Y+49	; 0x31
    28de:	7a a9       	ldd	r23, Y+50	; 0x32
    28e0:	8b a9       	ldd	r24, Y+51	; 0x33
    28e2:	9c a9       	ldd	r25, Y+52	; 0x34
    28e4:	20 e0       	ldi	r18, 0x00	; 0
    28e6:	30 e0       	ldi	r19, 0x00	; 0
    28e8:	40 e8       	ldi	r20, 0x80	; 128
    28ea:	5f e3       	ldi	r21, 0x3F	; 63
    28ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28f0:	88 23       	and	r24, r24
    28f2:	2c f4       	brge	.+10     	; 0x28fe <LCD_displayCharacter+0x72>
		__ticks = 1;
    28f4:	81 e0       	ldi	r24, 0x01	; 1
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	98 ab       	std	Y+48, r25	; 0x30
    28fa:	8f a7       	std	Y+47, r24	; 0x2f
    28fc:	3f c0       	rjmp	.+126    	; 0x297c <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    28fe:	69 a9       	ldd	r22, Y+49	; 0x31
    2900:	7a a9       	ldd	r23, Y+50	; 0x32
    2902:	8b a9       	ldd	r24, Y+51	; 0x33
    2904:	9c a9       	ldd	r25, Y+52	; 0x34
    2906:	20 e0       	ldi	r18, 0x00	; 0
    2908:	3f ef       	ldi	r19, 0xFF	; 255
    290a:	4f e7       	ldi	r20, 0x7F	; 127
    290c:	57 e4       	ldi	r21, 0x47	; 71
    290e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2912:	18 16       	cp	r1, r24
    2914:	4c f5       	brge	.+82     	; 0x2968 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2916:	6d a9       	ldd	r22, Y+53	; 0x35
    2918:	7e a9       	ldd	r23, Y+54	; 0x36
    291a:	8f a9       	ldd	r24, Y+55	; 0x37
    291c:	98 ad       	ldd	r25, Y+56	; 0x38
    291e:	20 e0       	ldi	r18, 0x00	; 0
    2920:	30 e0       	ldi	r19, 0x00	; 0
    2922:	40 e2       	ldi	r20, 0x20	; 32
    2924:	51 e4       	ldi	r21, 0x41	; 65
    2926:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    292a:	dc 01       	movw	r26, r24
    292c:	cb 01       	movw	r24, r22
    292e:	bc 01       	movw	r22, r24
    2930:	cd 01       	movw	r24, r26
    2932:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2936:	dc 01       	movw	r26, r24
    2938:	cb 01       	movw	r24, r22
    293a:	98 ab       	std	Y+48, r25	; 0x30
    293c:	8f a7       	std	Y+47, r24	; 0x2f
    293e:	0f c0       	rjmp	.+30     	; 0x295e <LCD_displayCharacter+0xd2>
    2940:	88 ec       	ldi	r24, 0xC8	; 200
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	9e a7       	std	Y+46, r25	; 0x2e
    2946:	8d a7       	std	Y+45, r24	; 0x2d
    2948:	8d a5       	ldd	r24, Y+45	; 0x2d
    294a:	9e a5       	ldd	r25, Y+46	; 0x2e
    294c:	01 97       	sbiw	r24, 0x01	; 1
    294e:	f1 f7       	brne	.-4      	; 0x294c <LCD_displayCharacter+0xc0>
    2950:	9e a7       	std	Y+46, r25	; 0x2e
    2952:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2954:	8f a5       	ldd	r24, Y+47	; 0x2f
    2956:	98 a9       	ldd	r25, Y+48	; 0x30
    2958:	01 97       	sbiw	r24, 0x01	; 1
    295a:	98 ab       	std	Y+48, r25	; 0x30
    295c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    295e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2960:	98 a9       	ldd	r25, Y+48	; 0x30
    2962:	00 97       	sbiw	r24, 0x00	; 0
    2964:	69 f7       	brne	.-38     	; 0x2940 <LCD_displayCharacter+0xb4>
    2966:	14 c0       	rjmp	.+40     	; 0x2990 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2968:	69 a9       	ldd	r22, Y+49	; 0x31
    296a:	7a a9       	ldd	r23, Y+50	; 0x32
    296c:	8b a9       	ldd	r24, Y+51	; 0x33
    296e:	9c a9       	ldd	r25, Y+52	; 0x34
    2970:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2974:	dc 01       	movw	r26, r24
    2976:	cb 01       	movw	r24, r22
    2978:	98 ab       	std	Y+48, r25	; 0x30
    297a:	8f a7       	std	Y+47, r24	; 0x2f
    297c:	8f a5       	ldd	r24, Y+47	; 0x2f
    297e:	98 a9       	ldd	r25, Y+48	; 0x30
    2980:	9c a7       	std	Y+44, r25	; 0x2c
    2982:	8b a7       	std	Y+43, r24	; 0x2b
    2984:	8b a5       	ldd	r24, Y+43	; 0x2b
    2986:	9c a5       	ldd	r25, Y+44	; 0x2c
    2988:	01 97       	sbiw	r24, 0x01	; 1
    298a:	f1 f7       	brne	.-4      	; 0x2988 <LCD_displayCharacter+0xfc>
    298c:	9c a7       	std	Y+44, r25	; 0x2c
    298e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    2990:	81 e0       	ldi	r24, 0x01	; 1
    2992:	60 e0       	ldi	r22, 0x00	; 0
    2994:	41 e0       	ldi	r20, 0x01	; 1
    2996:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <GPIO_writePin>
    299a:	80 e0       	ldi	r24, 0x00	; 0
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	a0 e8       	ldi	r26, 0x80	; 128
    29a0:	bf e3       	ldi	r27, 0x3F	; 63
    29a2:	8f a3       	std	Y+39, r24	; 0x27
    29a4:	98 a7       	std	Y+40, r25	; 0x28
    29a6:	a9 a7       	std	Y+41, r26	; 0x29
    29a8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29aa:	6f a1       	ldd	r22, Y+39	; 0x27
    29ac:	78 a5       	ldd	r23, Y+40	; 0x28
    29ae:	89 a5       	ldd	r24, Y+41	; 0x29
    29b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    29b2:	20 e0       	ldi	r18, 0x00	; 0
    29b4:	30 e0       	ldi	r19, 0x00	; 0
    29b6:	4a ef       	ldi	r20, 0xFA	; 250
    29b8:	54 e4       	ldi	r21, 0x44	; 68
    29ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29be:	dc 01       	movw	r26, r24
    29c0:	cb 01       	movw	r24, r22
    29c2:	8b a3       	std	Y+35, r24	; 0x23
    29c4:	9c a3       	std	Y+36, r25	; 0x24
    29c6:	ad a3       	std	Y+37, r26	; 0x25
    29c8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    29ca:	6b a1       	ldd	r22, Y+35	; 0x23
    29cc:	7c a1       	ldd	r23, Y+36	; 0x24
    29ce:	8d a1       	ldd	r24, Y+37	; 0x25
    29d0:	9e a1       	ldd	r25, Y+38	; 0x26
    29d2:	20 e0       	ldi	r18, 0x00	; 0
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	40 e8       	ldi	r20, 0x80	; 128
    29d8:	5f e3       	ldi	r21, 0x3F	; 63
    29da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29de:	88 23       	and	r24, r24
    29e0:	2c f4       	brge	.+10     	; 0x29ec <LCD_displayCharacter+0x160>
		__ticks = 1;
    29e2:	81 e0       	ldi	r24, 0x01	; 1
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	9a a3       	std	Y+34, r25	; 0x22
    29e8:	89 a3       	std	Y+33, r24	; 0x21
    29ea:	3f c0       	rjmp	.+126    	; 0x2a6a <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    29ec:	6b a1       	ldd	r22, Y+35	; 0x23
    29ee:	7c a1       	ldd	r23, Y+36	; 0x24
    29f0:	8d a1       	ldd	r24, Y+37	; 0x25
    29f2:	9e a1       	ldd	r25, Y+38	; 0x26
    29f4:	20 e0       	ldi	r18, 0x00	; 0
    29f6:	3f ef       	ldi	r19, 0xFF	; 255
    29f8:	4f e7       	ldi	r20, 0x7F	; 127
    29fa:	57 e4       	ldi	r21, 0x47	; 71
    29fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a00:	18 16       	cp	r1, r24
    2a02:	4c f5       	brge	.+82     	; 0x2a56 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a04:	6f a1       	ldd	r22, Y+39	; 0x27
    2a06:	78 a5       	ldd	r23, Y+40	; 0x28
    2a08:	89 a5       	ldd	r24, Y+41	; 0x29
    2a0a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a0c:	20 e0       	ldi	r18, 0x00	; 0
    2a0e:	30 e0       	ldi	r19, 0x00	; 0
    2a10:	40 e2       	ldi	r20, 0x20	; 32
    2a12:	51 e4       	ldi	r21, 0x41	; 65
    2a14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a18:	dc 01       	movw	r26, r24
    2a1a:	cb 01       	movw	r24, r22
    2a1c:	bc 01       	movw	r22, r24
    2a1e:	cd 01       	movw	r24, r26
    2a20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	9a a3       	std	Y+34, r25	; 0x22
    2a2a:	89 a3       	std	Y+33, r24	; 0x21
    2a2c:	0f c0       	rjmp	.+30     	; 0x2a4c <LCD_displayCharacter+0x1c0>
    2a2e:	88 ec       	ldi	r24, 0xC8	; 200
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	98 a3       	std	Y+32, r25	; 0x20
    2a34:	8f 8f       	std	Y+31, r24	; 0x1f
    2a36:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a38:	98 a1       	ldd	r25, Y+32	; 0x20
    2a3a:	01 97       	sbiw	r24, 0x01	; 1
    2a3c:	f1 f7       	brne	.-4      	; 0x2a3a <LCD_displayCharacter+0x1ae>
    2a3e:	98 a3       	std	Y+32, r25	; 0x20
    2a40:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a42:	89 a1       	ldd	r24, Y+33	; 0x21
    2a44:	9a a1       	ldd	r25, Y+34	; 0x22
    2a46:	01 97       	sbiw	r24, 0x01	; 1
    2a48:	9a a3       	std	Y+34, r25	; 0x22
    2a4a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a4c:	89 a1       	ldd	r24, Y+33	; 0x21
    2a4e:	9a a1       	ldd	r25, Y+34	; 0x22
    2a50:	00 97       	sbiw	r24, 0x00	; 0
    2a52:	69 f7       	brne	.-38     	; 0x2a2e <LCD_displayCharacter+0x1a2>
    2a54:	14 c0       	rjmp	.+40     	; 0x2a7e <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a56:	6b a1       	ldd	r22, Y+35	; 0x23
    2a58:	7c a1       	ldd	r23, Y+36	; 0x24
    2a5a:	8d a1       	ldd	r24, Y+37	; 0x25
    2a5c:	9e a1       	ldd	r25, Y+38	; 0x26
    2a5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a62:	dc 01       	movw	r26, r24
    2a64:	cb 01       	movw	r24, r22
    2a66:	9a a3       	std	Y+34, r25	; 0x22
    2a68:	89 a3       	std	Y+33, r24	; 0x21
    2a6a:	89 a1       	ldd	r24, Y+33	; 0x21
    2a6c:	9a a1       	ldd	r25, Y+34	; 0x22
    2a6e:	9e 8f       	std	Y+30, r25	; 0x1e
    2a70:	8d 8f       	std	Y+29, r24	; 0x1d
    2a72:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a74:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a76:	01 97       	sbiw	r24, 0x01	; 1
    2a78:	f1 f7       	brne	.-4      	; 0x2a76 <LCD_displayCharacter+0x1ea>
    2a7a:	9e 8f       	std	Y+30, r25	; 0x1e
    2a7c:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(character, 3));
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
	_delay_ms(1);
#elif(LCD_DATA_BITS_MODE==8)
	GPIO_writePort(LCD_DATA_PORT_ID,character);
    2a7e:	80 e0       	ldi	r24, 0x00	; 0
    2a80:	69 ad       	ldd	r22, Y+57	; 0x39
    2a82:	0e 94 d6 10 	call	0x21ac	; 0x21ac <GPIO_writePort>
    2a86:	80 e0       	ldi	r24, 0x00	; 0
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	a0 e8       	ldi	r26, 0x80	; 128
    2a8c:	bf e3       	ldi	r27, 0x3F	; 63
    2a8e:	89 8f       	std	Y+25, r24	; 0x19
    2a90:	9a 8f       	std	Y+26, r25	; 0x1a
    2a92:	ab 8f       	std	Y+27, r26	; 0x1b
    2a94:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a96:	69 8d       	ldd	r22, Y+25	; 0x19
    2a98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a9e:	20 e0       	ldi	r18, 0x00	; 0
    2aa0:	30 e0       	ldi	r19, 0x00	; 0
    2aa2:	4a ef       	ldi	r20, 0xFA	; 250
    2aa4:	54 e4       	ldi	r21, 0x44	; 68
    2aa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aaa:	dc 01       	movw	r26, r24
    2aac:	cb 01       	movw	r24, r22
    2aae:	8d 8b       	std	Y+21, r24	; 0x15
    2ab0:	9e 8b       	std	Y+22, r25	; 0x16
    2ab2:	af 8b       	std	Y+23, r26	; 0x17
    2ab4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ab6:	6d 89       	ldd	r22, Y+21	; 0x15
    2ab8:	7e 89       	ldd	r23, Y+22	; 0x16
    2aba:	8f 89       	ldd	r24, Y+23	; 0x17
    2abc:	98 8d       	ldd	r25, Y+24	; 0x18
    2abe:	20 e0       	ldi	r18, 0x00	; 0
    2ac0:	30 e0       	ldi	r19, 0x00	; 0
    2ac2:	40 e8       	ldi	r20, 0x80	; 128
    2ac4:	5f e3       	ldi	r21, 0x3F	; 63
    2ac6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2aca:	88 23       	and	r24, r24
    2acc:	2c f4       	brge	.+10     	; 0x2ad8 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2ace:	81 e0       	ldi	r24, 0x01	; 1
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	9c 8b       	std	Y+20, r25	; 0x14
    2ad4:	8b 8b       	std	Y+19, r24	; 0x13
    2ad6:	3f c0       	rjmp	.+126    	; 0x2b56 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2ad8:	6d 89       	ldd	r22, Y+21	; 0x15
    2ada:	7e 89       	ldd	r23, Y+22	; 0x16
    2adc:	8f 89       	ldd	r24, Y+23	; 0x17
    2ade:	98 8d       	ldd	r25, Y+24	; 0x18
    2ae0:	20 e0       	ldi	r18, 0x00	; 0
    2ae2:	3f ef       	ldi	r19, 0xFF	; 255
    2ae4:	4f e7       	ldi	r20, 0x7F	; 127
    2ae6:	57 e4       	ldi	r21, 0x47	; 71
    2ae8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2aec:	18 16       	cp	r1, r24
    2aee:	4c f5       	brge	.+82     	; 0x2b42 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2af0:	69 8d       	ldd	r22, Y+25	; 0x19
    2af2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2af4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2af6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2af8:	20 e0       	ldi	r18, 0x00	; 0
    2afa:	30 e0       	ldi	r19, 0x00	; 0
    2afc:	40 e2       	ldi	r20, 0x20	; 32
    2afe:	51 e4       	ldi	r21, 0x41	; 65
    2b00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b04:	dc 01       	movw	r26, r24
    2b06:	cb 01       	movw	r24, r22
    2b08:	bc 01       	movw	r22, r24
    2b0a:	cd 01       	movw	r24, r26
    2b0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b10:	dc 01       	movw	r26, r24
    2b12:	cb 01       	movw	r24, r22
    2b14:	9c 8b       	std	Y+20, r25	; 0x14
    2b16:	8b 8b       	std	Y+19, r24	; 0x13
    2b18:	0f c0       	rjmp	.+30     	; 0x2b38 <LCD_displayCharacter+0x2ac>
    2b1a:	88 ec       	ldi	r24, 0xC8	; 200
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	9a 8b       	std	Y+18, r25	; 0x12
    2b20:	89 8b       	std	Y+17, r24	; 0x11
    2b22:	89 89       	ldd	r24, Y+17	; 0x11
    2b24:	9a 89       	ldd	r25, Y+18	; 0x12
    2b26:	01 97       	sbiw	r24, 0x01	; 1
    2b28:	f1 f7       	brne	.-4      	; 0x2b26 <LCD_displayCharacter+0x29a>
    2b2a:	9a 8b       	std	Y+18, r25	; 0x12
    2b2c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b2e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b30:	9c 89       	ldd	r25, Y+20	; 0x14
    2b32:	01 97       	sbiw	r24, 0x01	; 1
    2b34:	9c 8b       	std	Y+20, r25	; 0x14
    2b36:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b38:	8b 89       	ldd	r24, Y+19	; 0x13
    2b3a:	9c 89       	ldd	r25, Y+20	; 0x14
    2b3c:	00 97       	sbiw	r24, 0x00	; 0
    2b3e:	69 f7       	brne	.-38     	; 0x2b1a <LCD_displayCharacter+0x28e>
    2b40:	14 c0       	rjmp	.+40     	; 0x2b6a <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b42:	6d 89       	ldd	r22, Y+21	; 0x15
    2b44:	7e 89       	ldd	r23, Y+22	; 0x16
    2b46:	8f 89       	ldd	r24, Y+23	; 0x17
    2b48:	98 8d       	ldd	r25, Y+24	; 0x18
    2b4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b4e:	dc 01       	movw	r26, r24
    2b50:	cb 01       	movw	r24, r22
    2b52:	9c 8b       	std	Y+20, r25	; 0x14
    2b54:	8b 8b       	std	Y+19, r24	; 0x13
    2b56:	8b 89       	ldd	r24, Y+19	; 0x13
    2b58:	9c 89       	ldd	r25, Y+20	; 0x14
    2b5a:	98 8b       	std	Y+16, r25	; 0x10
    2b5c:	8f 87       	std	Y+15, r24	; 0x0f
    2b5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b60:	98 89       	ldd	r25, Y+16	; 0x10
    2b62:	01 97       	sbiw	r24, 0x01	; 1
    2b64:	f1 f7       	brne	.-4      	; 0x2b62 <LCD_displayCharacter+0x2d6>
    2b66:	98 8b       	std	Y+16, r25	; 0x10
    2b68:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    2b6a:	81 e0       	ldi	r24, 0x01	; 1
    2b6c:	60 e0       	ldi	r22, 0x00	; 0
    2b6e:	40 e0       	ldi	r20, 0x00	; 0
    2b70:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <GPIO_writePin>
    2b74:	80 e0       	ldi	r24, 0x00	; 0
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	a0 e8       	ldi	r26, 0x80	; 128
    2b7a:	bf e3       	ldi	r27, 0x3F	; 63
    2b7c:	8b 87       	std	Y+11, r24	; 0x0b
    2b7e:	9c 87       	std	Y+12, r25	; 0x0c
    2b80:	ad 87       	std	Y+13, r26	; 0x0d
    2b82:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b84:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b86:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b88:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b8c:	20 e0       	ldi	r18, 0x00	; 0
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	4a ef       	ldi	r20, 0xFA	; 250
    2b92:	54 e4       	ldi	r21, 0x44	; 68
    2b94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b98:	dc 01       	movw	r26, r24
    2b9a:	cb 01       	movw	r24, r22
    2b9c:	8f 83       	std	Y+7, r24	; 0x07
    2b9e:	98 87       	std	Y+8, r25	; 0x08
    2ba0:	a9 87       	std	Y+9, r26	; 0x09
    2ba2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ba4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ba6:	78 85       	ldd	r23, Y+8	; 0x08
    2ba8:	89 85       	ldd	r24, Y+9	; 0x09
    2baa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bac:	20 e0       	ldi	r18, 0x00	; 0
    2bae:	30 e0       	ldi	r19, 0x00	; 0
    2bb0:	40 e8       	ldi	r20, 0x80	; 128
    2bb2:	5f e3       	ldi	r21, 0x3F	; 63
    2bb4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bb8:	88 23       	and	r24, r24
    2bba:	2c f4       	brge	.+10     	; 0x2bc6 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2bbc:	81 e0       	ldi	r24, 0x01	; 1
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	9e 83       	std	Y+6, r25	; 0x06
    2bc2:	8d 83       	std	Y+5, r24	; 0x05
    2bc4:	3f c0       	rjmp	.+126    	; 0x2c44 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2bc6:	6f 81       	ldd	r22, Y+7	; 0x07
    2bc8:	78 85       	ldd	r23, Y+8	; 0x08
    2bca:	89 85       	ldd	r24, Y+9	; 0x09
    2bcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bce:	20 e0       	ldi	r18, 0x00	; 0
    2bd0:	3f ef       	ldi	r19, 0xFF	; 255
    2bd2:	4f e7       	ldi	r20, 0x7F	; 127
    2bd4:	57 e4       	ldi	r21, 0x47	; 71
    2bd6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bda:	18 16       	cp	r1, r24
    2bdc:	4c f5       	brge	.+82     	; 0x2c30 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bde:	6b 85       	ldd	r22, Y+11	; 0x0b
    2be0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2be2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2be4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2be6:	20 e0       	ldi	r18, 0x00	; 0
    2be8:	30 e0       	ldi	r19, 0x00	; 0
    2bea:	40 e2       	ldi	r20, 0x20	; 32
    2bec:	51 e4       	ldi	r21, 0x41	; 65
    2bee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf2:	dc 01       	movw	r26, r24
    2bf4:	cb 01       	movw	r24, r22
    2bf6:	bc 01       	movw	r22, r24
    2bf8:	cd 01       	movw	r24, r26
    2bfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	9e 83       	std	Y+6, r25	; 0x06
    2c04:	8d 83       	std	Y+5, r24	; 0x05
    2c06:	0f c0       	rjmp	.+30     	; 0x2c26 <LCD_displayCharacter+0x39a>
    2c08:	88 ec       	ldi	r24, 0xC8	; 200
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	9c 83       	std	Y+4, r25	; 0x04
    2c0e:	8b 83       	std	Y+3, r24	; 0x03
    2c10:	8b 81       	ldd	r24, Y+3	; 0x03
    2c12:	9c 81       	ldd	r25, Y+4	; 0x04
    2c14:	01 97       	sbiw	r24, 0x01	; 1
    2c16:	f1 f7       	brne	.-4      	; 0x2c14 <LCD_displayCharacter+0x388>
    2c18:	9c 83       	std	Y+4, r25	; 0x04
    2c1a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c20:	01 97       	sbiw	r24, 0x01	; 1
    2c22:	9e 83       	std	Y+6, r25	; 0x06
    2c24:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c26:	8d 81       	ldd	r24, Y+5	; 0x05
    2c28:	9e 81       	ldd	r25, Y+6	; 0x06
    2c2a:	00 97       	sbiw	r24, 0x00	; 0
    2c2c:	69 f7       	brne	.-38     	; 0x2c08 <LCD_displayCharacter+0x37c>
    2c2e:	14 c0       	rjmp	.+40     	; 0x2c58 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c30:	6f 81       	ldd	r22, Y+7	; 0x07
    2c32:	78 85       	ldd	r23, Y+8	; 0x08
    2c34:	89 85       	ldd	r24, Y+9	; 0x09
    2c36:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c3c:	dc 01       	movw	r26, r24
    2c3e:	cb 01       	movw	r24, r22
    2c40:	9e 83       	std	Y+6, r25	; 0x06
    2c42:	8d 83       	std	Y+5, r24	; 0x05
    2c44:	8d 81       	ldd	r24, Y+5	; 0x05
    2c46:	9e 81       	ldd	r25, Y+6	; 0x06
    2c48:	9a 83       	std	Y+2, r25	; 0x02
    2c4a:	89 83       	std	Y+1, r24	; 0x01
    2c4c:	89 81       	ldd	r24, Y+1	; 0x01
    2c4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c50:	01 97       	sbiw	r24, 0x01	; 1
    2c52:	f1 f7       	brne	.-4      	; 0x2c50 <LCD_displayCharacter+0x3c4>
    2c54:	9a 83       	std	Y+2, r25	; 0x02
    2c56:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
#endif
}
    2c58:	e9 96       	adiw	r28, 0x39	; 57
    2c5a:	0f b6       	in	r0, 0x3f	; 63
    2c5c:	f8 94       	cli
    2c5e:	de bf       	out	0x3e, r29	; 62
    2c60:	0f be       	out	0x3f, r0	; 63
    2c62:	cd bf       	out	0x3d, r28	; 61
    2c64:	cf 91       	pop	r28
    2c66:	df 91       	pop	r29
    2c68:	08 95       	ret

00002c6a <LCD_init>:
 * Description :
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void) {
    2c6a:	df 93       	push	r29
    2c6c:	cf 93       	push	r28
    2c6e:	cd b7       	in	r28, 0x3d	; 61
    2c70:	de b7       	in	r29, 0x3e	; 62
    2c72:	2e 97       	sbiw	r28, 0x0e	; 14
    2c74:	0f b6       	in	r0, 0x3f	; 63
    2c76:	f8 94       	cli
    2c78:	de bf       	out	0x3e, r29	; 62
    2c7a:	0f be       	out	0x3f, r0	; 63
    2c7c:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2c7e:	81 e0       	ldi	r24, 0x01	; 1
    2c80:	61 e0       	ldi	r22, 0x01	; 1
    2c82:	41 e0       	ldi	r20, 0x01	; 1
    2c84:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2c88:	81 e0       	ldi	r24, 0x01	; 1
    2c8a:	60 e0       	ldi	r22, 0x00	; 0
    2c8c:	41 e0       	ldi	r20, 0x01	; 1
    2c8e:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <GPIO_setupPinDirection>
    2c92:	80 e0       	ldi	r24, 0x00	; 0
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	a0 ea       	ldi	r26, 0xA0	; 160
    2c98:	b1 e4       	ldi	r27, 0x41	; 65
    2c9a:	8b 87       	std	Y+11, r24	; 0x0b
    2c9c:	9c 87       	std	Y+12, r25	; 0x0c
    2c9e:	ad 87       	std	Y+13, r26	; 0x0d
    2ca0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ca2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ca4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ca6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ca8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2caa:	20 e0       	ldi	r18, 0x00	; 0
    2cac:	30 e0       	ldi	r19, 0x00	; 0
    2cae:	4a ef       	ldi	r20, 0xFA	; 250
    2cb0:	54 e4       	ldi	r21, 0x44	; 68
    2cb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb6:	dc 01       	movw	r26, r24
    2cb8:	cb 01       	movw	r24, r22
    2cba:	8f 83       	std	Y+7, r24	; 0x07
    2cbc:	98 87       	std	Y+8, r25	; 0x08
    2cbe:	a9 87       	std	Y+9, r26	; 0x09
    2cc0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cc2:	6f 81       	ldd	r22, Y+7	; 0x07
    2cc4:	78 85       	ldd	r23, Y+8	; 0x08
    2cc6:	89 85       	ldd	r24, Y+9	; 0x09
    2cc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cca:	20 e0       	ldi	r18, 0x00	; 0
    2ccc:	30 e0       	ldi	r19, 0x00	; 0
    2cce:	40 e8       	ldi	r20, 0x80	; 128
    2cd0:	5f e3       	ldi	r21, 0x3F	; 63
    2cd2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cd6:	88 23       	and	r24, r24
    2cd8:	2c f4       	brge	.+10     	; 0x2ce4 <LCD_init+0x7a>
		__ticks = 1;
    2cda:	81 e0       	ldi	r24, 0x01	; 1
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	9e 83       	std	Y+6, r25	; 0x06
    2ce0:	8d 83       	std	Y+5, r24	; 0x05
    2ce2:	3f c0       	rjmp	.+126    	; 0x2d62 <LCD_init+0xf8>
	else if (__tmp > 65535)
    2ce4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ce6:	78 85       	ldd	r23, Y+8	; 0x08
    2ce8:	89 85       	ldd	r24, Y+9	; 0x09
    2cea:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cec:	20 e0       	ldi	r18, 0x00	; 0
    2cee:	3f ef       	ldi	r19, 0xFF	; 255
    2cf0:	4f e7       	ldi	r20, 0x7F	; 127
    2cf2:	57 e4       	ldi	r21, 0x47	; 71
    2cf4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cf8:	18 16       	cp	r1, r24
    2cfa:	4c f5       	brge	.+82     	; 0x2d4e <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cfc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cfe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d00:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d02:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d04:	20 e0       	ldi	r18, 0x00	; 0
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	40 e2       	ldi	r20, 0x20	; 32
    2d0a:	51 e4       	ldi	r21, 0x41	; 65
    2d0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d10:	dc 01       	movw	r26, r24
    2d12:	cb 01       	movw	r24, r22
    2d14:	bc 01       	movw	r22, r24
    2d16:	cd 01       	movw	r24, r26
    2d18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d1c:	dc 01       	movw	r26, r24
    2d1e:	cb 01       	movw	r24, r22
    2d20:	9e 83       	std	Y+6, r25	; 0x06
    2d22:	8d 83       	std	Y+5, r24	; 0x05
    2d24:	0f c0       	rjmp	.+30     	; 0x2d44 <LCD_init+0xda>
    2d26:	88 ec       	ldi	r24, 0xC8	; 200
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	9c 83       	std	Y+4, r25	; 0x04
    2d2c:	8b 83       	std	Y+3, r24	; 0x03
    2d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d30:	9c 81       	ldd	r25, Y+4	; 0x04
    2d32:	01 97       	sbiw	r24, 0x01	; 1
    2d34:	f1 f7       	brne	.-4      	; 0x2d32 <LCD_init+0xc8>
    2d36:	9c 83       	std	Y+4, r25	; 0x04
    2d38:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d3e:	01 97       	sbiw	r24, 0x01	; 1
    2d40:	9e 83       	std	Y+6, r25	; 0x06
    2d42:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d44:	8d 81       	ldd	r24, Y+5	; 0x05
    2d46:	9e 81       	ldd	r25, Y+6	; 0x06
    2d48:	00 97       	sbiw	r24, 0x00	; 0
    2d4a:	69 f7       	brne	.-38     	; 0x2d26 <LCD_init+0xbc>
    2d4c:	14 c0       	rjmp	.+40     	; 0x2d76 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d4e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d50:	78 85       	ldd	r23, Y+8	; 0x08
    2d52:	89 85       	ldd	r24, Y+9	; 0x09
    2d54:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	cb 01       	movw	r24, r22
    2d5e:	9e 83       	std	Y+6, r25	; 0x06
    2d60:	8d 83       	std	Y+5, r24	; 0x05
    2d62:	8d 81       	ldd	r24, Y+5	; 0x05
    2d64:	9e 81       	ldd	r25, Y+6	; 0x06
    2d66:	9a 83       	std	Y+2, r25	; 0x02
    2d68:	89 83       	std	Y+1, r24	; 0x01
    2d6a:	89 81       	ldd	r24, Y+1	; 0x01
    2d6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d6e:	01 97       	sbiw	r24, 0x01	; 1
    2d70:	f1 f7       	brne	.-4      	; 0x2d6e <LCD_init+0x104>
    2d72:	9a 83       	std	Y+2, r25	; 0x02
    2d74:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2d76:	80 e0       	ldi	r24, 0x00	; 0
    2d78:	6f ef       	ldi	r22, 0xFF	; 255
    2d7a:	0e 94 92 10 	call	0x2124	; 0x2124 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    2d7e:	88 e3       	ldi	r24, 0x38	; 56
    2d80:	0e 94 57 12 	call	0x24ae	; 0x24ae <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2d84:	8c e0       	ldi	r24, 0x0C	; 12
    2d86:	0e 94 57 12 	call	0x24ae	; 0x24ae <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2d8a:	81 e0       	ldi	r24, 0x01	; 1
    2d8c:	0e 94 57 12 	call	0x24ae	; 0x24ae <LCD_sendCommand>
}
    2d90:	2e 96       	adiw	r28, 0x0e	; 14
    2d92:	0f b6       	in	r0, 0x3f	; 63
    2d94:	f8 94       	cli
    2d96:	de bf       	out	0x3e, r29	; 62
    2d98:	0f be       	out	0x3f, r0	; 63
    2d9a:	cd bf       	out	0x3d, r28	; 61
    2d9c:	cf 91       	pop	r28
    2d9e:	df 91       	pop	r29
    2da0:	08 95       	ret

00002da2 <LCD_displayString>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayString(string s) {
    2da2:	df 93       	push	r29
    2da4:	cf 93       	push	r28
    2da6:	00 d0       	rcall	.+0      	; 0x2da8 <LCD_displayString+0x6>
    2da8:	0f 92       	push	r0
    2daa:	cd b7       	in	r28, 0x3d	; 61
    2dac:	de b7       	in	r29, 0x3e	; 62
    2dae:	9b 83       	std	Y+3, r25	; 0x03
    2db0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2db2:	19 82       	std	Y+1, r1	; 0x01
    2db4:	0e c0       	rjmp	.+28     	; 0x2dd2 <LCD_displayString+0x30>
	while (s[i] != '\0') {
		LCD_displayCharacter(s[i]);
    2db6:	89 81       	ldd	r24, Y+1	; 0x01
    2db8:	28 2f       	mov	r18, r24
    2dba:	30 e0       	ldi	r19, 0x00	; 0
    2dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dbe:	9b 81       	ldd	r25, Y+3	; 0x03
    2dc0:	fc 01       	movw	r30, r24
    2dc2:	e2 0f       	add	r30, r18
    2dc4:	f3 1f       	adc	r31, r19
    2dc6:	80 81       	ld	r24, Z
    2dc8:	0e 94 46 14 	call	0x288c	; 0x288c <LCD_displayCharacter>
		i++;
    2dcc:	89 81       	ldd	r24, Y+1	; 0x01
    2dce:	8f 5f       	subi	r24, 0xFF	; 255
    2dd0:	89 83       	std	Y+1, r24	; 0x01
 * Description :
 * Display the required character on the screen
 */
void LCD_displayString(string s) {
	uint8 i = 0;
	while (s[i] != '\0') {
    2dd2:	89 81       	ldd	r24, Y+1	; 0x01
    2dd4:	28 2f       	mov	r18, r24
    2dd6:	30 e0       	ldi	r19, 0x00	; 0
    2dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dda:	9b 81       	ldd	r25, Y+3	; 0x03
    2ddc:	fc 01       	movw	r30, r24
    2dde:	e2 0f       	add	r30, r18
    2de0:	f3 1f       	adc	r31, r19
    2de2:	80 81       	ld	r24, Z
    2de4:	88 23       	and	r24, r24
    2de6:	39 f7       	brne	.-50     	; 0x2db6 <LCD_displayString+0x14>
		LCD_displayCharacter(s[i]);
		i++;
	}
}
    2de8:	0f 90       	pop	r0
    2dea:	0f 90       	pop	r0
    2dec:	0f 90       	pop	r0
    2dee:	cf 91       	pop	r28
    2df0:	df 91       	pop	r29
    2df2:	08 95       	ret

00002df4 <LCD_clearScreen>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_clearScreen(void) {
    2df4:	df 93       	push	r29
    2df6:	cf 93       	push	r28
    2df8:	cd b7       	in	r28, 0x3d	; 61
    2dfa:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    2dfc:	81 e0       	ldi	r24, 0x01	; 1
    2dfe:	0e 94 57 12 	call	0x24ae	; 0x24ae <LCD_sendCommand>
}
    2e02:	cf 91       	pop	r28
    2e04:	df 91       	pop	r29
    2e06:	08 95       	ret

00002e08 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data) {
    2e08:	df 93       	push	r29
    2e0a:	cf 93       	push	r28
    2e0c:	cd b7       	in	r28, 0x3d	; 61
    2e0e:	de b7       	in	r29, 0x3e	; 62
    2e10:	62 97       	sbiw	r28, 0x12	; 18
    2e12:	0f b6       	in	r0, 0x3f	; 63
    2e14:	f8 94       	cli
    2e16:	de bf       	out	0x3e, r29	; 62
    2e18:	0f be       	out	0x3f, r0	; 63
    2e1a:	cd bf       	out	0x3d, r28	; 61
    2e1c:	9a 8b       	std	Y+18, r25	; 0x12
    2e1e:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16];
	itoa(data, buff, 10);
    2e20:	89 89       	ldd	r24, Y+17	; 0x11
    2e22:	9a 89       	ldd	r25, Y+18	; 0x12
    2e24:	9e 01       	movw	r18, r28
    2e26:	2f 5f       	subi	r18, 0xFF	; 255
    2e28:	3f 4f       	sbci	r19, 0xFF	; 255
    2e2a:	b9 01       	movw	r22, r18
    2e2c:	4a e0       	ldi	r20, 0x0A	; 10
    2e2e:	50 e0       	ldi	r21, 0x00	; 0
    2e30:	0e 94 3e 1a 	call	0x347c	; 0x347c <itoa>
	LCD_displayString(buff);
    2e34:	ce 01       	movw	r24, r28
    2e36:	01 96       	adiw	r24, 0x01	; 1
    2e38:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <LCD_displayString>
}
    2e3c:	62 96       	adiw	r28, 0x12	; 18
    2e3e:	0f b6       	in	r0, 0x3f	; 63
    2e40:	f8 94       	cli
    2e42:	de bf       	out	0x3e, r29	; 62
    2e44:	0f be       	out	0x3f, r0	; 63
    2e46:	cd bf       	out	0x3d, r28	; 61
    2e48:	cf 91       	pop	r28
    2e4a:	df 91       	pop	r29
    2e4c:	08 95       	ret

00002e4e <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row, uint8 col, string Str) {
    2e4e:	df 93       	push	r29
    2e50:	cf 93       	push	r28
    2e52:	00 d0       	rcall	.+0      	; 0x2e54 <LCD_displayStringRowColumn+0x6>
    2e54:	00 d0       	rcall	.+0      	; 0x2e56 <LCD_displayStringRowColumn+0x8>
    2e56:	cd b7       	in	r28, 0x3d	; 61
    2e58:	de b7       	in	r29, 0x3e	; 62
    2e5a:	89 83       	std	Y+1, r24	; 0x01
    2e5c:	6a 83       	std	Y+2, r22	; 0x02
    2e5e:	5c 83       	std	Y+4, r21	; 0x04
    2e60:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row, col);
    2e62:	89 81       	ldd	r24, Y+1	; 0x01
    2e64:	6a 81       	ldd	r22, Y+2	; 0x02
    2e66:	0e 94 40 17 	call	0x2e80	; 0x2e80 <LCD_moveCursor>
	LCD_displayString(Str);
    2e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e6c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e6e:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <LCD_displayString>
}
    2e72:	0f 90       	pop	r0
    2e74:	0f 90       	pop	r0
    2e76:	0f 90       	pop	r0
    2e78:	0f 90       	pop	r0
    2e7a:	cf 91       	pop	r28
    2e7c:	df 91       	pop	r29
    2e7e:	08 95       	ret

00002e80 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row, uint8 col) {
    2e80:	df 93       	push	r29
    2e82:	cf 93       	push	r28
    2e84:	00 d0       	rcall	.+0      	; 0x2e86 <LCD_moveCursor+0x6>
    2e86:	00 d0       	rcall	.+0      	; 0x2e88 <LCD_moveCursor+0x8>
    2e88:	0f 92       	push	r0
    2e8a:	cd b7       	in	r28, 0x3d	; 61
    2e8c:	de b7       	in	r29, 0x3e	; 62
    2e8e:	8a 83       	std	Y+2, r24	; 0x02
    2e90:	6b 83       	std	Y+3, r22	; 0x03
	uint8 memorylocation;
	switch (row) {
    2e92:	8a 81       	ldd	r24, Y+2	; 0x02
    2e94:	28 2f       	mov	r18, r24
    2e96:	30 e0       	ldi	r19, 0x00	; 0
    2e98:	3d 83       	std	Y+5, r19	; 0x05
    2e9a:	2c 83       	std	Y+4, r18	; 0x04
    2e9c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e9e:	9d 81       	ldd	r25, Y+5	; 0x05
    2ea0:	81 30       	cpi	r24, 0x01	; 1
    2ea2:	91 05       	cpc	r25, r1
    2ea4:	c1 f0       	breq	.+48     	; 0x2ed6 <LCD_moveCursor+0x56>
    2ea6:	2c 81       	ldd	r18, Y+4	; 0x04
    2ea8:	3d 81       	ldd	r19, Y+5	; 0x05
    2eaa:	22 30       	cpi	r18, 0x02	; 2
    2eac:	31 05       	cpc	r19, r1
    2eae:	2c f4       	brge	.+10     	; 0x2eba <LCD_moveCursor+0x3a>
    2eb0:	8c 81       	ldd	r24, Y+4	; 0x04
    2eb2:	9d 81       	ldd	r25, Y+5	; 0x05
    2eb4:	00 97       	sbiw	r24, 0x00	; 0
    2eb6:	61 f0       	breq	.+24     	; 0x2ed0 <LCD_moveCursor+0x50>
    2eb8:	19 c0       	rjmp	.+50     	; 0x2eec <LCD_moveCursor+0x6c>
    2eba:	2c 81       	ldd	r18, Y+4	; 0x04
    2ebc:	3d 81       	ldd	r19, Y+5	; 0x05
    2ebe:	22 30       	cpi	r18, 0x02	; 2
    2ec0:	31 05       	cpc	r19, r1
    2ec2:	69 f0       	breq	.+26     	; 0x2ede <LCD_moveCursor+0x5e>
    2ec4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ec6:	9d 81       	ldd	r25, Y+5	; 0x05
    2ec8:	83 30       	cpi	r24, 0x03	; 3
    2eca:	91 05       	cpc	r25, r1
    2ecc:	61 f0       	breq	.+24     	; 0x2ee6 <LCD_moveCursor+0x66>
    2ece:	0e c0       	rjmp	.+28     	; 0x2eec <LCD_moveCursor+0x6c>
	case 0:
		memorylocation = col;
    2ed0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed2:	89 83       	std	Y+1, r24	; 0x01
    2ed4:	0b c0       	rjmp	.+22     	; 0x2eec <LCD_moveCursor+0x6c>
		break;
	case 1:
		memorylocation = col + 0x40;
    2ed6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed8:	80 5c       	subi	r24, 0xC0	; 192
    2eda:	89 83       	std	Y+1, r24	; 0x01
    2edc:	07 c0       	rjmp	.+14     	; 0x2eec <LCD_moveCursor+0x6c>
		break;
	case 2:
		memorylocation = col + 0x10;
    2ede:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee0:	80 5f       	subi	r24, 0xF0	; 240
    2ee2:	89 83       	std	Y+1, r24	; 0x01
    2ee4:	03 c0       	rjmp	.+6      	; 0x2eec <LCD_moveCursor+0x6c>
		break;
	case 3:
		memorylocation = col + 0x50;
    2ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee8:	80 5b       	subi	r24, 0xB0	; 176
    2eea:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(memorylocation | LCD_SET_CURSOR_LOCATION);
    2eec:	89 81       	ldd	r24, Y+1	; 0x01
    2eee:	80 68       	ori	r24, 0x80	; 128
    2ef0:	0e 94 57 12 	call	0x24ae	; 0x24ae <LCD_sendCommand>
}
    2ef4:	0f 90       	pop	r0
    2ef6:	0f 90       	pop	r0
    2ef8:	0f 90       	pop	r0
    2efa:	0f 90       	pop	r0
    2efc:	0f 90       	pop	r0
    2efe:	cf 91       	pop	r28
    2f00:	df 91       	pop	r29
    2f02:	08 95       	ret

00002f04 <__vector_7>:
static volatile void(*callBack_ptr)(void) = NULL_PTR;

/********************************************************************************
 *                       Interrupt Service Routines                             *
 *******************************************************************************/
ISR(TIMER1_COMPA_vect){
    2f04:	1f 92       	push	r1
    2f06:	0f 92       	push	r0
    2f08:	0f b6       	in	r0, 0x3f	; 63
    2f0a:	0f 92       	push	r0
    2f0c:	11 24       	eor	r1, r1
    2f0e:	2f 93       	push	r18
    2f10:	3f 93       	push	r19
    2f12:	4f 93       	push	r20
    2f14:	5f 93       	push	r21
    2f16:	6f 93       	push	r22
    2f18:	7f 93       	push	r23
    2f1a:	8f 93       	push	r24
    2f1c:	9f 93       	push	r25
    2f1e:	af 93       	push	r26
    2f20:	bf 93       	push	r27
    2f22:	ef 93       	push	r30
    2f24:	ff 93       	push	r31
    2f26:	df 93       	push	r29
    2f28:	cf 93       	push	r28
    2f2a:	cd b7       	in	r28, 0x3d	; 61
    2f2c:	de b7       	in	r29, 0x3e	; 62
	if(callBack_ptr != NULL_PTR){
    2f2e:	80 91 2f 01 	lds	r24, 0x012F
    2f32:	90 91 30 01 	lds	r25, 0x0130
    2f36:	00 97       	sbiw	r24, 0x00	; 0
    2f38:	29 f0       	breq	.+10     	; 0x2f44 <__vector_7+0x40>
		(*callBack_ptr)();
    2f3a:	e0 91 2f 01 	lds	r30, 0x012F
    2f3e:	f0 91 30 01 	lds	r31, 0x0130
    2f42:	09 95       	icall
	}
}
    2f44:	cf 91       	pop	r28
    2f46:	df 91       	pop	r29
    2f48:	ff 91       	pop	r31
    2f4a:	ef 91       	pop	r30
    2f4c:	bf 91       	pop	r27
    2f4e:	af 91       	pop	r26
    2f50:	9f 91       	pop	r25
    2f52:	8f 91       	pop	r24
    2f54:	7f 91       	pop	r23
    2f56:	6f 91       	pop	r22
    2f58:	5f 91       	pop	r21
    2f5a:	4f 91       	pop	r20
    2f5c:	3f 91       	pop	r19
    2f5e:	2f 91       	pop	r18
    2f60:	0f 90       	pop	r0
    2f62:	0f be       	out	0x3f, r0	; 63
    2f64:	0f 90       	pop	r0
    2f66:	1f 90       	pop	r1
    2f68:	18 95       	reti

00002f6a <TIMER1_init_Compare>:
/*
 * Description :
 * Function responsible for initialize the TIMER_1 driver in compare mode.
 */
void TIMER1_init_Compare(Timer1_ConfigType* Config_ptr)
{
    2f6a:	df 93       	push	r29
    2f6c:	cf 93       	push	r28
    2f6e:	00 d0       	rcall	.+0      	; 0x2f70 <TIMER1_init_Compare+0x6>
    2f70:	cd b7       	in	r28, 0x3d	; 61
    2f72:	de b7       	in	r29, 0x3e	; 62
    2f74:	9a 83       	std	Y+2, r25	; 0x02
    2f76:	89 83       	std	Y+1, r24	; 0x01
	/* Initialize Timer1 With value that will start count according to this value*/
	TCNT1 = Config_ptr->Initial_value;
    2f78:	ac e4       	ldi	r26, 0x4C	; 76
    2f7a:	b0 e0       	ldi	r27, 0x00	; 0
    2f7c:	e9 81       	ldd	r30, Y+1	; 0x01
    2f7e:	fa 81       	ldd	r31, Y+2	; 0x02
    2f80:	80 81       	ld	r24, Z
    2f82:	91 81       	ldd	r25, Z+1	; 0x01
    2f84:	11 96       	adiw	r26, 0x01	; 1
    2f86:	9c 93       	st	X, r25
    2f88:	8e 93       	st	-X, r24

	/* Set Compare value that Timer will reach to it then, it backs count from 0*/
	OCR1A = Config_ptr->Compare_value;
    2f8a:	aa e4       	ldi	r26, 0x4A	; 74
    2f8c:	b0 e0       	ldi	r27, 0x00	; 0
    2f8e:	e9 81       	ldd	r30, Y+1	; 0x01
    2f90:	fa 81       	ldd	r31, Y+2	; 0x02
    2f92:	82 81       	ldd	r24, Z+2	; 0x02
    2f94:	93 81       	ldd	r25, Z+3	; 0x03
    2f96:	11 96       	adiw	r26, 0x01	; 1
    2f98:	9c 93       	st	X, r25
    2f9a:	8e 93       	st	-X, r24

	/* Enable Timer1 Interrupt*/
	TIMSK |= (1 << OCIE1A);
    2f9c:	a9 e5       	ldi	r26, 0x59	; 89
    2f9e:	b0 e0       	ldi	r27, 0x00	; 0
    2fa0:	e9 e5       	ldi	r30, 0x59	; 89
    2fa2:	f0 e0       	ldi	r31, 0x00	; 0
    2fa4:	80 81       	ld	r24, Z
    2fa6:	80 61       	ori	r24, 0x10	; 16
    2fa8:	8c 93       	st	X, r24

	/****************************************************************************
	 * FOC1A : It will be set when Timer1 Operate in non PWM Mode
	 * Set First 2-bits From Mode Member to Specify which Mode Timer1 Will Operate
	****************************************************************************/
	TCCR1A = (1 << FOC1A) | ((TCCR1A & 0xFC) | (Config_ptr->Mode & 0x03));
    2faa:	af e4       	ldi	r26, 0x4F	; 79
    2fac:	b0 e0       	ldi	r27, 0x00	; 0
    2fae:	ef e4       	ldi	r30, 0x4F	; 79
    2fb0:	f0 e0       	ldi	r31, 0x00	; 0
    2fb2:	80 81       	ld	r24, Z
    2fb4:	98 2f       	mov	r25, r24
    2fb6:	9c 7f       	andi	r25, 0xFC	; 252
    2fb8:	e9 81       	ldd	r30, Y+1	; 0x01
    2fba:	fa 81       	ldd	r31, Y+2	; 0x02
    2fbc:	85 81       	ldd	r24, Z+5	; 0x05
    2fbe:	83 70       	andi	r24, 0x03	; 3
    2fc0:	89 2b       	or	r24, r25
    2fc2:	88 60       	ori	r24, 0x08	; 8
    2fc4:	8c 93       	st	X, r24

	/****************************************************************************
	 * Set Pre-scaler value in the first 3-bits in TCCR1B Register that will specify which frequency Timer1 will Operate
	 * Set Last 2-bits From Mode Member to Specify Which Mode Timer1 Will Operate
	****************************************************************************/
	TCCR1B = ((TCCR1B & 0xF8) | (Config_ptr->Prescaler & 0x07)) | ((TCCR1B & 0xE7) | ((Config_ptr->Mode & 0x0C)<<1));
    2fc6:	ae e4       	ldi	r26, 0x4E	; 78
    2fc8:	b0 e0       	ldi	r27, 0x00	; 0
    2fca:	ee e4       	ldi	r30, 0x4E	; 78
    2fcc:	f0 e0       	ldi	r31, 0x00	; 0
    2fce:	80 81       	ld	r24, Z
    2fd0:	98 2f       	mov	r25, r24
    2fd2:	98 7f       	andi	r25, 0xF8	; 248
    2fd4:	e9 81       	ldd	r30, Y+1	; 0x01
    2fd6:	fa 81       	ldd	r31, Y+2	; 0x02
    2fd8:	84 81       	ldd	r24, Z+4	; 0x04
    2fda:	87 70       	andi	r24, 0x07	; 7
    2fdc:	39 2f       	mov	r19, r25
    2fde:	38 2b       	or	r19, r24
    2fe0:	ee e4       	ldi	r30, 0x4E	; 78
    2fe2:	f0 e0       	ldi	r31, 0x00	; 0
    2fe4:	80 81       	ld	r24, Z
    2fe6:	28 2f       	mov	r18, r24
    2fe8:	27 7e       	andi	r18, 0xE7	; 231
    2fea:	e9 81       	ldd	r30, Y+1	; 0x01
    2fec:	fa 81       	ldd	r31, Y+2	; 0x02
    2fee:	85 81       	ldd	r24, Z+5	; 0x05
    2ff0:	88 2f       	mov	r24, r24
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	8c 70       	andi	r24, 0x0C	; 12
    2ff6:	90 70       	andi	r25, 0x00	; 0
    2ff8:	88 0f       	add	r24, r24
    2ffa:	99 1f       	adc	r25, r25
    2ffc:	82 2b       	or	r24, r18
    2ffe:	83 2b       	or	r24, r19
    3000:	8c 93       	st	X, r24
}
    3002:	0f 90       	pop	r0
    3004:	0f 90       	pop	r0
    3006:	cf 91       	pop	r28
    3008:	df 91       	pop	r29
    300a:	08 95       	ret

0000300c <TIMER1_deInit>:
/*
 * Description :
 * Function responsible for De_initialize the TIMER_1 driver.
 */
void TIMER1_deInit(void)
{
    300c:	df 93       	push	r29
    300e:	cf 93       	push	r28
    3010:	cd b7       	in	r28, 0x3d	; 61
    3012:	de b7       	in	r29, 0x3e	; 62
	/* Clear Timer Register */
	TCCR1A = 0;
    3014:	ef e4       	ldi	r30, 0x4F	; 79
    3016:	f0 e0       	ldi	r31, 0x00	; 0
    3018:	10 82       	st	Z, r1
	TCCR1B = 0;
    301a:	ee e4       	ldi	r30, 0x4E	; 78
    301c:	f0 e0       	ldi	r31, 0x00	; 0
    301e:	10 82       	st	Z, r1
	TCNT1 = 0;
    3020:	ec e4       	ldi	r30, 0x4C	; 76
    3022:	f0 e0       	ldi	r31, 0x00	; 0
    3024:	11 82       	std	Z+1, r1	; 0x01
    3026:	10 82       	st	Z, r1
	/* Disable Interrupt */
	TIMSK &= ~(1 << OCIE1A);
    3028:	a9 e5       	ldi	r26, 0x59	; 89
    302a:	b0 e0       	ldi	r27, 0x00	; 0
    302c:	e9 e5       	ldi	r30, 0x59	; 89
    302e:	f0 e0       	ldi	r31, 0x00	; 0
    3030:	80 81       	ld	r24, Z
    3032:	8f 7e       	andi	r24, 0xEF	; 239
    3034:	8c 93       	st	X, r24
}
    3036:	cf 91       	pop	r28
    3038:	df 91       	pop	r29
    303a:	08 95       	ret

0000303c <TIMER1_setCallback>:
/*
 * Description :
 * Setup the callback function in the TIMER_1 driver.
 */
void TIMER1_setCallback(void(*a_ptr)(void))
{
    303c:	df 93       	push	r29
    303e:	cf 93       	push	r28
    3040:	00 d0       	rcall	.+0      	; 0x3042 <TIMER1_setCallback+0x6>
    3042:	cd b7       	in	r28, 0x3d	; 61
    3044:	de b7       	in	r29, 0x3e	; 62
    3046:	9a 83       	std	Y+2, r25	; 0x02
    3048:	89 83       	std	Y+1, r24	; 0x01
	/* Make global variable points to same function to be called in ISR when an detection occur*/
	callBack_ptr = a_ptr;
    304a:	89 81       	ldd	r24, Y+1	; 0x01
    304c:	9a 81       	ldd	r25, Y+2	; 0x02
    304e:	90 93 30 01 	sts	0x0130, r25
    3052:	80 93 2f 01 	sts	0x012F, r24
}
    3056:	0f 90       	pop	r0
    3058:	0f 90       	pop	r0
    305a:	cf 91       	pop	r28
    305c:	df 91       	pop	r29
    305e:	08 95       	ret

00003060 <USART_init>:
 * Functional responsible for Initialize the UART device by:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void USART_init(USART_ConfigType *config) {
    3060:	df 93       	push	r29
    3062:	cf 93       	push	r28
    3064:	00 d0       	rcall	.+0      	; 0x3066 <USART_init+0x6>
    3066:	00 d0       	rcall	.+0      	; 0x3068 <USART_init+0x8>
    3068:	00 d0       	rcall	.+0      	; 0x306a <USART_init+0xa>
    306a:	cd b7       	in	r28, 0x3d	; 61
    306c:	de b7       	in	r29, 0x3e	; 62
    306e:	9c 83       	std	Y+4, r25	; 0x04
    3070:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    3072:	1a 82       	std	Y+2, r1	; 0x02
    3074:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(UCSRA, U2X);
    3076:	ab e2       	ldi	r26, 0x2B	; 43
    3078:	b0 e0       	ldi	r27, 0x00	; 0
    307a:	eb e2       	ldi	r30, 0x2B	; 43
    307c:	f0 e0       	ldi	r31, 0x00	; 0
    307e:	80 81       	ld	r24, Z
    3080:	82 60       	ori	r24, 0x02	; 2
    3082:	8c 93       	st	X, r24
	SET_BIT(UCSRB, RXEN);
    3084:	aa e2       	ldi	r26, 0x2A	; 42
    3086:	b0 e0       	ldi	r27, 0x00	; 0
    3088:	ea e2       	ldi	r30, 0x2A	; 42
    308a:	f0 e0       	ldi	r31, 0x00	; 0
    308c:	80 81       	ld	r24, Z
    308e:	80 61       	ori	r24, 0x10	; 16
    3090:	8c 93       	st	X, r24
	SET_BIT(UCSRB, TXEN);
    3092:	aa e2       	ldi	r26, 0x2A	; 42
    3094:	b0 e0       	ldi	r27, 0x00	; 0
    3096:	ea e2       	ldi	r30, 0x2A	; 42
    3098:	f0 e0       	ldi	r31, 0x00	; 0
    309a:	80 81       	ld	r24, Z
    309c:	88 60       	ori	r24, 0x08	; 8
    309e:	8c 93       	st	X, r24
	ubrr_value = (uint16) ((F_CPU / (config->Baud_Rate * 8UL)) - 1);
    30a0:	eb 81       	ldd	r30, Y+3	; 0x03
    30a2:	fc 81       	ldd	r31, Y+4	; 0x04
    30a4:	83 81       	ldd	r24, Z+3	; 0x03
    30a6:	94 81       	ldd	r25, Z+4	; 0x04
    30a8:	cc 01       	movw	r24, r24
    30aa:	a0 e0       	ldi	r26, 0x00	; 0
    30ac:	b0 e0       	ldi	r27, 0x00	; 0
    30ae:	88 0f       	add	r24, r24
    30b0:	99 1f       	adc	r25, r25
    30b2:	aa 1f       	adc	r26, r26
    30b4:	bb 1f       	adc	r27, r27
    30b6:	88 0f       	add	r24, r24
    30b8:	99 1f       	adc	r25, r25
    30ba:	aa 1f       	adc	r26, r26
    30bc:	bb 1f       	adc	r27, r27
    30be:	88 0f       	add	r24, r24
    30c0:	99 1f       	adc	r25, r25
    30c2:	aa 1f       	adc	r26, r26
    30c4:	bb 1f       	adc	r27, r27
    30c6:	9c 01       	movw	r18, r24
    30c8:	ad 01       	movw	r20, r26
    30ca:	80 e0       	ldi	r24, 0x00	; 0
    30cc:	92 e1       	ldi	r25, 0x12	; 18
    30ce:	aa e7       	ldi	r26, 0x7A	; 122
    30d0:	b0 e0       	ldi	r27, 0x00	; 0
    30d2:	bc 01       	movw	r22, r24
    30d4:	cd 01       	movw	r24, r26
    30d6:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__udivmodsi4>
    30da:	da 01       	movw	r26, r20
    30dc:	c9 01       	movw	r24, r18
    30de:	01 97       	sbiw	r24, 0x01	; 1
    30e0:	9a 83       	std	Y+2, r25	; 0x02
    30e2:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = ubrr_value >> 8;
    30e4:	e0 e4       	ldi	r30, 0x40	; 64
    30e6:	f0 e0       	ldi	r31, 0x00	; 0
    30e8:	89 81       	ldd	r24, Y+1	; 0x01
    30ea:	9a 81       	ldd	r25, Y+2	; 0x02
    30ec:	89 2f       	mov	r24, r25
    30ee:	99 27       	eor	r25, r25
    30f0:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    30f2:	e9 e2       	ldi	r30, 0x29	; 41
    30f4:	f0 e0       	ldi	r31, 0x00	; 0
    30f6:	89 81       	ldd	r24, Y+1	; 0x01
    30f8:	80 83       	st	Z, r24
	SET_BIT(UCSRC, URSEL);
    30fa:	a0 e4       	ldi	r26, 0x40	; 64
    30fc:	b0 e0       	ldi	r27, 0x00	; 0
    30fe:	e0 e4       	ldi	r30, 0x40	; 64
    3100:	f0 e0       	ldi	r31, 0x00	; 0
    3102:	80 81       	ld	r24, Z
    3104:	80 68       	ori	r24, 0x80	; 128
    3106:	8c 93       	st	X, r24
	switch (config->Character_Size) {
    3108:	eb 81       	ldd	r30, Y+3	; 0x03
    310a:	fc 81       	ldd	r31, Y+4	; 0x04
    310c:	82 81       	ldd	r24, Z+2	; 0x02
    310e:	28 2f       	mov	r18, r24
    3110:	30 e0       	ldi	r19, 0x00	; 0
    3112:	3e 83       	std	Y+6, r19	; 0x06
    3114:	2d 83       	std	Y+5, r18	; 0x05
    3116:	8d 81       	ldd	r24, Y+5	; 0x05
    3118:	9e 81       	ldd	r25, Y+6	; 0x06
    311a:	87 30       	cpi	r24, 0x07	; 7
    311c:	91 05       	cpc	r25, r1
    311e:	09 f4       	brne	.+2      	; 0x3122 <USART_init+0xc2>
    3120:	49 c0       	rjmp	.+146    	; 0x31b4 <USART_init+0x154>
    3122:	2d 81       	ldd	r18, Y+5	; 0x05
    3124:	3e 81       	ldd	r19, Y+6	; 0x06
    3126:	28 30       	cpi	r18, 0x08	; 8
    3128:	31 05       	cpc	r19, r1
    312a:	5c f4       	brge	.+22     	; 0x3142 <USART_init+0xe2>
    312c:	8d 81       	ldd	r24, Y+5	; 0x05
    312e:	9e 81       	ldd	r25, Y+6	; 0x06
    3130:	85 30       	cpi	r24, 0x05	; 5
    3132:	91 05       	cpc	r25, r1
    3134:	99 f0       	breq	.+38     	; 0x315c <USART_init+0xfc>
    3136:	2d 81       	ldd	r18, Y+5	; 0x05
    3138:	3e 81       	ldd	r19, Y+6	; 0x06
    313a:	26 30       	cpi	r18, 0x06	; 6
    313c:	31 05       	cpc	r19, r1
    313e:	21 f1       	breq	.+72     	; 0x3188 <USART_init+0x128>
    3140:	7a c0       	rjmp	.+244    	; 0x3236 <USART_init+0x1d6>
    3142:	8d 81       	ldd	r24, Y+5	; 0x05
    3144:	9e 81       	ldd	r25, Y+6	; 0x06
    3146:	88 30       	cpi	r24, 0x08	; 8
    3148:	91 05       	cpc	r25, r1
    314a:	09 f4       	brne	.+2      	; 0x314e <USART_init+0xee>
    314c:	49 c0       	rjmp	.+146    	; 0x31e0 <USART_init+0x180>
    314e:	2d 81       	ldd	r18, Y+5	; 0x05
    3150:	3e 81       	ldd	r19, Y+6	; 0x06
    3152:	29 30       	cpi	r18, 0x09	; 9
    3154:	31 05       	cpc	r19, r1
    3156:	09 f4       	brne	.+2      	; 0x315a <USART_init+0xfa>
    3158:	59 c0       	rjmp	.+178    	; 0x320c <USART_init+0x1ac>
    315a:	6d c0       	rjmp	.+218    	; 0x3236 <USART_init+0x1d6>
	case 5:
		CLEAR_BIT(UCSRC, UCSZ0);
    315c:	a0 e4       	ldi	r26, 0x40	; 64
    315e:	b0 e0       	ldi	r27, 0x00	; 0
    3160:	e0 e4       	ldi	r30, 0x40	; 64
    3162:	f0 e0       	ldi	r31, 0x00	; 0
    3164:	80 81       	ld	r24, Z
    3166:	8d 7f       	andi	r24, 0xFD	; 253
    3168:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC, UCSZ1);
    316a:	a0 e4       	ldi	r26, 0x40	; 64
    316c:	b0 e0       	ldi	r27, 0x00	; 0
    316e:	e0 e4       	ldi	r30, 0x40	; 64
    3170:	f0 e0       	ldi	r31, 0x00	; 0
    3172:	80 81       	ld	r24, Z
    3174:	8b 7f       	andi	r24, 0xFB	; 251
    3176:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRB, UCSZ2);
    3178:	aa e2       	ldi	r26, 0x2A	; 42
    317a:	b0 e0       	ldi	r27, 0x00	; 0
    317c:	ea e2       	ldi	r30, 0x2A	; 42
    317e:	f0 e0       	ldi	r31, 0x00	; 0
    3180:	80 81       	ld	r24, Z
    3182:	8b 7f       	andi	r24, 0xFB	; 251
    3184:	8c 93       	st	X, r24
    3186:	57 c0       	rjmp	.+174    	; 0x3236 <USART_init+0x1d6>
		break;
	case 6:
		SET_BIT(UCSRC, UCSZ0);
    3188:	a0 e4       	ldi	r26, 0x40	; 64
    318a:	b0 e0       	ldi	r27, 0x00	; 0
    318c:	e0 e4       	ldi	r30, 0x40	; 64
    318e:	f0 e0       	ldi	r31, 0x00	; 0
    3190:	80 81       	ld	r24, Z
    3192:	82 60       	ori	r24, 0x02	; 2
    3194:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC, UCSZ1);
    3196:	a0 e4       	ldi	r26, 0x40	; 64
    3198:	b0 e0       	ldi	r27, 0x00	; 0
    319a:	e0 e4       	ldi	r30, 0x40	; 64
    319c:	f0 e0       	ldi	r31, 0x00	; 0
    319e:	80 81       	ld	r24, Z
    31a0:	8b 7f       	andi	r24, 0xFB	; 251
    31a2:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRB, UCSZ2);
    31a4:	aa e2       	ldi	r26, 0x2A	; 42
    31a6:	b0 e0       	ldi	r27, 0x00	; 0
    31a8:	ea e2       	ldi	r30, 0x2A	; 42
    31aa:	f0 e0       	ldi	r31, 0x00	; 0
    31ac:	80 81       	ld	r24, Z
    31ae:	8b 7f       	andi	r24, 0xFB	; 251
    31b0:	8c 93       	st	X, r24
    31b2:	41 c0       	rjmp	.+130    	; 0x3236 <USART_init+0x1d6>
		break;
	case 7:
		CLEAR_BIT(UCSRC, UCSZ0);
    31b4:	a0 e4       	ldi	r26, 0x40	; 64
    31b6:	b0 e0       	ldi	r27, 0x00	; 0
    31b8:	e0 e4       	ldi	r30, 0x40	; 64
    31ba:	f0 e0       	ldi	r31, 0x00	; 0
    31bc:	80 81       	ld	r24, Z
    31be:	8d 7f       	andi	r24, 0xFD	; 253
    31c0:	8c 93       	st	X, r24
		SET_BIT(UCSRC, UCSZ1);
    31c2:	a0 e4       	ldi	r26, 0x40	; 64
    31c4:	b0 e0       	ldi	r27, 0x00	; 0
    31c6:	e0 e4       	ldi	r30, 0x40	; 64
    31c8:	f0 e0       	ldi	r31, 0x00	; 0
    31ca:	80 81       	ld	r24, Z
    31cc:	84 60       	ori	r24, 0x04	; 4
    31ce:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRB, UCSZ2);
    31d0:	aa e2       	ldi	r26, 0x2A	; 42
    31d2:	b0 e0       	ldi	r27, 0x00	; 0
    31d4:	ea e2       	ldi	r30, 0x2A	; 42
    31d6:	f0 e0       	ldi	r31, 0x00	; 0
    31d8:	80 81       	ld	r24, Z
    31da:	8b 7f       	andi	r24, 0xFB	; 251
    31dc:	8c 93       	st	X, r24
    31de:	2b c0       	rjmp	.+86     	; 0x3236 <USART_init+0x1d6>
		break;
	case 8:
		SET_BIT(UCSRC, UCSZ0);
    31e0:	a0 e4       	ldi	r26, 0x40	; 64
    31e2:	b0 e0       	ldi	r27, 0x00	; 0
    31e4:	e0 e4       	ldi	r30, 0x40	; 64
    31e6:	f0 e0       	ldi	r31, 0x00	; 0
    31e8:	80 81       	ld	r24, Z
    31ea:	82 60       	ori	r24, 0x02	; 2
    31ec:	8c 93       	st	X, r24
		SET_BIT(UCSRC, UCSZ1);
    31ee:	a0 e4       	ldi	r26, 0x40	; 64
    31f0:	b0 e0       	ldi	r27, 0x00	; 0
    31f2:	e0 e4       	ldi	r30, 0x40	; 64
    31f4:	f0 e0       	ldi	r31, 0x00	; 0
    31f6:	80 81       	ld	r24, Z
    31f8:	84 60       	ori	r24, 0x04	; 4
    31fa:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRB, UCSZ2);
    31fc:	aa e2       	ldi	r26, 0x2A	; 42
    31fe:	b0 e0       	ldi	r27, 0x00	; 0
    3200:	ea e2       	ldi	r30, 0x2A	; 42
    3202:	f0 e0       	ldi	r31, 0x00	; 0
    3204:	80 81       	ld	r24, Z
    3206:	8b 7f       	andi	r24, 0xFB	; 251
    3208:	8c 93       	st	X, r24
    320a:	15 c0       	rjmp	.+42     	; 0x3236 <USART_init+0x1d6>
		break;
	case 9:
		SET_BIT(UCSRC, UCSZ0);
    320c:	a0 e4       	ldi	r26, 0x40	; 64
    320e:	b0 e0       	ldi	r27, 0x00	; 0
    3210:	e0 e4       	ldi	r30, 0x40	; 64
    3212:	f0 e0       	ldi	r31, 0x00	; 0
    3214:	80 81       	ld	r24, Z
    3216:	82 60       	ori	r24, 0x02	; 2
    3218:	8c 93       	st	X, r24
		SET_BIT(UCSRC, UCSZ1);
    321a:	a0 e4       	ldi	r26, 0x40	; 64
    321c:	b0 e0       	ldi	r27, 0x00	; 0
    321e:	e0 e4       	ldi	r30, 0x40	; 64
    3220:	f0 e0       	ldi	r31, 0x00	; 0
    3222:	80 81       	ld	r24, Z
    3224:	84 60       	ori	r24, 0x04	; 4
    3226:	8c 93       	st	X, r24
		SET_BIT(UCSRB, UCSZ2);
    3228:	aa e2       	ldi	r26, 0x2A	; 42
    322a:	b0 e0       	ldi	r27, 0x00	; 0
    322c:	ea e2       	ldi	r30, 0x2A	; 42
    322e:	f0 e0       	ldi	r31, 0x00	; 0
    3230:	80 81       	ld	r24, Z
    3232:	84 60       	ori	r24, 0x04	; 4
    3234:	8c 93       	st	X, r24
		break;
	}
	UCSRC = (UCSRC & 0xcf) | (config->ParityMode << 4);
    3236:	a0 e4       	ldi	r26, 0x40	; 64
    3238:	b0 e0       	ldi	r27, 0x00	; 0
    323a:	e0 e4       	ldi	r30, 0x40	; 64
    323c:	f0 e0       	ldi	r31, 0x00	; 0
    323e:	80 81       	ld	r24, Z
    3240:	28 2f       	mov	r18, r24
    3242:	2f 7c       	andi	r18, 0xCF	; 207
    3244:	eb 81       	ldd	r30, Y+3	; 0x03
    3246:	fc 81       	ldd	r31, Y+4	; 0x04
    3248:	80 81       	ld	r24, Z
    324a:	88 2f       	mov	r24, r24
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	82 95       	swap	r24
    3250:	92 95       	swap	r25
    3252:	90 7f       	andi	r25, 0xF0	; 240
    3254:	98 27       	eor	r25, r24
    3256:	80 7f       	andi	r24, 0xF0	; 240
    3258:	98 27       	eor	r25, r24
    325a:	82 2b       	or	r24, r18
    325c:	8c 93       	st	X, r24
	if (config->Stop_Select == BIT_1_STOP_SELECT) {
    325e:	eb 81       	ldd	r30, Y+3	; 0x03
    3260:	fc 81       	ldd	r31, Y+4	; 0x04
    3262:	81 81       	ldd	r24, Z+1	; 0x01
    3264:	88 23       	and	r24, r24
    3266:	41 f4       	brne	.+16     	; 0x3278 <USART_init+0x218>
		CLEAR_BIT(UCSRC, USBS);
    3268:	a0 e4       	ldi	r26, 0x40	; 64
    326a:	b0 e0       	ldi	r27, 0x00	; 0
    326c:	e0 e4       	ldi	r30, 0x40	; 64
    326e:	f0 e0       	ldi	r31, 0x00	; 0
    3270:	80 81       	ld	r24, Z
    3272:	87 7f       	andi	r24, 0xF7	; 247
    3274:	8c 93       	st	X, r24
    3276:	07 c0       	rjmp	.+14     	; 0x3286 <USART_init+0x226>
	} else {
		SET_BIT(UCSRC, USBS);
    3278:	a0 e4       	ldi	r26, 0x40	; 64
    327a:	b0 e0       	ldi	r27, 0x00	; 0
    327c:	e0 e4       	ldi	r30, 0x40	; 64
    327e:	f0 e0       	ldi	r31, 0x00	; 0
    3280:	80 81       	ld	r24, Z
    3282:	88 60       	ori	r24, 0x08	; 8
    3284:	8c 93       	st	X, r24
	}
}
    3286:	26 96       	adiw	r28, 0x06	; 6
    3288:	0f b6       	in	r0, 0x3f	; 63
    328a:	f8 94       	cli
    328c:	de bf       	out	0x3e, r29	; 62
    328e:	0f be       	out	0x3f, r0	; 63
    3290:	cd bf       	out	0x3d, r28	; 61
    3292:	cf 91       	pop	r28
    3294:	df 91       	pop	r29
    3296:	08 95       	ret

00003298 <USART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void USART_sendByte(uint8 data) {
    3298:	df 93       	push	r29
    329a:	cf 93       	push	r28
    329c:	0f 92       	push	r0
    329e:	cd b7       	in	r28, 0x3d	; 61
    32a0:	de b7       	in	r29, 0x3e	; 62
    32a2:	89 83       	std	Y+1, r24	; 0x01
	UDR = data;
    32a4:	ec e2       	ldi	r30, 0x2C	; 44
    32a6:	f0 e0       	ldi	r31, 0x00	; 0
    32a8:	89 81       	ldd	r24, Y+1	; 0x01
    32aa:	80 83       	st	Z, r24
	while (BIT_IS_CLEAR(UCSRA, TXC))
    32ac:	eb e2       	ldi	r30, 0x2B	; 43
    32ae:	f0 e0       	ldi	r31, 0x00	; 0
    32b0:	80 81       	ld	r24, Z
    32b2:	88 2f       	mov	r24, r24
    32b4:	90 e0       	ldi	r25, 0x00	; 0
    32b6:	80 74       	andi	r24, 0x40	; 64
    32b8:	90 70       	andi	r25, 0x00	; 0
    32ba:	00 97       	sbiw	r24, 0x00	; 0
    32bc:	b9 f3       	breq	.-18     	; 0x32ac <USART_sendByte+0x14>
		;
	SET_BIT(UCSRA, TXC);
    32be:	ab e2       	ldi	r26, 0x2B	; 43
    32c0:	b0 e0       	ldi	r27, 0x00	; 0
    32c2:	eb e2       	ldi	r30, 0x2B	; 43
    32c4:	f0 e0       	ldi	r31, 0x00	; 0
    32c6:	80 81       	ld	r24, Z
    32c8:	80 64       	ori	r24, 0x40	; 64
    32ca:	8c 93       	st	X, r24
}
    32cc:	0f 90       	pop	r0
    32ce:	cf 91       	pop	r28
    32d0:	df 91       	pop	r29
    32d2:	08 95       	ret

000032d4 <USART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 USART_recieveByte() {
    32d4:	df 93       	push	r29
    32d6:	cf 93       	push	r28
    32d8:	cd b7       	in	r28, 0x3d	; 61
    32da:	de b7       	in	r29, 0x3e	; 62
	while (BIT_IS_CLEAR(UCSRA, RXC))
    32dc:	eb e2       	ldi	r30, 0x2B	; 43
    32de:	f0 e0       	ldi	r31, 0x00	; 0
    32e0:	80 81       	ld	r24, Z
    32e2:	88 23       	and	r24, r24
    32e4:	dc f7       	brge	.-10     	; 0x32dc <USART_recieveByte+0x8>
		;
	return UDR;
    32e6:	ec e2       	ldi	r30, 0x2C	; 44
    32e8:	f0 e0       	ldi	r31, 0x00	; 0
    32ea:	80 81       	ld	r24, Z
	// it returns the data and clear the flag So U don't need to clear it
}
    32ec:	cf 91       	pop	r28
    32ee:	df 91       	pop	r29
    32f0:	08 95       	ret

000032f2 <USART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void USART_sendString(string s) {
    32f2:	df 93       	push	r29
    32f4:	cf 93       	push	r28
    32f6:	00 d0       	rcall	.+0      	; 0x32f8 <USART_sendString+0x6>
    32f8:	0f 92       	push	r0
    32fa:	cd b7       	in	r28, 0x3d	; 61
    32fc:	de b7       	in	r29, 0x3e	; 62
    32fe:	9b 83       	std	Y+3, r25	; 0x03
    3300:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3302:	19 82       	std	Y+1, r1	; 0x01
    3304:	0e c0       	rjmp	.+28     	; 0x3322 <USART_sendString+0x30>
	while (s[i] != '\0') {
		USART_sendByte(s[i]);
    3306:	89 81       	ldd	r24, Y+1	; 0x01
    3308:	28 2f       	mov	r18, r24
    330a:	30 e0       	ldi	r19, 0x00	; 0
    330c:	8a 81       	ldd	r24, Y+2	; 0x02
    330e:	9b 81       	ldd	r25, Y+3	; 0x03
    3310:	fc 01       	movw	r30, r24
    3312:	e2 0f       	add	r30, r18
    3314:	f3 1f       	adc	r31, r19
    3316:	80 81       	ld	r24, Z
    3318:	0e 94 4c 19 	call	0x3298	; 0x3298 <USART_sendByte>
		i++;
    331c:	89 81       	ldd	r24, Y+1	; 0x01
    331e:	8f 5f       	subi	r24, 0xFF	; 255
    3320:	89 83       	std	Y+1, r24	; 0x01
 * Description :
 * Send the required string through UART to the other UART device.
 */
void USART_sendString(string s) {
	uint8 i = 0;
	while (s[i] != '\0') {
    3322:	89 81       	ldd	r24, Y+1	; 0x01
    3324:	28 2f       	mov	r18, r24
    3326:	30 e0       	ldi	r19, 0x00	; 0
    3328:	8a 81       	ldd	r24, Y+2	; 0x02
    332a:	9b 81       	ldd	r25, Y+3	; 0x03
    332c:	fc 01       	movw	r30, r24
    332e:	e2 0f       	add	r30, r18
    3330:	f3 1f       	adc	r31, r19
    3332:	80 81       	ld	r24, Z
    3334:	88 23       	and	r24, r24
    3336:	39 f7       	brne	.-50     	; 0x3306 <USART_sendString+0x14>
		USART_sendByte(s[i]);
		i++;
	}
}
    3338:	0f 90       	pop	r0
    333a:	0f 90       	pop	r0
    333c:	0f 90       	pop	r0
    333e:	cf 91       	pop	r28
    3340:	df 91       	pop	r29
    3342:	08 95       	ret

00003344 <USART_recieveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void USART_recieveString(uint8 *Str) {
    3344:	0f 93       	push	r16
    3346:	1f 93       	push	r17
    3348:	df 93       	push	r29
    334a:	cf 93       	push	r28
    334c:	00 d0       	rcall	.+0      	; 0x334e <USART_recieveString+0xa>
    334e:	0f 92       	push	r0
    3350:	cd b7       	in	r28, 0x3d	; 61
    3352:	de b7       	in	r29, 0x3e	; 62
    3354:	9b 83       	std	Y+3, r25	; 0x03
    3356:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3358:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = USART_recieveByte();
    335a:	89 81       	ldd	r24, Y+1	; 0x01
    335c:	28 2f       	mov	r18, r24
    335e:	30 e0       	ldi	r19, 0x00	; 0
    3360:	8a 81       	ldd	r24, Y+2	; 0x02
    3362:	9b 81       	ldd	r25, Y+3	; 0x03
    3364:	8c 01       	movw	r16, r24
    3366:	02 0f       	add	r16, r18
    3368:	13 1f       	adc	r17, r19
    336a:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <USART_recieveByte>
    336e:	f8 01       	movw	r30, r16
    3370:	80 83       	st	Z, r24
    3372:	0f c0       	rjmp	.+30     	; 0x3392 <USART_recieveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    3374:	89 81       	ldd	r24, Y+1	; 0x01
    3376:	8f 5f       	subi	r24, 0xFF	; 255
    3378:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = USART_recieveByte();
    337a:	89 81       	ldd	r24, Y+1	; 0x01
    337c:	28 2f       	mov	r18, r24
    337e:	30 e0       	ldi	r19, 0x00	; 0
    3380:	8a 81       	ldd	r24, Y+2	; 0x02
    3382:	9b 81       	ldd	r25, Y+3	; 0x03
    3384:	8c 01       	movw	r16, r24
    3386:	02 0f       	add	r16, r18
    3388:	13 1f       	adc	r17, r19
    338a:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <USART_recieveByte>
    338e:	f8 01       	movw	r30, r16
    3390:	80 83       	st	Z, r24
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void USART_recieveString(uint8 *Str) {
	uint8 i = 0;
	Str[i] = USART_recieveByte();
	while(Str[i] != '#')
    3392:	89 81       	ldd	r24, Y+1	; 0x01
    3394:	28 2f       	mov	r18, r24
    3396:	30 e0       	ldi	r19, 0x00	; 0
    3398:	8a 81       	ldd	r24, Y+2	; 0x02
    339a:	9b 81       	ldd	r25, Y+3	; 0x03
    339c:	fc 01       	movw	r30, r24
    339e:	e2 0f       	add	r30, r18
    33a0:	f3 1f       	adc	r31, r19
    33a2:	80 81       	ld	r24, Z
    33a4:	83 32       	cpi	r24, 0x23	; 35
    33a6:	31 f7       	brne	.-52     	; 0x3374 <USART_recieveString+0x30>
	{
		i++;
		Str[i] = USART_recieveByte();
	}
	Str[i] = '\0';
    33a8:	89 81       	ldd	r24, Y+1	; 0x01
    33aa:	28 2f       	mov	r18, r24
    33ac:	30 e0       	ldi	r19, 0x00	; 0
    33ae:	8a 81       	ldd	r24, Y+2	; 0x02
    33b0:	9b 81       	ldd	r25, Y+3	; 0x03
    33b2:	fc 01       	movw	r30, r24
    33b4:	e2 0f       	add	r30, r18
    33b6:	f3 1f       	adc	r31, r19
    33b8:	10 82       	st	Z, r1
}
    33ba:	0f 90       	pop	r0
    33bc:	0f 90       	pop	r0
    33be:	0f 90       	pop	r0
    33c0:	cf 91       	pop	r28
    33c2:	df 91       	pop	r29
    33c4:	1f 91       	pop	r17
    33c6:	0f 91       	pop	r16
    33c8:	08 95       	ret

000033ca <__udivmodsi4>:
    33ca:	a1 e2       	ldi	r26, 0x21	; 33
    33cc:	1a 2e       	mov	r1, r26
    33ce:	aa 1b       	sub	r26, r26
    33d0:	bb 1b       	sub	r27, r27
    33d2:	fd 01       	movw	r30, r26
    33d4:	0d c0       	rjmp	.+26     	; 0x33f0 <__udivmodsi4_ep>

000033d6 <__udivmodsi4_loop>:
    33d6:	aa 1f       	adc	r26, r26
    33d8:	bb 1f       	adc	r27, r27
    33da:	ee 1f       	adc	r30, r30
    33dc:	ff 1f       	adc	r31, r31
    33de:	a2 17       	cp	r26, r18
    33e0:	b3 07       	cpc	r27, r19
    33e2:	e4 07       	cpc	r30, r20
    33e4:	f5 07       	cpc	r31, r21
    33e6:	20 f0       	brcs	.+8      	; 0x33f0 <__udivmodsi4_ep>
    33e8:	a2 1b       	sub	r26, r18
    33ea:	b3 0b       	sbc	r27, r19
    33ec:	e4 0b       	sbc	r30, r20
    33ee:	f5 0b       	sbc	r31, r21

000033f0 <__udivmodsi4_ep>:
    33f0:	66 1f       	adc	r22, r22
    33f2:	77 1f       	adc	r23, r23
    33f4:	88 1f       	adc	r24, r24
    33f6:	99 1f       	adc	r25, r25
    33f8:	1a 94       	dec	r1
    33fa:	69 f7       	brne	.-38     	; 0x33d6 <__udivmodsi4_loop>
    33fc:	60 95       	com	r22
    33fe:	70 95       	com	r23
    3400:	80 95       	com	r24
    3402:	90 95       	com	r25
    3404:	9b 01       	movw	r18, r22
    3406:	ac 01       	movw	r20, r24
    3408:	bd 01       	movw	r22, r26
    340a:	cf 01       	movw	r24, r30
    340c:	08 95       	ret

0000340e <__prologue_saves__>:
    340e:	2f 92       	push	r2
    3410:	3f 92       	push	r3
    3412:	4f 92       	push	r4
    3414:	5f 92       	push	r5
    3416:	6f 92       	push	r6
    3418:	7f 92       	push	r7
    341a:	8f 92       	push	r8
    341c:	9f 92       	push	r9
    341e:	af 92       	push	r10
    3420:	bf 92       	push	r11
    3422:	cf 92       	push	r12
    3424:	df 92       	push	r13
    3426:	ef 92       	push	r14
    3428:	ff 92       	push	r15
    342a:	0f 93       	push	r16
    342c:	1f 93       	push	r17
    342e:	cf 93       	push	r28
    3430:	df 93       	push	r29
    3432:	cd b7       	in	r28, 0x3d	; 61
    3434:	de b7       	in	r29, 0x3e	; 62
    3436:	ca 1b       	sub	r28, r26
    3438:	db 0b       	sbc	r29, r27
    343a:	0f b6       	in	r0, 0x3f	; 63
    343c:	f8 94       	cli
    343e:	de bf       	out	0x3e, r29	; 62
    3440:	0f be       	out	0x3f, r0	; 63
    3442:	cd bf       	out	0x3d, r28	; 61
    3444:	09 94       	ijmp

00003446 <__epilogue_restores__>:
    3446:	2a 88       	ldd	r2, Y+18	; 0x12
    3448:	39 88       	ldd	r3, Y+17	; 0x11
    344a:	48 88       	ldd	r4, Y+16	; 0x10
    344c:	5f 84       	ldd	r5, Y+15	; 0x0f
    344e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3450:	7d 84       	ldd	r7, Y+13	; 0x0d
    3452:	8c 84       	ldd	r8, Y+12	; 0x0c
    3454:	9b 84       	ldd	r9, Y+11	; 0x0b
    3456:	aa 84       	ldd	r10, Y+10	; 0x0a
    3458:	b9 84       	ldd	r11, Y+9	; 0x09
    345a:	c8 84       	ldd	r12, Y+8	; 0x08
    345c:	df 80       	ldd	r13, Y+7	; 0x07
    345e:	ee 80       	ldd	r14, Y+6	; 0x06
    3460:	fd 80       	ldd	r15, Y+5	; 0x05
    3462:	0c 81       	ldd	r16, Y+4	; 0x04
    3464:	1b 81       	ldd	r17, Y+3	; 0x03
    3466:	aa 81       	ldd	r26, Y+2	; 0x02
    3468:	b9 81       	ldd	r27, Y+1	; 0x01
    346a:	ce 0f       	add	r28, r30
    346c:	d1 1d       	adc	r29, r1
    346e:	0f b6       	in	r0, 0x3f	; 63
    3470:	f8 94       	cli
    3472:	de bf       	out	0x3e, r29	; 62
    3474:	0f be       	out	0x3f, r0	; 63
    3476:	cd bf       	out	0x3d, r28	; 61
    3478:	ed 01       	movw	r28, r26
    347a:	08 95       	ret

0000347c <itoa>:
    347c:	fb 01       	movw	r30, r22
    347e:	9f 01       	movw	r18, r30
    3480:	e8 94       	clt
    3482:	42 30       	cpi	r20, 0x02	; 2
    3484:	c4 f0       	brlt	.+48     	; 0x34b6 <itoa+0x3a>
    3486:	45 32       	cpi	r20, 0x25	; 37
    3488:	b4 f4       	brge	.+44     	; 0x34b6 <itoa+0x3a>
    348a:	4a 30       	cpi	r20, 0x0A	; 10
    348c:	29 f4       	brne	.+10     	; 0x3498 <itoa+0x1c>
    348e:	97 fb       	bst	r25, 7
    3490:	1e f4       	brtc	.+6      	; 0x3498 <itoa+0x1c>
    3492:	90 95       	com	r25
    3494:	81 95       	neg	r24
    3496:	9f 4f       	sbci	r25, 0xFF	; 255
    3498:	64 2f       	mov	r22, r20
    349a:	77 27       	eor	r23, r23
    349c:	0e 94 6f 1a 	call	0x34de	; 0x34de <__udivmodhi4>
    34a0:	80 5d       	subi	r24, 0xD0	; 208
    34a2:	8a 33       	cpi	r24, 0x3A	; 58
    34a4:	0c f0       	brlt	.+2      	; 0x34a8 <itoa+0x2c>
    34a6:	89 5d       	subi	r24, 0xD9	; 217
    34a8:	81 93       	st	Z+, r24
    34aa:	cb 01       	movw	r24, r22
    34ac:	00 97       	sbiw	r24, 0x00	; 0
    34ae:	a1 f7       	brne	.-24     	; 0x3498 <itoa+0x1c>
    34b0:	16 f4       	brtc	.+4      	; 0x34b6 <itoa+0x3a>
    34b2:	5d e2       	ldi	r21, 0x2D	; 45
    34b4:	51 93       	st	Z+, r21
    34b6:	10 82       	st	Z, r1
    34b8:	c9 01       	movw	r24, r18
    34ba:	0c 94 5f 1a 	jmp	0x34be	; 0x34be <strrev>

000034be <strrev>:
    34be:	dc 01       	movw	r26, r24
    34c0:	fc 01       	movw	r30, r24
    34c2:	67 2f       	mov	r22, r23
    34c4:	71 91       	ld	r23, Z+
    34c6:	77 23       	and	r23, r23
    34c8:	e1 f7       	brne	.-8      	; 0x34c2 <strrev+0x4>
    34ca:	32 97       	sbiw	r30, 0x02	; 2
    34cc:	04 c0       	rjmp	.+8      	; 0x34d6 <strrev+0x18>
    34ce:	7c 91       	ld	r23, X
    34d0:	6d 93       	st	X+, r22
    34d2:	70 83       	st	Z, r23
    34d4:	62 91       	ld	r22, -Z
    34d6:	ae 17       	cp	r26, r30
    34d8:	bf 07       	cpc	r27, r31
    34da:	c8 f3       	brcs	.-14     	; 0x34ce <strrev+0x10>
    34dc:	08 95       	ret

000034de <__udivmodhi4>:
    34de:	aa 1b       	sub	r26, r26
    34e0:	bb 1b       	sub	r27, r27
    34e2:	51 e1       	ldi	r21, 0x11	; 17
    34e4:	07 c0       	rjmp	.+14     	; 0x34f4 <__udivmodhi4_ep>

000034e6 <__udivmodhi4_loop>:
    34e6:	aa 1f       	adc	r26, r26
    34e8:	bb 1f       	adc	r27, r27
    34ea:	a6 17       	cp	r26, r22
    34ec:	b7 07       	cpc	r27, r23
    34ee:	10 f0       	brcs	.+4      	; 0x34f4 <__udivmodhi4_ep>
    34f0:	a6 1b       	sub	r26, r22
    34f2:	b7 0b       	sbc	r27, r23

000034f4 <__udivmodhi4_ep>:
    34f4:	88 1f       	adc	r24, r24
    34f6:	99 1f       	adc	r25, r25
    34f8:	5a 95       	dec	r21
    34fa:	a9 f7       	brne	.-22     	; 0x34e6 <__udivmodhi4_loop>
    34fc:	80 95       	com	r24
    34fe:	90 95       	com	r25
    3500:	bc 01       	movw	r22, r24
    3502:	cd 01       	movw	r24, r26
    3504:	08 95       	ret

00003506 <_exit>:
    3506:	f8 94       	cli

00003508 <__stop_program>:
    3508:	ff cf       	rjmp	.-2      	; 0x3508 <__stop_program>
