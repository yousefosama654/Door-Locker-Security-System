
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000dd8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00001ac4  00000000  00000000  00000e2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000010d9  00000000  00000000  000028f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 c3 06 	call	0xd86	; 0xd86 <main>
  64:	0c 94 ea 06 	jmp	0xdd4	; 0xdd4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <GPIO_setupPinDirection+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <GPIO_setupPinDirection+0x8>
  74:	0f 92       	push	r0
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62
  7a:	89 83       	std	Y+1, r24	; 0x01
  7c:	6a 83       	std	Y+2, r22	; 0x02
  7e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
  80:	8a 81       	ldd	r24, Y+2	; 0x02
  82:	88 30       	cpi	r24, 0x08	; 8
  84:	08 f0       	brcs	.+2      	; 0x88 <GPIO_setupPinDirection+0x1c>
  86:	d5 c0       	rjmp	.+426    	; 0x232 <GPIO_setupPinDirection+0x1c6>
  88:	89 81       	ldd	r24, Y+1	; 0x01
  8a:	84 30       	cpi	r24, 0x04	; 4
  8c:	08 f0       	brcs	.+2      	; 0x90 <GPIO_setupPinDirection+0x24>
  8e:	d1 c0       	rjmp	.+418    	; 0x232 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
  90:	89 81       	ldd	r24, Y+1	; 0x01
  92:	28 2f       	mov	r18, r24
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	3d 83       	std	Y+5, r19	; 0x05
  98:	2c 83       	std	Y+4, r18	; 0x04
  9a:	8c 81       	ldd	r24, Y+4	; 0x04
  9c:	9d 81       	ldd	r25, Y+5	; 0x05
  9e:	81 30       	cpi	r24, 0x01	; 1
  a0:	91 05       	cpc	r25, r1
  a2:	09 f4       	brne	.+2      	; 0xa6 <GPIO_setupPinDirection+0x3a>
  a4:	43 c0       	rjmp	.+134    	; 0x12c <GPIO_setupPinDirection+0xc0>
  a6:	2c 81       	ldd	r18, Y+4	; 0x04
  a8:	3d 81       	ldd	r19, Y+5	; 0x05
  aa:	22 30       	cpi	r18, 0x02	; 2
  ac:	31 05       	cpc	r19, r1
  ae:	2c f4       	brge	.+10     	; 0xba <GPIO_setupPinDirection+0x4e>
  b0:	8c 81       	ldd	r24, Y+4	; 0x04
  b2:	9d 81       	ldd	r25, Y+5	; 0x05
  b4:	00 97       	sbiw	r24, 0x00	; 0
  b6:	71 f0       	breq	.+28     	; 0xd4 <GPIO_setupPinDirection+0x68>
  b8:	bc c0       	rjmp	.+376    	; 0x232 <GPIO_setupPinDirection+0x1c6>
  ba:	2c 81       	ldd	r18, Y+4	; 0x04
  bc:	3d 81       	ldd	r19, Y+5	; 0x05
  be:	22 30       	cpi	r18, 0x02	; 2
  c0:	31 05       	cpc	r19, r1
  c2:	09 f4       	brne	.+2      	; 0xc6 <GPIO_setupPinDirection+0x5a>
  c4:	5f c0       	rjmp	.+190    	; 0x184 <GPIO_setupPinDirection+0x118>
  c6:	8c 81       	ldd	r24, Y+4	; 0x04
  c8:	9d 81       	ldd	r25, Y+5	; 0x05
  ca:	83 30       	cpi	r24, 0x03	; 3
  cc:	91 05       	cpc	r25, r1
  ce:	09 f4       	brne	.+2      	; 0xd2 <GPIO_setupPinDirection+0x66>
  d0:	85 c0       	rjmp	.+266    	; 0x1dc <GPIO_setupPinDirection+0x170>
  d2:	af c0       	rjmp	.+350    	; 0x232 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
  d4:	8b 81       	ldd	r24, Y+3	; 0x03
  d6:	81 30       	cpi	r24, 0x01	; 1
  d8:	a1 f4       	brne	.+40     	; 0x102 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
  da:	aa e3       	ldi	r26, 0x3A	; 58
  dc:	b0 e0       	ldi	r27, 0x00	; 0
  de:	ea e3       	ldi	r30, 0x3A	; 58
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	48 2f       	mov	r20, r24
  e6:	8a 81       	ldd	r24, Y+2	; 0x02
  e8:	28 2f       	mov	r18, r24
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	02 2e       	mov	r0, r18
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <GPIO_setupPinDirection+0x8c>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	0a 94       	dec	r0
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <GPIO_setupPinDirection+0x88>
  fc:	84 2b       	or	r24, r20
  fe:	8c 93       	st	X, r24
 100:	98 c0       	rjmp	.+304    	; 0x232 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
 102:	aa e3       	ldi	r26, 0x3A	; 58
 104:	b0 e0       	ldi	r27, 0x00	; 0
 106:	ea e3       	ldi	r30, 0x3A	; 58
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	48 2f       	mov	r20, r24
 10e:	8a 81       	ldd	r24, Y+2	; 0x02
 110:	28 2f       	mov	r18, r24
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 2e       	mov	r0, r18
 11a:	02 c0       	rjmp	.+4      	; 0x120 <GPIO_setupPinDirection+0xb4>
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	0a 94       	dec	r0
 122:	e2 f7       	brpl	.-8      	; 0x11c <GPIO_setupPinDirection+0xb0>
 124:	80 95       	com	r24
 126:	84 23       	and	r24, r20
 128:	8c 93       	st	X, r24
 12a:	83 c0       	rjmp	.+262    	; 0x232 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
 12c:	8b 81       	ldd	r24, Y+3	; 0x03
 12e:	81 30       	cpi	r24, 0x01	; 1
 130:	a1 f4       	brne	.+40     	; 0x15a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
 132:	a7 e3       	ldi	r26, 0x37	; 55
 134:	b0 e0       	ldi	r27, 0x00	; 0
 136:	e7 e3       	ldi	r30, 0x37	; 55
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	48 2f       	mov	r20, r24
 13e:	8a 81       	ldd	r24, Y+2	; 0x02
 140:	28 2f       	mov	r18, r24
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	02 2e       	mov	r0, r18
 14a:	02 c0       	rjmp	.+4      	; 0x150 <GPIO_setupPinDirection+0xe4>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	0a 94       	dec	r0
 152:	e2 f7       	brpl	.-8      	; 0x14c <GPIO_setupPinDirection+0xe0>
 154:	84 2b       	or	r24, r20
 156:	8c 93       	st	X, r24
 158:	6c c0       	rjmp	.+216    	; 0x232 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
 15a:	a7 e3       	ldi	r26, 0x37	; 55
 15c:	b0 e0       	ldi	r27, 0x00	; 0
 15e:	e7 e3       	ldi	r30, 0x37	; 55
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	48 2f       	mov	r20, r24
 166:	8a 81       	ldd	r24, Y+2	; 0x02
 168:	28 2f       	mov	r18, r24
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	02 2e       	mov	r0, r18
 172:	02 c0       	rjmp	.+4      	; 0x178 <GPIO_setupPinDirection+0x10c>
 174:	88 0f       	add	r24, r24
 176:	99 1f       	adc	r25, r25
 178:	0a 94       	dec	r0
 17a:	e2 f7       	brpl	.-8      	; 0x174 <GPIO_setupPinDirection+0x108>
 17c:	80 95       	com	r24
 17e:	84 23       	and	r24, r20
 180:	8c 93       	st	X, r24
 182:	57 c0       	rjmp	.+174    	; 0x232 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
 184:	8b 81       	ldd	r24, Y+3	; 0x03
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	a1 f4       	brne	.+40     	; 0x1b2 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
 18a:	a4 e3       	ldi	r26, 0x34	; 52
 18c:	b0 e0       	ldi	r27, 0x00	; 0
 18e:	e4 e3       	ldi	r30, 0x34	; 52
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	48 2f       	mov	r20, r24
 196:	8a 81       	ldd	r24, Y+2	; 0x02
 198:	28 2f       	mov	r18, r24
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	02 2e       	mov	r0, r18
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <GPIO_setupPinDirection+0x13c>
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	0a 94       	dec	r0
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <GPIO_setupPinDirection+0x138>
 1ac:	84 2b       	or	r24, r20
 1ae:	8c 93       	st	X, r24
 1b0:	40 c0       	rjmp	.+128    	; 0x232 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
 1b2:	a4 e3       	ldi	r26, 0x34	; 52
 1b4:	b0 e0       	ldi	r27, 0x00	; 0
 1b6:	e4 e3       	ldi	r30, 0x34	; 52
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	80 81       	ld	r24, Z
 1bc:	48 2f       	mov	r20, r24
 1be:	8a 81       	ldd	r24, Y+2	; 0x02
 1c0:	28 2f       	mov	r18, r24
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	02 2e       	mov	r0, r18
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <GPIO_setupPinDirection+0x164>
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	0a 94       	dec	r0
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <GPIO_setupPinDirection+0x160>
 1d4:	80 95       	com	r24
 1d6:	84 23       	and	r24, r20
 1d8:	8c 93       	st	X, r24
 1da:	2b c0       	rjmp	.+86     	; 0x232 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
 1dc:	8b 81       	ldd	r24, Y+3	; 0x03
 1de:	81 30       	cpi	r24, 0x01	; 1
 1e0:	a1 f4       	brne	.+40     	; 0x20a <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
 1e2:	a1 e3       	ldi	r26, 0x31	; 49
 1e4:	b0 e0       	ldi	r27, 0x00	; 0
 1e6:	e1 e3       	ldi	r30, 0x31	; 49
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	48 2f       	mov	r20, r24
 1ee:	8a 81       	ldd	r24, Y+2	; 0x02
 1f0:	28 2f       	mov	r18, r24
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 2e       	mov	r0, r18
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <GPIO_setupPinDirection+0x194>
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	0a 94       	dec	r0
 202:	e2 f7       	brpl	.-8      	; 0x1fc <GPIO_setupPinDirection+0x190>
 204:	84 2b       	or	r24, r20
 206:	8c 93       	st	X, r24
 208:	14 c0       	rjmp	.+40     	; 0x232 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
 20a:	a1 e3       	ldi	r26, 0x31	; 49
 20c:	b0 e0       	ldi	r27, 0x00	; 0
 20e:	e1 e3       	ldi	r30, 0x31	; 49
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	80 81       	ld	r24, Z
 214:	48 2f       	mov	r20, r24
 216:	8a 81       	ldd	r24, Y+2	; 0x02
 218:	28 2f       	mov	r18, r24
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	02 2e       	mov	r0, r18
 222:	02 c0       	rjmp	.+4      	; 0x228 <GPIO_setupPinDirection+0x1bc>
 224:	88 0f       	add	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	0a 94       	dec	r0
 22a:	e2 f7       	brpl	.-8      	; 0x224 <GPIO_setupPinDirection+0x1b8>
 22c:	80 95       	com	r24
 22e:	84 23       	and	r24, r20
 230:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
 232:	0f 90       	pop	r0
 234:	0f 90       	pop	r0
 236:	0f 90       	pop	r0
 238:	0f 90       	pop	r0
 23a:	0f 90       	pop	r0
 23c:	cf 91       	pop	r28
 23e:	df 91       	pop	r29
 240:	08 95       	ret

00000242 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
 242:	df 93       	push	r29
 244:	cf 93       	push	r28
 246:	00 d0       	rcall	.+0      	; 0x248 <GPIO_writePin+0x6>
 248:	00 d0       	rcall	.+0      	; 0x24a <GPIO_writePin+0x8>
 24a:	0f 92       	push	r0
 24c:	cd b7       	in	r28, 0x3d	; 61
 24e:	de b7       	in	r29, 0x3e	; 62
 250:	89 83       	std	Y+1, r24	; 0x01
 252:	6a 83       	std	Y+2, r22	; 0x02
 254:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 256:	8a 81       	ldd	r24, Y+2	; 0x02
 258:	88 30       	cpi	r24, 0x08	; 8
 25a:	08 f0       	brcs	.+2      	; 0x25e <GPIO_writePin+0x1c>
 25c:	d5 c0       	rjmp	.+426    	; 0x408 <GPIO_writePin+0x1c6>
 25e:	89 81       	ldd	r24, Y+1	; 0x01
 260:	84 30       	cpi	r24, 0x04	; 4
 262:	08 f0       	brcs	.+2      	; 0x266 <GPIO_writePin+0x24>
 264:	d1 c0       	rjmp	.+418    	; 0x408 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
 266:	89 81       	ldd	r24, Y+1	; 0x01
 268:	28 2f       	mov	r18, r24
 26a:	30 e0       	ldi	r19, 0x00	; 0
 26c:	3d 83       	std	Y+5, r19	; 0x05
 26e:	2c 83       	std	Y+4, r18	; 0x04
 270:	8c 81       	ldd	r24, Y+4	; 0x04
 272:	9d 81       	ldd	r25, Y+5	; 0x05
 274:	81 30       	cpi	r24, 0x01	; 1
 276:	91 05       	cpc	r25, r1
 278:	09 f4       	brne	.+2      	; 0x27c <GPIO_writePin+0x3a>
 27a:	43 c0       	rjmp	.+134    	; 0x302 <GPIO_writePin+0xc0>
 27c:	2c 81       	ldd	r18, Y+4	; 0x04
 27e:	3d 81       	ldd	r19, Y+5	; 0x05
 280:	22 30       	cpi	r18, 0x02	; 2
 282:	31 05       	cpc	r19, r1
 284:	2c f4       	brge	.+10     	; 0x290 <GPIO_writePin+0x4e>
 286:	8c 81       	ldd	r24, Y+4	; 0x04
 288:	9d 81       	ldd	r25, Y+5	; 0x05
 28a:	00 97       	sbiw	r24, 0x00	; 0
 28c:	71 f0       	breq	.+28     	; 0x2aa <GPIO_writePin+0x68>
 28e:	bc c0       	rjmp	.+376    	; 0x408 <GPIO_writePin+0x1c6>
 290:	2c 81       	ldd	r18, Y+4	; 0x04
 292:	3d 81       	ldd	r19, Y+5	; 0x05
 294:	22 30       	cpi	r18, 0x02	; 2
 296:	31 05       	cpc	r19, r1
 298:	09 f4       	brne	.+2      	; 0x29c <GPIO_writePin+0x5a>
 29a:	5f c0       	rjmp	.+190    	; 0x35a <GPIO_writePin+0x118>
 29c:	8c 81       	ldd	r24, Y+4	; 0x04
 29e:	9d 81       	ldd	r25, Y+5	; 0x05
 2a0:	83 30       	cpi	r24, 0x03	; 3
 2a2:	91 05       	cpc	r25, r1
 2a4:	09 f4       	brne	.+2      	; 0x2a8 <GPIO_writePin+0x66>
 2a6:	85 c0       	rjmp	.+266    	; 0x3b2 <GPIO_writePin+0x170>
 2a8:	af c0       	rjmp	.+350    	; 0x408 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
 2aa:	8b 81       	ldd	r24, Y+3	; 0x03
 2ac:	81 30       	cpi	r24, 0x01	; 1
 2ae:	a1 f4       	brne	.+40     	; 0x2d8 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
 2b0:	ab e3       	ldi	r26, 0x3B	; 59
 2b2:	b0 e0       	ldi	r27, 0x00	; 0
 2b4:	eb e3       	ldi	r30, 0x3B	; 59
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	80 81       	ld	r24, Z
 2ba:	48 2f       	mov	r20, r24
 2bc:	8a 81       	ldd	r24, Y+2	; 0x02
 2be:	28 2f       	mov	r18, r24
 2c0:	30 e0       	ldi	r19, 0x00	; 0
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	02 2e       	mov	r0, r18
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <GPIO_writePin+0x8c>
 2ca:	88 0f       	add	r24, r24
 2cc:	99 1f       	adc	r25, r25
 2ce:	0a 94       	dec	r0
 2d0:	e2 f7       	brpl	.-8      	; 0x2ca <GPIO_writePin+0x88>
 2d2:	84 2b       	or	r24, r20
 2d4:	8c 93       	st	X, r24
 2d6:	98 c0       	rjmp	.+304    	; 0x408 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
 2d8:	ab e3       	ldi	r26, 0x3B	; 59
 2da:	b0 e0       	ldi	r27, 0x00	; 0
 2dc:	eb e3       	ldi	r30, 0x3B	; 59
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	80 81       	ld	r24, Z
 2e2:	48 2f       	mov	r20, r24
 2e4:	8a 81       	ldd	r24, Y+2	; 0x02
 2e6:	28 2f       	mov	r18, r24
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	02 2e       	mov	r0, r18
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <GPIO_writePin+0xb4>
 2f2:	88 0f       	add	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	0a 94       	dec	r0
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <GPIO_writePin+0xb0>
 2fa:	80 95       	com	r24
 2fc:	84 23       	and	r24, r20
 2fe:	8c 93       	st	X, r24
 300:	83 c0       	rjmp	.+262    	; 0x408 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
 302:	8b 81       	ldd	r24, Y+3	; 0x03
 304:	81 30       	cpi	r24, 0x01	; 1
 306:	a1 f4       	brne	.+40     	; 0x330 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
 308:	a8 e3       	ldi	r26, 0x38	; 56
 30a:	b0 e0       	ldi	r27, 0x00	; 0
 30c:	e8 e3       	ldi	r30, 0x38	; 56
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	80 81       	ld	r24, Z
 312:	48 2f       	mov	r20, r24
 314:	8a 81       	ldd	r24, Y+2	; 0x02
 316:	28 2f       	mov	r18, r24
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	02 2e       	mov	r0, r18
 320:	02 c0       	rjmp	.+4      	; 0x326 <GPIO_writePin+0xe4>
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	0a 94       	dec	r0
 328:	e2 f7       	brpl	.-8      	; 0x322 <GPIO_writePin+0xe0>
 32a:	84 2b       	or	r24, r20
 32c:	8c 93       	st	X, r24
 32e:	6c c0       	rjmp	.+216    	; 0x408 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
 330:	a8 e3       	ldi	r26, 0x38	; 56
 332:	b0 e0       	ldi	r27, 0x00	; 0
 334:	e8 e3       	ldi	r30, 0x38	; 56
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	80 81       	ld	r24, Z
 33a:	48 2f       	mov	r20, r24
 33c:	8a 81       	ldd	r24, Y+2	; 0x02
 33e:	28 2f       	mov	r18, r24
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	02 2e       	mov	r0, r18
 348:	02 c0       	rjmp	.+4      	; 0x34e <GPIO_writePin+0x10c>
 34a:	88 0f       	add	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	0a 94       	dec	r0
 350:	e2 f7       	brpl	.-8      	; 0x34a <GPIO_writePin+0x108>
 352:	80 95       	com	r24
 354:	84 23       	and	r24, r20
 356:	8c 93       	st	X, r24
 358:	57 c0       	rjmp	.+174    	; 0x408 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
 35a:	8b 81       	ldd	r24, Y+3	; 0x03
 35c:	81 30       	cpi	r24, 0x01	; 1
 35e:	a1 f4       	brne	.+40     	; 0x388 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
 360:	a5 e3       	ldi	r26, 0x35	; 53
 362:	b0 e0       	ldi	r27, 0x00	; 0
 364:	e5 e3       	ldi	r30, 0x35	; 53
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	80 81       	ld	r24, Z
 36a:	48 2f       	mov	r20, r24
 36c:	8a 81       	ldd	r24, Y+2	; 0x02
 36e:	28 2f       	mov	r18, r24
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	02 2e       	mov	r0, r18
 378:	02 c0       	rjmp	.+4      	; 0x37e <GPIO_writePin+0x13c>
 37a:	88 0f       	add	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	0a 94       	dec	r0
 380:	e2 f7       	brpl	.-8      	; 0x37a <GPIO_writePin+0x138>
 382:	84 2b       	or	r24, r20
 384:	8c 93       	st	X, r24
 386:	40 c0       	rjmp	.+128    	; 0x408 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
 388:	a5 e3       	ldi	r26, 0x35	; 53
 38a:	b0 e0       	ldi	r27, 0x00	; 0
 38c:	e5 e3       	ldi	r30, 0x35	; 53
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	80 81       	ld	r24, Z
 392:	48 2f       	mov	r20, r24
 394:	8a 81       	ldd	r24, Y+2	; 0x02
 396:	28 2f       	mov	r18, r24
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	02 2e       	mov	r0, r18
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <GPIO_writePin+0x164>
 3a2:	88 0f       	add	r24, r24
 3a4:	99 1f       	adc	r25, r25
 3a6:	0a 94       	dec	r0
 3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <GPIO_writePin+0x160>
 3aa:	80 95       	com	r24
 3ac:	84 23       	and	r24, r20
 3ae:	8c 93       	st	X, r24
 3b0:	2b c0       	rjmp	.+86     	; 0x408 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
 3b2:	8b 81       	ldd	r24, Y+3	; 0x03
 3b4:	81 30       	cpi	r24, 0x01	; 1
 3b6:	a1 f4       	brne	.+40     	; 0x3e0 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
 3b8:	a2 e3       	ldi	r26, 0x32	; 50
 3ba:	b0 e0       	ldi	r27, 0x00	; 0
 3bc:	e2 e3       	ldi	r30, 0x32	; 50
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	80 81       	ld	r24, Z
 3c2:	48 2f       	mov	r20, r24
 3c4:	8a 81       	ldd	r24, Y+2	; 0x02
 3c6:	28 2f       	mov	r18, r24
 3c8:	30 e0       	ldi	r19, 0x00	; 0
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	02 2e       	mov	r0, r18
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <GPIO_writePin+0x194>
 3d2:	88 0f       	add	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	0a 94       	dec	r0
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <GPIO_writePin+0x190>
 3da:	84 2b       	or	r24, r20
 3dc:	8c 93       	st	X, r24
 3de:	14 c0       	rjmp	.+40     	; 0x408 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
 3e0:	a2 e3       	ldi	r26, 0x32	; 50
 3e2:	b0 e0       	ldi	r27, 0x00	; 0
 3e4:	e2 e3       	ldi	r30, 0x32	; 50
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	80 81       	ld	r24, Z
 3ea:	48 2f       	mov	r20, r24
 3ec:	8a 81       	ldd	r24, Y+2	; 0x02
 3ee:	28 2f       	mov	r18, r24
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	02 2e       	mov	r0, r18
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <GPIO_writePin+0x1bc>
 3fa:	88 0f       	add	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	0a 94       	dec	r0
 400:	e2 f7       	brpl	.-8      	; 0x3fa <GPIO_writePin+0x1b8>
 402:	80 95       	com	r24
 404:	84 23       	and	r24, r20
 406:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
 408:	0f 90       	pop	r0
 40a:	0f 90       	pop	r0
 40c:	0f 90       	pop	r0
 40e:	0f 90       	pop	r0
 410:	0f 90       	pop	r0
 412:	cf 91       	pop	r28
 414:	df 91       	pop	r29
 416:	08 95       	ret

00000418 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
 418:	df 93       	push	r29
 41a:	cf 93       	push	r28
 41c:	00 d0       	rcall	.+0      	; 0x41e <GPIO_readPin+0x6>
 41e:	00 d0       	rcall	.+0      	; 0x420 <GPIO_readPin+0x8>
 420:	0f 92       	push	r0
 422:	cd b7       	in	r28, 0x3d	; 61
 424:	de b7       	in	r29, 0x3e	; 62
 426:	8a 83       	std	Y+2, r24	; 0x02
 428:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
 42a:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 42c:	8b 81       	ldd	r24, Y+3	; 0x03
 42e:	88 30       	cpi	r24, 0x08	; 8
 430:	08 f0       	brcs	.+2      	; 0x434 <GPIO_readPin+0x1c>
 432:	84 c0       	rjmp	.+264    	; 0x53c <GPIO_readPin+0x124>
 434:	8a 81       	ldd	r24, Y+2	; 0x02
 436:	84 30       	cpi	r24, 0x04	; 4
 438:	08 f0       	brcs	.+2      	; 0x43c <GPIO_readPin+0x24>
 43a:	80 c0       	rjmp	.+256    	; 0x53c <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
 43c:	8a 81       	ldd	r24, Y+2	; 0x02
 43e:	28 2f       	mov	r18, r24
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	3d 83       	std	Y+5, r19	; 0x05
 444:	2c 83       	std	Y+4, r18	; 0x04
 446:	4c 81       	ldd	r20, Y+4	; 0x04
 448:	5d 81       	ldd	r21, Y+5	; 0x05
 44a:	41 30       	cpi	r20, 0x01	; 1
 44c:	51 05       	cpc	r21, r1
 44e:	79 f1       	breq	.+94     	; 0x4ae <GPIO_readPin+0x96>
 450:	8c 81       	ldd	r24, Y+4	; 0x04
 452:	9d 81       	ldd	r25, Y+5	; 0x05
 454:	82 30       	cpi	r24, 0x02	; 2
 456:	91 05       	cpc	r25, r1
 458:	34 f4       	brge	.+12     	; 0x466 <GPIO_readPin+0x4e>
 45a:	2c 81       	ldd	r18, Y+4	; 0x04
 45c:	3d 81       	ldd	r19, Y+5	; 0x05
 45e:	21 15       	cp	r18, r1
 460:	31 05       	cpc	r19, r1
 462:	69 f0       	breq	.+26     	; 0x47e <GPIO_readPin+0x66>
 464:	6b c0       	rjmp	.+214    	; 0x53c <GPIO_readPin+0x124>
 466:	4c 81       	ldd	r20, Y+4	; 0x04
 468:	5d 81       	ldd	r21, Y+5	; 0x05
 46a:	42 30       	cpi	r20, 0x02	; 2
 46c:	51 05       	cpc	r21, r1
 46e:	b9 f1       	breq	.+110    	; 0x4de <GPIO_readPin+0xc6>
 470:	8c 81       	ldd	r24, Y+4	; 0x04
 472:	9d 81       	ldd	r25, Y+5	; 0x05
 474:	83 30       	cpi	r24, 0x03	; 3
 476:	91 05       	cpc	r25, r1
 478:	09 f4       	brne	.+2      	; 0x47c <GPIO_readPin+0x64>
 47a:	49 c0       	rjmp	.+146    	; 0x50e <GPIO_readPin+0xf6>
 47c:	5f c0       	rjmp	.+190    	; 0x53c <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
 47e:	e9 e3       	ldi	r30, 0x39	; 57
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	80 81       	ld	r24, Z
 484:	28 2f       	mov	r18, r24
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	8b 81       	ldd	r24, Y+3	; 0x03
 48a:	88 2f       	mov	r24, r24
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	a9 01       	movw	r20, r18
 490:	02 c0       	rjmp	.+4      	; 0x496 <GPIO_readPin+0x7e>
 492:	55 95       	asr	r21
 494:	47 95       	ror	r20
 496:	8a 95       	dec	r24
 498:	e2 f7       	brpl	.-8      	; 0x492 <GPIO_readPin+0x7a>
 49a:	ca 01       	movw	r24, r20
 49c:	81 70       	andi	r24, 0x01	; 1
 49e:	90 70       	andi	r25, 0x00	; 0
 4a0:	88 23       	and	r24, r24
 4a2:	19 f0       	breq	.+6      	; 0x4aa <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	89 83       	std	Y+1, r24	; 0x01
 4a8:	49 c0       	rjmp	.+146    	; 0x53c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 4aa:	19 82       	std	Y+1, r1	; 0x01
 4ac:	47 c0       	rjmp	.+142    	; 0x53c <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
 4ae:	e6 e3       	ldi	r30, 0x36	; 54
 4b0:	f0 e0       	ldi	r31, 0x00	; 0
 4b2:	80 81       	ld	r24, Z
 4b4:	28 2f       	mov	r18, r24
 4b6:	30 e0       	ldi	r19, 0x00	; 0
 4b8:	8b 81       	ldd	r24, Y+3	; 0x03
 4ba:	88 2f       	mov	r24, r24
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	a9 01       	movw	r20, r18
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <GPIO_readPin+0xae>
 4c2:	55 95       	asr	r21
 4c4:	47 95       	ror	r20
 4c6:	8a 95       	dec	r24
 4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <GPIO_readPin+0xaa>
 4ca:	ca 01       	movw	r24, r20
 4cc:	81 70       	andi	r24, 0x01	; 1
 4ce:	90 70       	andi	r25, 0x00	; 0
 4d0:	88 23       	and	r24, r24
 4d2:	19 f0       	breq	.+6      	; 0x4da <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	89 83       	std	Y+1, r24	; 0x01
 4d8:	31 c0       	rjmp	.+98     	; 0x53c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 4da:	19 82       	std	Y+1, r1	; 0x01
 4dc:	2f c0       	rjmp	.+94     	; 0x53c <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
 4de:	e3 e3       	ldi	r30, 0x33	; 51
 4e0:	f0 e0       	ldi	r31, 0x00	; 0
 4e2:	80 81       	ld	r24, Z
 4e4:	28 2f       	mov	r18, r24
 4e6:	30 e0       	ldi	r19, 0x00	; 0
 4e8:	8b 81       	ldd	r24, Y+3	; 0x03
 4ea:	88 2f       	mov	r24, r24
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	a9 01       	movw	r20, r18
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <GPIO_readPin+0xde>
 4f2:	55 95       	asr	r21
 4f4:	47 95       	ror	r20
 4f6:	8a 95       	dec	r24
 4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <GPIO_readPin+0xda>
 4fa:	ca 01       	movw	r24, r20
 4fc:	81 70       	andi	r24, 0x01	; 1
 4fe:	90 70       	andi	r25, 0x00	; 0
 500:	88 23       	and	r24, r24
 502:	19 f0       	breq	.+6      	; 0x50a <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	89 83       	std	Y+1, r24	; 0x01
 508:	19 c0       	rjmp	.+50     	; 0x53c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 50a:	19 82       	std	Y+1, r1	; 0x01
 50c:	17 c0       	rjmp	.+46     	; 0x53c <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
 50e:	e0 e3       	ldi	r30, 0x30	; 48
 510:	f0 e0       	ldi	r31, 0x00	; 0
 512:	80 81       	ld	r24, Z
 514:	28 2f       	mov	r18, r24
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	8b 81       	ldd	r24, Y+3	; 0x03
 51a:	88 2f       	mov	r24, r24
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	a9 01       	movw	r20, r18
 520:	02 c0       	rjmp	.+4      	; 0x526 <GPIO_readPin+0x10e>
 522:	55 95       	asr	r21
 524:	47 95       	ror	r20
 526:	8a 95       	dec	r24
 528:	e2 f7       	brpl	.-8      	; 0x522 <GPIO_readPin+0x10a>
 52a:	ca 01       	movw	r24, r20
 52c:	81 70       	andi	r24, 0x01	; 1
 52e:	90 70       	andi	r25, 0x00	; 0
 530:	88 23       	and	r24, r24
 532:	19 f0       	breq	.+6      	; 0x53a <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	89 83       	std	Y+1, r24	; 0x01
 538:	01 c0       	rjmp	.+2      	; 0x53c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 53a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
 53c:	89 81       	ldd	r24, Y+1	; 0x01
}
 53e:	0f 90       	pop	r0
 540:	0f 90       	pop	r0
 542:	0f 90       	pop	r0
 544:	0f 90       	pop	r0
 546:	0f 90       	pop	r0
 548:	cf 91       	pop	r28
 54a:	df 91       	pop	r29
 54c:	08 95       	ret

0000054e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
 54e:	df 93       	push	r29
 550:	cf 93       	push	r28
 552:	00 d0       	rcall	.+0      	; 0x554 <GPIO_setupPortDirection+0x6>
 554:	00 d0       	rcall	.+0      	; 0x556 <GPIO_setupPortDirection+0x8>
 556:	cd b7       	in	r28, 0x3d	; 61
 558:	de b7       	in	r29, 0x3e	; 62
 55a:	89 83       	std	Y+1, r24	; 0x01
 55c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
 55e:	89 81       	ldd	r24, Y+1	; 0x01
 560:	84 30       	cpi	r24, 0x04	; 4
 562:	90 f5       	brcc	.+100    	; 0x5c8 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
 564:	89 81       	ldd	r24, Y+1	; 0x01
 566:	28 2f       	mov	r18, r24
 568:	30 e0       	ldi	r19, 0x00	; 0
 56a:	3c 83       	std	Y+4, r19	; 0x04
 56c:	2b 83       	std	Y+3, r18	; 0x03
 56e:	8b 81       	ldd	r24, Y+3	; 0x03
 570:	9c 81       	ldd	r25, Y+4	; 0x04
 572:	81 30       	cpi	r24, 0x01	; 1
 574:	91 05       	cpc	r25, r1
 576:	d1 f0       	breq	.+52     	; 0x5ac <GPIO_setupPortDirection+0x5e>
 578:	2b 81       	ldd	r18, Y+3	; 0x03
 57a:	3c 81       	ldd	r19, Y+4	; 0x04
 57c:	22 30       	cpi	r18, 0x02	; 2
 57e:	31 05       	cpc	r19, r1
 580:	2c f4       	brge	.+10     	; 0x58c <GPIO_setupPortDirection+0x3e>
 582:	8b 81       	ldd	r24, Y+3	; 0x03
 584:	9c 81       	ldd	r25, Y+4	; 0x04
 586:	00 97       	sbiw	r24, 0x00	; 0
 588:	61 f0       	breq	.+24     	; 0x5a2 <GPIO_setupPortDirection+0x54>
 58a:	1e c0       	rjmp	.+60     	; 0x5c8 <GPIO_setupPortDirection+0x7a>
 58c:	2b 81       	ldd	r18, Y+3	; 0x03
 58e:	3c 81       	ldd	r19, Y+4	; 0x04
 590:	22 30       	cpi	r18, 0x02	; 2
 592:	31 05       	cpc	r19, r1
 594:	81 f0       	breq	.+32     	; 0x5b6 <GPIO_setupPortDirection+0x68>
 596:	8b 81       	ldd	r24, Y+3	; 0x03
 598:	9c 81       	ldd	r25, Y+4	; 0x04
 59a:	83 30       	cpi	r24, 0x03	; 3
 59c:	91 05       	cpc	r25, r1
 59e:	81 f0       	breq	.+32     	; 0x5c0 <GPIO_setupPortDirection+0x72>
 5a0:	13 c0       	rjmp	.+38     	; 0x5c8 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
 5a2:	ea e3       	ldi	r30, 0x3A	; 58
 5a4:	f0 e0       	ldi	r31, 0x00	; 0
 5a6:	8a 81       	ldd	r24, Y+2	; 0x02
 5a8:	80 83       	st	Z, r24
 5aa:	0e c0       	rjmp	.+28     	; 0x5c8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
 5ac:	e7 e3       	ldi	r30, 0x37	; 55
 5ae:	f0 e0       	ldi	r31, 0x00	; 0
 5b0:	8a 81       	ldd	r24, Y+2	; 0x02
 5b2:	80 83       	st	Z, r24
 5b4:	09 c0       	rjmp	.+18     	; 0x5c8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
 5b6:	e4 e3       	ldi	r30, 0x34	; 52
 5b8:	f0 e0       	ldi	r31, 0x00	; 0
 5ba:	8a 81       	ldd	r24, Y+2	; 0x02
 5bc:	80 83       	st	Z, r24
 5be:	04 c0       	rjmp	.+8      	; 0x5c8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
 5c0:	e1 e3       	ldi	r30, 0x31	; 49
 5c2:	f0 e0       	ldi	r31, 0x00	; 0
 5c4:	8a 81       	ldd	r24, Y+2	; 0x02
 5c6:	80 83       	st	Z, r24
			break;
		}
	}
}
 5c8:	0f 90       	pop	r0
 5ca:	0f 90       	pop	r0
 5cc:	0f 90       	pop	r0
 5ce:	0f 90       	pop	r0
 5d0:	cf 91       	pop	r28
 5d2:	df 91       	pop	r29
 5d4:	08 95       	ret

000005d6 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
 5d6:	df 93       	push	r29
 5d8:	cf 93       	push	r28
 5da:	00 d0       	rcall	.+0      	; 0x5dc <GPIO_writePort+0x6>
 5dc:	00 d0       	rcall	.+0      	; 0x5de <GPIO_writePort+0x8>
 5de:	cd b7       	in	r28, 0x3d	; 61
 5e0:	de b7       	in	r29, 0x3e	; 62
 5e2:	89 83       	std	Y+1, r24	; 0x01
 5e4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
 5e6:	89 81       	ldd	r24, Y+1	; 0x01
 5e8:	84 30       	cpi	r24, 0x04	; 4
 5ea:	90 f5       	brcc	.+100    	; 0x650 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
 5ec:	89 81       	ldd	r24, Y+1	; 0x01
 5ee:	28 2f       	mov	r18, r24
 5f0:	30 e0       	ldi	r19, 0x00	; 0
 5f2:	3c 83       	std	Y+4, r19	; 0x04
 5f4:	2b 83       	std	Y+3, r18	; 0x03
 5f6:	8b 81       	ldd	r24, Y+3	; 0x03
 5f8:	9c 81       	ldd	r25, Y+4	; 0x04
 5fa:	81 30       	cpi	r24, 0x01	; 1
 5fc:	91 05       	cpc	r25, r1
 5fe:	d1 f0       	breq	.+52     	; 0x634 <GPIO_writePort+0x5e>
 600:	2b 81       	ldd	r18, Y+3	; 0x03
 602:	3c 81       	ldd	r19, Y+4	; 0x04
 604:	22 30       	cpi	r18, 0x02	; 2
 606:	31 05       	cpc	r19, r1
 608:	2c f4       	brge	.+10     	; 0x614 <GPIO_writePort+0x3e>
 60a:	8b 81       	ldd	r24, Y+3	; 0x03
 60c:	9c 81       	ldd	r25, Y+4	; 0x04
 60e:	00 97       	sbiw	r24, 0x00	; 0
 610:	61 f0       	breq	.+24     	; 0x62a <GPIO_writePort+0x54>
 612:	1e c0       	rjmp	.+60     	; 0x650 <GPIO_writePort+0x7a>
 614:	2b 81       	ldd	r18, Y+3	; 0x03
 616:	3c 81       	ldd	r19, Y+4	; 0x04
 618:	22 30       	cpi	r18, 0x02	; 2
 61a:	31 05       	cpc	r19, r1
 61c:	81 f0       	breq	.+32     	; 0x63e <GPIO_writePort+0x68>
 61e:	8b 81       	ldd	r24, Y+3	; 0x03
 620:	9c 81       	ldd	r25, Y+4	; 0x04
 622:	83 30       	cpi	r24, 0x03	; 3
 624:	91 05       	cpc	r25, r1
 626:	81 f0       	breq	.+32     	; 0x648 <GPIO_writePort+0x72>
 628:	13 c0       	rjmp	.+38     	; 0x650 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
 62a:	eb e3       	ldi	r30, 0x3B	; 59
 62c:	f0 e0       	ldi	r31, 0x00	; 0
 62e:	8a 81       	ldd	r24, Y+2	; 0x02
 630:	80 83       	st	Z, r24
 632:	0e c0       	rjmp	.+28     	; 0x650 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
 634:	e8 e3       	ldi	r30, 0x38	; 56
 636:	f0 e0       	ldi	r31, 0x00	; 0
 638:	8a 81       	ldd	r24, Y+2	; 0x02
 63a:	80 83       	st	Z, r24
 63c:	09 c0       	rjmp	.+18     	; 0x650 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
 63e:	e5 e3       	ldi	r30, 0x35	; 53
 640:	f0 e0       	ldi	r31, 0x00	; 0
 642:	8a 81       	ldd	r24, Y+2	; 0x02
 644:	80 83       	st	Z, r24
 646:	04 c0       	rjmp	.+8      	; 0x650 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
 648:	e2 e3       	ldi	r30, 0x32	; 50
 64a:	f0 e0       	ldi	r31, 0x00	; 0
 64c:	8a 81       	ldd	r24, Y+2	; 0x02
 64e:	80 83       	st	Z, r24
			break;
		}
	}
}
 650:	0f 90       	pop	r0
 652:	0f 90       	pop	r0
 654:	0f 90       	pop	r0
 656:	0f 90       	pop	r0
 658:	cf 91       	pop	r28
 65a:	df 91       	pop	r29
 65c:	08 95       	ret

0000065e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
 65e:	df 93       	push	r29
 660:	cf 93       	push	r28
 662:	00 d0       	rcall	.+0      	; 0x664 <GPIO_readPort+0x6>
 664:	00 d0       	rcall	.+0      	; 0x666 <GPIO_readPort+0x8>
 666:	cd b7       	in	r28, 0x3d	; 61
 668:	de b7       	in	r29, 0x3e	; 62
 66a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
 66c:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
 66e:	8a 81       	ldd	r24, Y+2	; 0x02
 670:	84 30       	cpi	r24, 0x04	; 4
 672:	90 f5       	brcc	.+100    	; 0x6d8 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
 674:	8a 81       	ldd	r24, Y+2	; 0x02
 676:	28 2f       	mov	r18, r24
 678:	30 e0       	ldi	r19, 0x00	; 0
 67a:	3c 83       	std	Y+4, r19	; 0x04
 67c:	2b 83       	std	Y+3, r18	; 0x03
 67e:	8b 81       	ldd	r24, Y+3	; 0x03
 680:	9c 81       	ldd	r25, Y+4	; 0x04
 682:	81 30       	cpi	r24, 0x01	; 1
 684:	91 05       	cpc	r25, r1
 686:	d1 f0       	breq	.+52     	; 0x6bc <GPIO_readPort+0x5e>
 688:	2b 81       	ldd	r18, Y+3	; 0x03
 68a:	3c 81       	ldd	r19, Y+4	; 0x04
 68c:	22 30       	cpi	r18, 0x02	; 2
 68e:	31 05       	cpc	r19, r1
 690:	2c f4       	brge	.+10     	; 0x69c <GPIO_readPort+0x3e>
 692:	8b 81       	ldd	r24, Y+3	; 0x03
 694:	9c 81       	ldd	r25, Y+4	; 0x04
 696:	00 97       	sbiw	r24, 0x00	; 0
 698:	61 f0       	breq	.+24     	; 0x6b2 <GPIO_readPort+0x54>
 69a:	1e c0       	rjmp	.+60     	; 0x6d8 <GPIO_readPort+0x7a>
 69c:	2b 81       	ldd	r18, Y+3	; 0x03
 69e:	3c 81       	ldd	r19, Y+4	; 0x04
 6a0:	22 30       	cpi	r18, 0x02	; 2
 6a2:	31 05       	cpc	r19, r1
 6a4:	81 f0       	breq	.+32     	; 0x6c6 <GPIO_readPort+0x68>
 6a6:	8b 81       	ldd	r24, Y+3	; 0x03
 6a8:	9c 81       	ldd	r25, Y+4	; 0x04
 6aa:	83 30       	cpi	r24, 0x03	; 3
 6ac:	91 05       	cpc	r25, r1
 6ae:	81 f0       	breq	.+32     	; 0x6d0 <GPIO_readPort+0x72>
 6b0:	13 c0       	rjmp	.+38     	; 0x6d8 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
 6b2:	e9 e3       	ldi	r30, 0x39	; 57
 6b4:	f0 e0       	ldi	r31, 0x00	; 0
 6b6:	80 81       	ld	r24, Z
 6b8:	89 83       	std	Y+1, r24	; 0x01
 6ba:	0e c0       	rjmp	.+28     	; 0x6d8 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
 6bc:	e6 e3       	ldi	r30, 0x36	; 54
 6be:	f0 e0       	ldi	r31, 0x00	; 0
 6c0:	80 81       	ld	r24, Z
 6c2:	89 83       	std	Y+1, r24	; 0x01
 6c4:	09 c0       	rjmp	.+18     	; 0x6d8 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
 6c6:	e3 e3       	ldi	r30, 0x33	; 51
 6c8:	f0 e0       	ldi	r31, 0x00	; 0
 6ca:	80 81       	ld	r24, Z
 6cc:	89 83       	std	Y+1, r24	; 0x01
 6ce:	04 c0       	rjmp	.+8      	; 0x6d8 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
 6d0:	e0 e3       	ldi	r30, 0x30	; 48
 6d2:	f0 e0       	ldi	r31, 0x00	; 0
 6d4:	80 81       	ld	r24, Z
 6d6:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
 6d8:	89 81       	ldd	r24, Y+1	; 0x01
}
 6da:	0f 90       	pop	r0
 6dc:	0f 90       	pop	r0
 6de:	0f 90       	pop	r0
 6e0:	0f 90       	pop	r0
 6e2:	cf 91       	pop	r28
 6e4:	df 91       	pop	r29
 6e6:	08 95       	ret

000006e8 <TWI_init>:
 ============================================================================
 */
#include"./INC/twi.h"
#include"avr/io.h"
#include"../LIBRARIES/common_macros.h"
void TWI_init(const TWI_Config *config) {
 6e8:	df 93       	push	r29
 6ea:	cf 93       	push	r28
 6ec:	00 d0       	rcall	.+0      	; 0x6ee <TWI_init+0x6>
 6ee:	cd b7       	in	r28, 0x3d	; 61
 6f0:	de b7       	in	r29, 0x3e	; 62
 6f2:	9a 83       	std	Y+2, r25	; 0x02
 6f4:	89 83       	std	Y+1, r24	; 0x01
	TWBR = config->SCKFactor;
 6f6:	a0 e2       	ldi	r26, 0x20	; 32
 6f8:	b0 e0       	ldi	r27, 0x00	; 0
 6fa:	e9 81       	ldd	r30, Y+1	; 0x01
 6fc:	fa 81       	ldd	r31, Y+2	; 0x02
 6fe:	82 81       	ldd	r24, Z+2	; 0x02
 700:	8c 93       	st	X, r24
	TWSR = config->twiPrescalar;
 702:	a1 e2       	ldi	r26, 0x21	; 33
 704:	b0 e0       	ldi	r27, 0x00	; 0
 706:	e9 81       	ldd	r30, Y+1	; 0x01
 708:	fa 81       	ldd	r31, Y+2	; 0x02
 70a:	80 81       	ld	r24, Z
 70c:	8c 93       	st	X, r24
	TWAR = config->slaveAddress << 1;
 70e:	a2 e2       	ldi	r26, 0x22	; 34
 710:	b0 e0       	ldi	r27, 0x00	; 0
 712:	e9 81       	ldd	r30, Y+1	; 0x01
 714:	fa 81       	ldd	r31, Y+2	; 0x02
 716:	81 81       	ldd	r24, Z+1	; 0x01
 718:	88 0f       	add	r24, r24
 71a:	8c 93       	st	X, r24
	SET_BIT(TWCR, TWEN);
 71c:	a6 e5       	ldi	r26, 0x56	; 86
 71e:	b0 e0       	ldi	r27, 0x00	; 0
 720:	e6 e5       	ldi	r30, 0x56	; 86
 722:	f0 e0       	ldi	r31, 0x00	; 0
 724:	80 81       	ld	r24, Z
 726:	84 60       	ori	r24, 0x04	; 4
 728:	8c 93       	st	X, r24
}
 72a:	0f 90       	pop	r0
 72c:	0f 90       	pop	r0
 72e:	cf 91       	pop	r28
 730:	df 91       	pop	r29
 732:	08 95       	ret

00000734 <TWI_start>:
void TWI_start(void) {
 734:	df 93       	push	r29
 736:	cf 93       	push	r28
 738:	cd b7       	in	r28, 0x3d	; 61
 73a:	de b7       	in	r29, 0x3e	; 62
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
 73c:	e6 e5       	ldi	r30, 0x56	; 86
 73e:	f0 e0       	ldi	r31, 0x00	; 0
 740:	84 ea       	ldi	r24, 0xA4	; 164
 742:	80 83       	st	Z, r24
    while(BIT_IS_CLEAR(TWCR,TWINT));
 744:	e6 e5       	ldi	r30, 0x56	; 86
 746:	f0 e0       	ldi	r31, 0x00	; 0
 748:	80 81       	ld	r24, Z
 74a:	88 23       	and	r24, r24
 74c:	dc f7       	brge	.-10     	; 0x744 <TWI_start+0x10>
}
 74e:	cf 91       	pop	r28
 750:	df 91       	pop	r29
 752:	08 95       	ret

00000754 <TWI_stop>:
void TWI_stop(void) {
 754:	df 93       	push	r29
 756:	cf 93       	push	r28
 758:	cd b7       	in	r28, 0x3d	; 61
 75a:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
 75c:	e6 e5       	ldi	r30, 0x56	; 86
 75e:	f0 e0       	ldi	r31, 0x00	; 0
 760:	84 e9       	ldi	r24, 0x94	; 148
 762:	80 83       	st	Z, r24
	// no need for polling to leave the bus
}
 764:	cf 91       	pop	r28
 766:	df 91       	pop	r29
 768:	08 95       	ret

0000076a <TWI_writeByte>:
void TWI_writeByte(uint8 data) {
 76a:	df 93       	push	r29
 76c:	cf 93       	push	r28
 76e:	0f 92       	push	r0
 770:	cd b7       	in	r28, 0x3d	; 61
 772:	de b7       	in	r29, 0x3e	; 62
 774:	89 83       	std	Y+1, r24	; 0x01
	TWDR = data;
 776:	e3 e2       	ldi	r30, 0x23	; 35
 778:	f0 e0       	ldi	r31, 0x00	; 0
 77a:	89 81       	ldd	r24, Y+1	; 0x01
 77c:	80 83       	st	Z, r24
	TWCR = (1 << TWINT) | (1 << TWEN);
 77e:	e6 e5       	ldi	r30, 0x56	; 86
 780:	f0 e0       	ldi	r31, 0x00	; 0
 782:	84 e8       	ldi	r24, 0x84	; 132
 784:	80 83       	st	Z, r24
	while (BIT_IS_CLEAR(TWCR, TWINT))
 786:	e6 e5       	ldi	r30, 0x56	; 86
 788:	f0 e0       	ldi	r31, 0x00	; 0
 78a:	80 81       	ld	r24, Z
 78c:	88 23       	and	r24, r24
 78e:	dc f7       	brge	.-10     	; 0x786 <TWI_writeByte+0x1c>
		;
}
 790:	0f 90       	pop	r0
 792:	cf 91       	pop	r28
 794:	df 91       	pop	r29
 796:	08 95       	ret

00000798 <TWI_readByteWithACK>:
uint8 TWI_readByteWithACK(void) {
 798:	df 93       	push	r29
 79a:	cf 93       	push	r28
 79c:	cd b7       	in	r28, 0x3d	; 61
 79e:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
 7a0:	e6 e5       	ldi	r30, 0x56	; 86
 7a2:	f0 e0       	ldi	r31, 0x00	; 0
 7a4:	84 ec       	ldi	r24, 0xC4	; 196
 7a6:	80 83       	st	Z, r24
	while (BIT_IS_CLEAR(TWCR, TWINT))
 7a8:	e6 e5       	ldi	r30, 0x56	; 86
 7aa:	f0 e0       	ldi	r31, 0x00	; 0
 7ac:	80 81       	ld	r24, Z
 7ae:	88 23       	and	r24, r24
 7b0:	dc f7       	brge	.-10     	; 0x7a8 <TWI_readByteWithACK+0x10>
		;
	return TWDR;
 7b2:	e3 e2       	ldi	r30, 0x23	; 35
 7b4:	f0 e0       	ldi	r31, 0x00	; 0
 7b6:	80 81       	ld	r24, Z
}
 7b8:	cf 91       	pop	r28
 7ba:	df 91       	pop	r29
 7bc:	08 95       	ret

000007be <TWI_readByteWithNACK>:
uint8 TWI_readByteWithNACK(void) {
 7be:	df 93       	push	r29
 7c0:	cf 93       	push	r28
 7c2:	cd b7       	in	r28, 0x3d	; 61
 7c4:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWINT) | (1 << TWEN);
 7c6:	e6 e5       	ldi	r30, 0x56	; 86
 7c8:	f0 e0       	ldi	r31, 0x00	; 0
 7ca:	84 e8       	ldi	r24, 0x84	; 132
 7cc:	80 83       	st	Z, r24
	while (BIT_IS_CLEAR(TWCR, TWINT))
 7ce:	e6 e5       	ldi	r30, 0x56	; 86
 7d0:	f0 e0       	ldi	r31, 0x00	; 0
 7d2:	80 81       	ld	r24, Z
 7d4:	88 23       	and	r24, r24
 7d6:	dc f7       	brge	.-10     	; 0x7ce <TWI_readByteWithNACK+0x10>
		;
	return TWDR;
 7d8:	e3 e2       	ldi	r30, 0x23	; 35
 7da:	f0 e0       	ldi	r31, 0x00	; 0
 7dc:	80 81       	ld	r24, Z
}
 7de:	cf 91       	pop	r28
 7e0:	df 91       	pop	r29
 7e2:	08 95       	ret

000007e4 <TWI_getStatus>:
uint8 TWI_getStatus(void) {
 7e4:	df 93       	push	r29
 7e6:	cf 93       	push	r28
 7e8:	0f 92       	push	r0
 7ea:	cd b7       	in	r28, 0x3d	; 61
 7ec:	de b7       	in	r29, 0x3e	; 62
	uint8 status = TWSR & 0xF8;
 7ee:	e1 e2       	ldi	r30, 0x21	; 33
 7f0:	f0 e0       	ldi	r31, 0x00	; 0
 7f2:	80 81       	ld	r24, Z
 7f4:	88 7f       	andi	r24, 0xF8	; 248
 7f6:	89 83       	std	Y+1, r24	; 0x01
	return status;
 7f8:	89 81       	ldd	r24, Y+1	; 0x01
}
 7fa:	0f 90       	pop	r0
 7fc:	cf 91       	pop	r28
 7fe:	df 91       	pop	r29
 800:	08 95       	ret

00000802 <USART_init>:
 * Functional responsible for Initialize the UART device by:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void USART_init(USART_ConfigType *config) {
 802:	df 93       	push	r29
 804:	cf 93       	push	r28
 806:	00 d0       	rcall	.+0      	; 0x808 <USART_init+0x6>
 808:	00 d0       	rcall	.+0      	; 0x80a <USART_init+0x8>
 80a:	00 d0       	rcall	.+0      	; 0x80c <USART_init+0xa>
 80c:	cd b7       	in	r28, 0x3d	; 61
 80e:	de b7       	in	r29, 0x3e	; 62
 810:	9c 83       	std	Y+4, r25	; 0x04
 812:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
 814:	1a 82       	std	Y+2, r1	; 0x02
 816:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(UCSRA, U2X);
 818:	ab e2       	ldi	r26, 0x2B	; 43
 81a:	b0 e0       	ldi	r27, 0x00	; 0
 81c:	eb e2       	ldi	r30, 0x2B	; 43
 81e:	f0 e0       	ldi	r31, 0x00	; 0
 820:	80 81       	ld	r24, Z
 822:	82 60       	ori	r24, 0x02	; 2
 824:	8c 93       	st	X, r24
	SET_BIT(UCSRB, RXEN);
 826:	aa e2       	ldi	r26, 0x2A	; 42
 828:	b0 e0       	ldi	r27, 0x00	; 0
 82a:	ea e2       	ldi	r30, 0x2A	; 42
 82c:	f0 e0       	ldi	r31, 0x00	; 0
 82e:	80 81       	ld	r24, Z
 830:	80 61       	ori	r24, 0x10	; 16
 832:	8c 93       	st	X, r24
	SET_BIT(UCSRB, TXEN);
 834:	aa e2       	ldi	r26, 0x2A	; 42
 836:	b0 e0       	ldi	r27, 0x00	; 0
 838:	ea e2       	ldi	r30, 0x2A	; 42
 83a:	f0 e0       	ldi	r31, 0x00	; 0
 83c:	80 81       	ld	r24, Z
 83e:	88 60       	ori	r24, 0x08	; 8
 840:	8c 93       	st	X, r24
	ubrr_value = (uint16) ((F_CPU / (config->Baud_Rate * 8UL)) - 1);
 842:	eb 81       	ldd	r30, Y+3	; 0x03
 844:	fc 81       	ldd	r31, Y+4	; 0x04
 846:	83 81       	ldd	r24, Z+3	; 0x03
 848:	94 81       	ldd	r25, Z+4	; 0x04
 84a:	cc 01       	movw	r24, r24
 84c:	a0 e0       	ldi	r26, 0x00	; 0
 84e:	b0 e0       	ldi	r27, 0x00	; 0
 850:	88 0f       	add	r24, r24
 852:	99 1f       	adc	r25, r25
 854:	aa 1f       	adc	r26, r26
 856:	bb 1f       	adc	r27, r27
 858:	88 0f       	add	r24, r24
 85a:	99 1f       	adc	r25, r25
 85c:	aa 1f       	adc	r26, r26
 85e:	bb 1f       	adc	r27, r27
 860:	88 0f       	add	r24, r24
 862:	99 1f       	adc	r25, r25
 864:	aa 1f       	adc	r26, r26
 866:	bb 1f       	adc	r27, r27
 868:	9c 01       	movw	r18, r24
 86a:	ad 01       	movw	r20, r26
 86c:	80 e0       	ldi	r24, 0x00	; 0
 86e:	92 e1       	ldi	r25, 0x12	; 18
 870:	aa e7       	ldi	r26, 0x7A	; 122
 872:	b0 e0       	ldi	r27, 0x00	; 0
 874:	bc 01       	movw	r22, r24
 876:	cd 01       	movw	r24, r26
 878:	0e 94 c8 06 	call	0xd90	; 0xd90 <__udivmodsi4>
 87c:	da 01       	movw	r26, r20
 87e:	c9 01       	movw	r24, r18
 880:	01 97       	sbiw	r24, 0x01	; 1
 882:	9a 83       	std	Y+2, r25	; 0x02
 884:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = ubrr_value >> 8;
 886:	e0 e4       	ldi	r30, 0x40	; 64
 888:	f0 e0       	ldi	r31, 0x00	; 0
 88a:	89 81       	ldd	r24, Y+1	; 0x01
 88c:	9a 81       	ldd	r25, Y+2	; 0x02
 88e:	89 2f       	mov	r24, r25
 890:	99 27       	eor	r25, r25
 892:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
 894:	e9 e2       	ldi	r30, 0x29	; 41
 896:	f0 e0       	ldi	r31, 0x00	; 0
 898:	89 81       	ldd	r24, Y+1	; 0x01
 89a:	80 83       	st	Z, r24
	SET_BIT(UCSRC, URSEL);
 89c:	a0 e4       	ldi	r26, 0x40	; 64
 89e:	b0 e0       	ldi	r27, 0x00	; 0
 8a0:	e0 e4       	ldi	r30, 0x40	; 64
 8a2:	f0 e0       	ldi	r31, 0x00	; 0
 8a4:	80 81       	ld	r24, Z
 8a6:	80 68       	ori	r24, 0x80	; 128
 8a8:	8c 93       	st	X, r24
	switch (config->Character_Size) {
 8aa:	eb 81       	ldd	r30, Y+3	; 0x03
 8ac:	fc 81       	ldd	r31, Y+4	; 0x04
 8ae:	82 81       	ldd	r24, Z+2	; 0x02
 8b0:	28 2f       	mov	r18, r24
 8b2:	30 e0       	ldi	r19, 0x00	; 0
 8b4:	3e 83       	std	Y+6, r19	; 0x06
 8b6:	2d 83       	std	Y+5, r18	; 0x05
 8b8:	8d 81       	ldd	r24, Y+5	; 0x05
 8ba:	9e 81       	ldd	r25, Y+6	; 0x06
 8bc:	87 30       	cpi	r24, 0x07	; 7
 8be:	91 05       	cpc	r25, r1
 8c0:	09 f4       	brne	.+2      	; 0x8c4 <__stack+0x65>
 8c2:	49 c0       	rjmp	.+146    	; 0x956 <__stack+0xf7>
 8c4:	2d 81       	ldd	r18, Y+5	; 0x05
 8c6:	3e 81       	ldd	r19, Y+6	; 0x06
 8c8:	28 30       	cpi	r18, 0x08	; 8
 8ca:	31 05       	cpc	r19, r1
 8cc:	5c f4       	brge	.+22     	; 0x8e4 <__stack+0x85>
 8ce:	8d 81       	ldd	r24, Y+5	; 0x05
 8d0:	9e 81       	ldd	r25, Y+6	; 0x06
 8d2:	85 30       	cpi	r24, 0x05	; 5
 8d4:	91 05       	cpc	r25, r1
 8d6:	99 f0       	breq	.+38     	; 0x8fe <__stack+0x9f>
 8d8:	2d 81       	ldd	r18, Y+5	; 0x05
 8da:	3e 81       	ldd	r19, Y+6	; 0x06
 8dc:	26 30       	cpi	r18, 0x06	; 6
 8de:	31 05       	cpc	r19, r1
 8e0:	21 f1       	breq	.+72     	; 0x92a <__stack+0xcb>
 8e2:	7a c0       	rjmp	.+244    	; 0x9d8 <__stack+0x179>
 8e4:	8d 81       	ldd	r24, Y+5	; 0x05
 8e6:	9e 81       	ldd	r25, Y+6	; 0x06
 8e8:	88 30       	cpi	r24, 0x08	; 8
 8ea:	91 05       	cpc	r25, r1
 8ec:	09 f4       	brne	.+2      	; 0x8f0 <__stack+0x91>
 8ee:	49 c0       	rjmp	.+146    	; 0x982 <__stack+0x123>
 8f0:	2d 81       	ldd	r18, Y+5	; 0x05
 8f2:	3e 81       	ldd	r19, Y+6	; 0x06
 8f4:	29 30       	cpi	r18, 0x09	; 9
 8f6:	31 05       	cpc	r19, r1
 8f8:	09 f4       	brne	.+2      	; 0x8fc <__stack+0x9d>
 8fa:	59 c0       	rjmp	.+178    	; 0x9ae <__stack+0x14f>
 8fc:	6d c0       	rjmp	.+218    	; 0x9d8 <__stack+0x179>
	case 5:
		CLEAR_BIT(UCSRC, UCSZ0);
 8fe:	a0 e4       	ldi	r26, 0x40	; 64
 900:	b0 e0       	ldi	r27, 0x00	; 0
 902:	e0 e4       	ldi	r30, 0x40	; 64
 904:	f0 e0       	ldi	r31, 0x00	; 0
 906:	80 81       	ld	r24, Z
 908:	8d 7f       	andi	r24, 0xFD	; 253
 90a:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC, UCSZ1);
 90c:	a0 e4       	ldi	r26, 0x40	; 64
 90e:	b0 e0       	ldi	r27, 0x00	; 0
 910:	e0 e4       	ldi	r30, 0x40	; 64
 912:	f0 e0       	ldi	r31, 0x00	; 0
 914:	80 81       	ld	r24, Z
 916:	8b 7f       	andi	r24, 0xFB	; 251
 918:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRB, UCSZ2);
 91a:	aa e2       	ldi	r26, 0x2A	; 42
 91c:	b0 e0       	ldi	r27, 0x00	; 0
 91e:	ea e2       	ldi	r30, 0x2A	; 42
 920:	f0 e0       	ldi	r31, 0x00	; 0
 922:	80 81       	ld	r24, Z
 924:	8b 7f       	andi	r24, 0xFB	; 251
 926:	8c 93       	st	X, r24
 928:	57 c0       	rjmp	.+174    	; 0x9d8 <__stack+0x179>
		break;
	case 6:
		SET_BIT(UCSRC, UCSZ0);
 92a:	a0 e4       	ldi	r26, 0x40	; 64
 92c:	b0 e0       	ldi	r27, 0x00	; 0
 92e:	e0 e4       	ldi	r30, 0x40	; 64
 930:	f0 e0       	ldi	r31, 0x00	; 0
 932:	80 81       	ld	r24, Z
 934:	82 60       	ori	r24, 0x02	; 2
 936:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC, UCSZ1);
 938:	a0 e4       	ldi	r26, 0x40	; 64
 93a:	b0 e0       	ldi	r27, 0x00	; 0
 93c:	e0 e4       	ldi	r30, 0x40	; 64
 93e:	f0 e0       	ldi	r31, 0x00	; 0
 940:	80 81       	ld	r24, Z
 942:	8b 7f       	andi	r24, 0xFB	; 251
 944:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRB, UCSZ2);
 946:	aa e2       	ldi	r26, 0x2A	; 42
 948:	b0 e0       	ldi	r27, 0x00	; 0
 94a:	ea e2       	ldi	r30, 0x2A	; 42
 94c:	f0 e0       	ldi	r31, 0x00	; 0
 94e:	80 81       	ld	r24, Z
 950:	8b 7f       	andi	r24, 0xFB	; 251
 952:	8c 93       	st	X, r24
 954:	41 c0       	rjmp	.+130    	; 0x9d8 <__stack+0x179>
		break;
	case 7:
		CLEAR_BIT(UCSRC, UCSZ0);
 956:	a0 e4       	ldi	r26, 0x40	; 64
 958:	b0 e0       	ldi	r27, 0x00	; 0
 95a:	e0 e4       	ldi	r30, 0x40	; 64
 95c:	f0 e0       	ldi	r31, 0x00	; 0
 95e:	80 81       	ld	r24, Z
 960:	8d 7f       	andi	r24, 0xFD	; 253
 962:	8c 93       	st	X, r24
		SET_BIT(UCSRC, UCSZ1);
 964:	a0 e4       	ldi	r26, 0x40	; 64
 966:	b0 e0       	ldi	r27, 0x00	; 0
 968:	e0 e4       	ldi	r30, 0x40	; 64
 96a:	f0 e0       	ldi	r31, 0x00	; 0
 96c:	80 81       	ld	r24, Z
 96e:	84 60       	ori	r24, 0x04	; 4
 970:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRB, UCSZ2);
 972:	aa e2       	ldi	r26, 0x2A	; 42
 974:	b0 e0       	ldi	r27, 0x00	; 0
 976:	ea e2       	ldi	r30, 0x2A	; 42
 978:	f0 e0       	ldi	r31, 0x00	; 0
 97a:	80 81       	ld	r24, Z
 97c:	8b 7f       	andi	r24, 0xFB	; 251
 97e:	8c 93       	st	X, r24
 980:	2b c0       	rjmp	.+86     	; 0x9d8 <__stack+0x179>
		break;
	case 8:
		SET_BIT(UCSRC, UCSZ0);
 982:	a0 e4       	ldi	r26, 0x40	; 64
 984:	b0 e0       	ldi	r27, 0x00	; 0
 986:	e0 e4       	ldi	r30, 0x40	; 64
 988:	f0 e0       	ldi	r31, 0x00	; 0
 98a:	80 81       	ld	r24, Z
 98c:	82 60       	ori	r24, 0x02	; 2
 98e:	8c 93       	st	X, r24
		SET_BIT(UCSRC, UCSZ1);
 990:	a0 e4       	ldi	r26, 0x40	; 64
 992:	b0 e0       	ldi	r27, 0x00	; 0
 994:	e0 e4       	ldi	r30, 0x40	; 64
 996:	f0 e0       	ldi	r31, 0x00	; 0
 998:	80 81       	ld	r24, Z
 99a:	84 60       	ori	r24, 0x04	; 4
 99c:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRB, UCSZ2);
 99e:	aa e2       	ldi	r26, 0x2A	; 42
 9a0:	b0 e0       	ldi	r27, 0x00	; 0
 9a2:	ea e2       	ldi	r30, 0x2A	; 42
 9a4:	f0 e0       	ldi	r31, 0x00	; 0
 9a6:	80 81       	ld	r24, Z
 9a8:	8b 7f       	andi	r24, 0xFB	; 251
 9aa:	8c 93       	st	X, r24
 9ac:	15 c0       	rjmp	.+42     	; 0x9d8 <__stack+0x179>
		break;
	case 9:
		SET_BIT(UCSRC, UCSZ0);
 9ae:	a0 e4       	ldi	r26, 0x40	; 64
 9b0:	b0 e0       	ldi	r27, 0x00	; 0
 9b2:	e0 e4       	ldi	r30, 0x40	; 64
 9b4:	f0 e0       	ldi	r31, 0x00	; 0
 9b6:	80 81       	ld	r24, Z
 9b8:	82 60       	ori	r24, 0x02	; 2
 9ba:	8c 93       	st	X, r24
		SET_BIT(UCSRC, UCSZ1);
 9bc:	a0 e4       	ldi	r26, 0x40	; 64
 9be:	b0 e0       	ldi	r27, 0x00	; 0
 9c0:	e0 e4       	ldi	r30, 0x40	; 64
 9c2:	f0 e0       	ldi	r31, 0x00	; 0
 9c4:	80 81       	ld	r24, Z
 9c6:	84 60       	ori	r24, 0x04	; 4
 9c8:	8c 93       	st	X, r24
		SET_BIT(UCSRB, UCSZ2);
 9ca:	aa e2       	ldi	r26, 0x2A	; 42
 9cc:	b0 e0       	ldi	r27, 0x00	; 0
 9ce:	ea e2       	ldi	r30, 0x2A	; 42
 9d0:	f0 e0       	ldi	r31, 0x00	; 0
 9d2:	80 81       	ld	r24, Z
 9d4:	84 60       	ori	r24, 0x04	; 4
 9d6:	8c 93       	st	X, r24
		break;
	}
	UCSRC = (UCSRC & 0xcf) | (config->ParityMode << 4);
 9d8:	a0 e4       	ldi	r26, 0x40	; 64
 9da:	b0 e0       	ldi	r27, 0x00	; 0
 9dc:	e0 e4       	ldi	r30, 0x40	; 64
 9de:	f0 e0       	ldi	r31, 0x00	; 0
 9e0:	80 81       	ld	r24, Z
 9e2:	28 2f       	mov	r18, r24
 9e4:	2f 7c       	andi	r18, 0xCF	; 207
 9e6:	eb 81       	ldd	r30, Y+3	; 0x03
 9e8:	fc 81       	ldd	r31, Y+4	; 0x04
 9ea:	80 81       	ld	r24, Z
 9ec:	88 2f       	mov	r24, r24
 9ee:	90 e0       	ldi	r25, 0x00	; 0
 9f0:	82 95       	swap	r24
 9f2:	92 95       	swap	r25
 9f4:	90 7f       	andi	r25, 0xF0	; 240
 9f6:	98 27       	eor	r25, r24
 9f8:	80 7f       	andi	r24, 0xF0	; 240
 9fa:	98 27       	eor	r25, r24
 9fc:	82 2b       	or	r24, r18
 9fe:	8c 93       	st	X, r24
	if (config->Stop_Select == BIT_1_STOP_SELECT) {
 a00:	eb 81       	ldd	r30, Y+3	; 0x03
 a02:	fc 81       	ldd	r31, Y+4	; 0x04
 a04:	81 81       	ldd	r24, Z+1	; 0x01
 a06:	88 23       	and	r24, r24
 a08:	41 f4       	brne	.+16     	; 0xa1a <__stack+0x1bb>
		CLEAR_BIT(UCSRC, USBS);
 a0a:	a0 e4       	ldi	r26, 0x40	; 64
 a0c:	b0 e0       	ldi	r27, 0x00	; 0
 a0e:	e0 e4       	ldi	r30, 0x40	; 64
 a10:	f0 e0       	ldi	r31, 0x00	; 0
 a12:	80 81       	ld	r24, Z
 a14:	87 7f       	andi	r24, 0xF7	; 247
 a16:	8c 93       	st	X, r24
 a18:	07 c0       	rjmp	.+14     	; 0xa28 <__stack+0x1c9>
	} else {
		SET_BIT(UCSRC, USBS);
 a1a:	a0 e4       	ldi	r26, 0x40	; 64
 a1c:	b0 e0       	ldi	r27, 0x00	; 0
 a1e:	e0 e4       	ldi	r30, 0x40	; 64
 a20:	f0 e0       	ldi	r31, 0x00	; 0
 a22:	80 81       	ld	r24, Z
 a24:	88 60       	ori	r24, 0x08	; 8
 a26:	8c 93       	st	X, r24
	}
}
 a28:	26 96       	adiw	r28, 0x06	; 6
 a2a:	0f b6       	in	r0, 0x3f	; 63
 a2c:	f8 94       	cli
 a2e:	de bf       	out	0x3e, r29	; 62
 a30:	0f be       	out	0x3f, r0	; 63
 a32:	cd bf       	out	0x3d, r28	; 61
 a34:	cf 91       	pop	r28
 a36:	df 91       	pop	r29
 a38:	08 95       	ret

00000a3a <USART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void USART_sendByte(uint8 data) {
 a3a:	df 93       	push	r29
 a3c:	cf 93       	push	r28
 a3e:	0f 92       	push	r0
 a40:	cd b7       	in	r28, 0x3d	; 61
 a42:	de b7       	in	r29, 0x3e	; 62
 a44:	89 83       	std	Y+1, r24	; 0x01
	UDR = data;
 a46:	ec e2       	ldi	r30, 0x2C	; 44
 a48:	f0 e0       	ldi	r31, 0x00	; 0
 a4a:	89 81       	ldd	r24, Y+1	; 0x01
 a4c:	80 83       	st	Z, r24
	while (BIT_IS_CLEAR(UCSRA, TXC))
 a4e:	eb e2       	ldi	r30, 0x2B	; 43
 a50:	f0 e0       	ldi	r31, 0x00	; 0
 a52:	80 81       	ld	r24, Z
 a54:	88 2f       	mov	r24, r24
 a56:	90 e0       	ldi	r25, 0x00	; 0
 a58:	80 74       	andi	r24, 0x40	; 64
 a5a:	90 70       	andi	r25, 0x00	; 0
 a5c:	00 97       	sbiw	r24, 0x00	; 0
 a5e:	b9 f3       	breq	.-18     	; 0xa4e <USART_sendByte+0x14>
		;
	SET_BIT(UCSRA, TXC);
 a60:	ab e2       	ldi	r26, 0x2B	; 43
 a62:	b0 e0       	ldi	r27, 0x00	; 0
 a64:	eb e2       	ldi	r30, 0x2B	; 43
 a66:	f0 e0       	ldi	r31, 0x00	; 0
 a68:	80 81       	ld	r24, Z
 a6a:	80 64       	ori	r24, 0x40	; 64
 a6c:	8c 93       	st	X, r24
}
 a6e:	0f 90       	pop	r0
 a70:	cf 91       	pop	r28
 a72:	df 91       	pop	r29
 a74:	08 95       	ret

00000a76 <USART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 USART_recieveByte() {
 a76:	df 93       	push	r29
 a78:	cf 93       	push	r28
 a7a:	cd b7       	in	r28, 0x3d	; 61
 a7c:	de b7       	in	r29, 0x3e	; 62
	while (BIT_IS_CLEAR(UCSRA, RXC))
 a7e:	eb e2       	ldi	r30, 0x2B	; 43
 a80:	f0 e0       	ldi	r31, 0x00	; 0
 a82:	80 81       	ld	r24, Z
 a84:	88 23       	and	r24, r24
 a86:	dc f7       	brge	.-10     	; 0xa7e <USART_recieveByte+0x8>
		;
	return UDR;
 a88:	ec e2       	ldi	r30, 0x2C	; 44
 a8a:	f0 e0       	ldi	r31, 0x00	; 0
 a8c:	80 81       	ld	r24, Z
	// it returns the data and clear the flag So U don't need to clear it
}
 a8e:	cf 91       	pop	r28
 a90:	df 91       	pop	r29
 a92:	08 95       	ret

00000a94 <USART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void USART_sendString(string s) {
 a94:	df 93       	push	r29
 a96:	cf 93       	push	r28
 a98:	00 d0       	rcall	.+0      	; 0xa9a <USART_sendString+0x6>
 a9a:	0f 92       	push	r0
 a9c:	cd b7       	in	r28, 0x3d	; 61
 a9e:	de b7       	in	r29, 0x3e	; 62
 aa0:	9b 83       	std	Y+3, r25	; 0x03
 aa2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
 aa4:	19 82       	std	Y+1, r1	; 0x01
 aa6:	0e c0       	rjmp	.+28     	; 0xac4 <USART_sendString+0x30>
	while (s[i] != '\0') {
		USART_sendByte(s[i]);
 aa8:	89 81       	ldd	r24, Y+1	; 0x01
 aaa:	28 2f       	mov	r18, r24
 aac:	30 e0       	ldi	r19, 0x00	; 0
 aae:	8a 81       	ldd	r24, Y+2	; 0x02
 ab0:	9b 81       	ldd	r25, Y+3	; 0x03
 ab2:	fc 01       	movw	r30, r24
 ab4:	e2 0f       	add	r30, r18
 ab6:	f3 1f       	adc	r31, r19
 ab8:	80 81       	ld	r24, Z
 aba:	0e 94 1d 05 	call	0xa3a	; 0xa3a <USART_sendByte>
		i++;
 abe:	89 81       	ldd	r24, Y+1	; 0x01
 ac0:	8f 5f       	subi	r24, 0xFF	; 255
 ac2:	89 83       	std	Y+1, r24	; 0x01
 * Description :
 * Send the required string through UART to the other UART device.
 */
void USART_sendString(string s) {
	uint8 i = 0;
	while (s[i] != '\0') {
 ac4:	89 81       	ldd	r24, Y+1	; 0x01
 ac6:	28 2f       	mov	r18, r24
 ac8:	30 e0       	ldi	r19, 0x00	; 0
 aca:	8a 81       	ldd	r24, Y+2	; 0x02
 acc:	9b 81       	ldd	r25, Y+3	; 0x03
 ace:	fc 01       	movw	r30, r24
 ad0:	e2 0f       	add	r30, r18
 ad2:	f3 1f       	adc	r31, r19
 ad4:	80 81       	ld	r24, Z
 ad6:	88 23       	and	r24, r24
 ad8:	39 f7       	brne	.-50     	; 0xaa8 <USART_sendString+0x14>
		USART_sendByte(s[i]);
		i++;
	}
}
 ada:	0f 90       	pop	r0
 adc:	0f 90       	pop	r0
 ade:	0f 90       	pop	r0
 ae0:	cf 91       	pop	r28
 ae2:	df 91       	pop	r29
 ae4:	08 95       	ret

00000ae6 <USART_recieveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void USART_recieveString(uint8 *Str) {
 ae6:	0f 93       	push	r16
 ae8:	1f 93       	push	r17
 aea:	df 93       	push	r29
 aec:	cf 93       	push	r28
 aee:	00 d0       	rcall	.+0      	; 0xaf0 <USART_recieveString+0xa>
 af0:	0f 92       	push	r0
 af2:	cd b7       	in	r28, 0x3d	; 61
 af4:	de b7       	in	r29, 0x3e	; 62
 af6:	9b 83       	std	Y+3, r25	; 0x03
 af8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
 afa:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = USART_recieveByte();
 afc:	89 81       	ldd	r24, Y+1	; 0x01
 afe:	28 2f       	mov	r18, r24
 b00:	30 e0       	ldi	r19, 0x00	; 0
 b02:	8a 81       	ldd	r24, Y+2	; 0x02
 b04:	9b 81       	ldd	r25, Y+3	; 0x03
 b06:	8c 01       	movw	r16, r24
 b08:	02 0f       	add	r16, r18
 b0a:	13 1f       	adc	r17, r19
 b0c:	0e 94 3b 05 	call	0xa76	; 0xa76 <USART_recieveByte>
 b10:	f8 01       	movw	r30, r16
 b12:	80 83       	st	Z, r24
 b14:	0f c0       	rjmp	.+30     	; 0xb34 <USART_recieveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
 b16:	89 81       	ldd	r24, Y+1	; 0x01
 b18:	8f 5f       	subi	r24, 0xFF	; 255
 b1a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = USART_recieveByte();
 b1c:	89 81       	ldd	r24, Y+1	; 0x01
 b1e:	28 2f       	mov	r18, r24
 b20:	30 e0       	ldi	r19, 0x00	; 0
 b22:	8a 81       	ldd	r24, Y+2	; 0x02
 b24:	9b 81       	ldd	r25, Y+3	; 0x03
 b26:	8c 01       	movw	r16, r24
 b28:	02 0f       	add	r16, r18
 b2a:	13 1f       	adc	r17, r19
 b2c:	0e 94 3b 05 	call	0xa76	; 0xa76 <USART_recieveByte>
 b30:	f8 01       	movw	r30, r16
 b32:	80 83       	st	Z, r24
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void USART_recieveString(uint8 *Str) {
	uint8 i = 0;
	Str[i] = USART_recieveByte();
	while(Str[i] != '#')
 b34:	89 81       	ldd	r24, Y+1	; 0x01
 b36:	28 2f       	mov	r18, r24
 b38:	30 e0       	ldi	r19, 0x00	; 0
 b3a:	8a 81       	ldd	r24, Y+2	; 0x02
 b3c:	9b 81       	ldd	r25, Y+3	; 0x03
 b3e:	fc 01       	movw	r30, r24
 b40:	e2 0f       	add	r30, r18
 b42:	f3 1f       	adc	r31, r19
 b44:	80 81       	ld	r24, Z
 b46:	83 32       	cpi	r24, 0x23	; 35
 b48:	31 f7       	brne	.-52     	; 0xb16 <USART_recieveString+0x30>
	{
		i++;
		Str[i] = USART_recieveByte();
	}
	Str[i] = '\0';
 b4a:	89 81       	ldd	r24, Y+1	; 0x01
 b4c:	28 2f       	mov	r18, r24
 b4e:	30 e0       	ldi	r19, 0x00	; 0
 b50:	8a 81       	ldd	r24, Y+2	; 0x02
 b52:	9b 81       	ldd	r25, Y+3	; 0x03
 b54:	fc 01       	movw	r30, r24
 b56:	e2 0f       	add	r30, r18
 b58:	f3 1f       	adc	r31, r19
 b5a:	10 82       	st	Z, r1
}
 b5c:	0f 90       	pop	r0
 b5e:	0f 90       	pop	r0
 b60:	0f 90       	pop	r0
 b62:	cf 91       	pop	r28
 b64:	df 91       	pop	r29
 b66:	1f 91       	pop	r17
 b68:	0f 91       	pop	r16
 b6a:	08 95       	ret

00000b6c <BUZZER_init>:
 *  Description: The Source File of BUZZER Driver
 ============================================================================
 */
#include"./INC/buzzer.h"
#include"../MCAL/INC/gpio.h"
void BUZZER_init() {
 b6c:	df 93       	push	r29
 b6e:	cf 93       	push	r28
 b70:	cd b7       	in	r28, 0x3d	; 61
 b72:	de b7       	in	r29, 0x3e	; 62
}
 b74:	cf 91       	pop	r28
 b76:	df 91       	pop	r29
 b78:	08 95       	ret

00000b7a <BUZZER_on>:
void BUZZER_on(void) {
 b7a:	df 93       	push	r29
 b7c:	cf 93       	push	r28
 b7e:	cd b7       	in	r28, 0x3d	; 61
 b80:	de b7       	in	r29, 0x3e	; 62

}
 b82:	cf 91       	pop	r28
 b84:	df 91       	pop	r29
 b86:	08 95       	ret

00000b88 <BUZZER_off>:
void BUZZER_off(void) {
 b88:	df 93       	push	r29
 b8a:	cf 93       	push	r28
 b8c:	cd b7       	in	r28, 0x3d	; 61
 b8e:	de b7       	in	r29, 0x3e	; 62

}
 b90:	cf 91       	pop	r28
 b92:	df 91       	pop	r29
 b94:	08 95       	ret

00000b96 <DcMotor_Init>:
 * Description :
 * setup the direction for the two
 * motor pins through the GPIO driver.
 * Stop at the DC-Motor at the beginning through the GPIO driver.
 */
void DcMotor_Init(void) {
 b96:	df 93       	push	r29
 b98:	cf 93       	push	r28
 b9a:	cd b7       	in	r28, 0x3d	; 61
 b9c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(DC_MOTOR_IN1_PORT_ID, DC_MOTOR_IN1_PIN_ID,
 b9e:	82 e0       	ldi	r24, 0x02	; 2
 ba0:	60 e0       	ldi	r22, 0x00	; 0
 ba2:	41 e0       	ldi	r20, 0x01	; 1
 ba4:	0e 94 36 00 	call	0x6c	; 0x6c <GPIO_setupPinDirection>
			PIN_OUTPUT);
	GPIO_setupPinDirection(DC_MOTOR_IN2_PORT_ID, DC_MOTOR_IN2_PIN_ID,
 ba8:	82 e0       	ldi	r24, 0x02	; 2
 baa:	61 e0       	ldi	r22, 0x01	; 1
 bac:	41 e0       	ldi	r20, 0x01	; 1
 bae:	0e 94 36 00 	call	0x6c	; 0x6c <GPIO_setupPinDirection>
			PIN_OUTPUT);
	DcMotor_Rotate(STOP, 0);
 bb2:	80 e0       	ldi	r24, 0x00	; 0
 bb4:	60 e0       	ldi	r22, 0x00	; 0
 bb6:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <DcMotor_Rotate>
}
 bba:	cf 91       	pop	r28
 bbc:	df 91       	pop	r29
 bbe:	08 95       	ret

00000bc0 <DcMotor_Rotate>:
 * rotate the DC Motor CW/ or A-CW or
 * stop the motor based on the state input state value.
 * Send the required duty cycle to the PWM driver based on the
 * required speed value.
 */
void DcMotor_Rotate(DC_MOTOR_State state, uint8 speed) {
 bc0:	df 93       	push	r29
 bc2:	cf 93       	push	r28
 bc4:	00 d0       	rcall	.+0      	; 0xbc6 <DcMotor_Rotate+0x6>
 bc6:	00 d0       	rcall	.+0      	; 0xbc8 <DcMotor_Rotate+0x8>
 bc8:	cd b7       	in	r28, 0x3d	; 61
 bca:	de b7       	in	r29, 0x3e	; 62
 bcc:	89 83       	std	Y+1, r24	; 0x01
 bce:	6a 83       	std	Y+2, r22	; 0x02
	switch (state) {
 bd0:	89 81       	ldd	r24, Y+1	; 0x01
 bd2:	28 2f       	mov	r18, r24
 bd4:	30 e0       	ldi	r19, 0x00	; 0
 bd6:	3c 83       	std	Y+4, r19	; 0x04
 bd8:	2b 83       	std	Y+3, r18	; 0x03
 bda:	8b 81       	ldd	r24, Y+3	; 0x03
 bdc:	9c 81       	ldd	r25, Y+4	; 0x04
 bde:	81 30       	cpi	r24, 0x01	; 1
 be0:	91 05       	cpc	r25, r1
 be2:	a1 f0       	breq	.+40     	; 0xc0c <DcMotor_Rotate+0x4c>
 be4:	2b 81       	ldd	r18, Y+3	; 0x03
 be6:	3c 81       	ldd	r19, Y+4	; 0x04
 be8:	22 30       	cpi	r18, 0x02	; 2
 bea:	31 05       	cpc	r19, r1
 bec:	d1 f0       	breq	.+52     	; 0xc22 <DcMotor_Rotate+0x62>
 bee:	8b 81       	ldd	r24, Y+3	; 0x03
 bf0:	9c 81       	ldd	r25, Y+4	; 0x04
 bf2:	00 97       	sbiw	r24, 0x00	; 0
 bf4:	01 f5       	brne	.+64     	; 0xc36 <DcMotor_Rotate+0x76>
	case STOP:
		GPIO_writePin(DC_MOTOR_IN1_PORT_ID, DC_MOTOR_IN1_PIN_ID, LOGIC_LOW);
 bf6:	82 e0       	ldi	r24, 0x02	; 2
 bf8:	60 e0       	ldi	r22, 0x00	; 0
 bfa:	40 e0       	ldi	r20, 0x00	; 0
 bfc:	0e 94 21 01 	call	0x242	; 0x242 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_IN2_PORT_ID, DC_MOTOR_IN2_PIN_ID, LOGIC_LOW);
 c00:	82 e0       	ldi	r24, 0x02	; 2
 c02:	61 e0       	ldi	r22, 0x01	; 1
 c04:	40 e0       	ldi	r20, 0x00	; 0
 c06:	0e 94 21 01 	call	0x242	; 0x242 <GPIO_writePin>
 c0a:	15 c0       	rjmp	.+42     	; 0xc36 <DcMotor_Rotate+0x76>
		break;
	case CW:
		GPIO_writePin(DC_MOTOR_IN1_PORT_ID, DC_MOTOR_IN1_PIN_ID, LOGIC_LOW);
 c0c:	82 e0       	ldi	r24, 0x02	; 2
 c0e:	60 e0       	ldi	r22, 0x00	; 0
 c10:	40 e0       	ldi	r20, 0x00	; 0
 c12:	0e 94 21 01 	call	0x242	; 0x242 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_IN2_PORT_ID, DC_MOTOR_IN2_PIN_ID, LOGIC_HIGH);
 c16:	82 e0       	ldi	r24, 0x02	; 2
 c18:	61 e0       	ldi	r22, 0x01	; 1
 c1a:	41 e0       	ldi	r20, 0x01	; 1
 c1c:	0e 94 21 01 	call	0x242	; 0x242 <GPIO_writePin>
 c20:	0a c0       	rjmp	.+20     	; 0xc36 <DcMotor_Rotate+0x76>
		break;
	case ACW:
		GPIO_writePin(DC_MOTOR_IN1_PORT_ID, DC_MOTOR_IN1_PIN_ID, LOGIC_HIGH);
 c22:	82 e0       	ldi	r24, 0x02	; 2
 c24:	60 e0       	ldi	r22, 0x00	; 0
 c26:	41 e0       	ldi	r20, 0x01	; 1
 c28:	0e 94 21 01 	call	0x242	; 0x242 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_IN2_PORT_ID, DC_MOTOR_IN2_PIN_ID, LOGIC_LOW);
 c2c:	82 e0       	ldi	r24, 0x02	; 2
 c2e:	61 e0       	ldi	r22, 0x01	; 1
 c30:	40 e0       	ldi	r20, 0x00	; 0
 c32:	0e 94 21 01 	call	0x242	; 0x242 <GPIO_writePin>
		break;
	}
//	Timer0_PWM_Start(speed);
}
 c36:	0f 90       	pop	r0
 c38:	0f 90       	pop	r0
 c3a:	0f 90       	pop	r0
 c3c:	0f 90       	pop	r0
 c3e:	cf 91       	pop	r28
 c40:	df 91       	pop	r29
 c42:	08 95       	ret

00000c44 <EEPROM_writeByte>:
 *  Description: The Source File of EEPROM Driver
 ============================================================================
 */
#include "./INC/external_eeprom.h"
#include "../MCAL/INC/twi.h"
uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data) {
 c44:	df 93       	push	r29
 c46:	cf 93       	push	r28
 c48:	00 d0       	rcall	.+0      	; 0xc4a <EEPROM_writeByte+0x6>
 c4a:	00 d0       	rcall	.+0      	; 0xc4c <EEPROM_writeByte+0x8>
 c4c:	cd b7       	in	r28, 0x3d	; 61
 c4e:	de b7       	in	r29, 0x3e	; 62
 c50:	9a 83       	std	Y+2, r25	; 0x02
 c52:	89 83       	std	Y+1, r24	; 0x01
 c54:	6b 83       	std	Y+3, r22	; 0x03
	TWI_start();
 c56:	0e 94 9a 03 	call	0x734	; 0x734 <TWI_start>
	if (TWI_getStatus() != TWI_START)
 c5a:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <TWI_getStatus>
 c5e:	88 30       	cpi	r24, 0x08	; 8
 c60:	11 f0       	breq	.+4      	; 0xc66 <EEPROM_writeByte+0x22>
		return ERROR;
 c62:	1c 82       	std	Y+4, r1	; 0x04
 c64:	28 c0       	rjmp	.+80     	; 0xcb6 <EEPROM_writeByte+0x72>
	TWI_writeByte((uint8) (0xA0 | ((u16addr & 0x0700) >> 7)));
 c66:	89 81       	ldd	r24, Y+1	; 0x01
 c68:	9a 81       	ldd	r25, Y+2	; 0x02
 c6a:	80 70       	andi	r24, 0x00	; 0
 c6c:	97 70       	andi	r25, 0x07	; 7
 c6e:	88 0f       	add	r24, r24
 c70:	89 2f       	mov	r24, r25
 c72:	88 1f       	adc	r24, r24
 c74:	99 0b       	sbc	r25, r25
 c76:	91 95       	neg	r25
 c78:	80 6a       	ori	r24, 0xA0	; 160
 c7a:	0e 94 b5 03 	call	0x76a	; 0x76a <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
 c7e:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <TWI_getStatus>
 c82:	88 31       	cpi	r24, 0x18	; 24
 c84:	11 f0       	breq	.+4      	; 0xc8a <EEPROM_writeByte+0x46>
		return ERROR;
 c86:	1c 82       	std	Y+4, r1	; 0x04
 c88:	16 c0       	rjmp	.+44     	; 0xcb6 <EEPROM_writeByte+0x72>
	TWI_writeByte((uint8) (u16addr));
 c8a:	89 81       	ldd	r24, Y+1	; 0x01
 c8c:	0e 94 b5 03 	call	0x76a	; 0x76a <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
 c90:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <TWI_getStatus>
 c94:	88 32       	cpi	r24, 0x28	; 40
 c96:	11 f0       	breq	.+4      	; 0xc9c <EEPROM_writeByte+0x58>
		return ERROR;
 c98:	1c 82       	std	Y+4, r1	; 0x04
 c9a:	0d c0       	rjmp	.+26     	; 0xcb6 <EEPROM_writeByte+0x72>
	TWI_writeByte(u8data);
 c9c:	8b 81       	ldd	r24, Y+3	; 0x03
 c9e:	0e 94 b5 03 	call	0x76a	; 0x76a <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
 ca2:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <TWI_getStatus>
 ca6:	88 32       	cpi	r24, 0x28	; 40
 ca8:	11 f0       	breq	.+4      	; 0xcae <EEPROM_writeByte+0x6a>
		return ERROR;
 caa:	1c 82       	std	Y+4, r1	; 0x04
 cac:	04 c0       	rjmp	.+8      	; 0xcb6 <EEPROM_writeByte+0x72>
	TWI_stop();
 cae:	0e 94 aa 03 	call	0x754	; 0x754 <TWI_stop>
	return SUCCESS;
 cb2:	81 e0       	ldi	r24, 0x01	; 1
 cb4:	8c 83       	std	Y+4, r24	; 0x04
 cb6:	8c 81       	ldd	r24, Y+4	; 0x04
}
 cb8:	0f 90       	pop	r0
 cba:	0f 90       	pop	r0
 cbc:	0f 90       	pop	r0
 cbe:	0f 90       	pop	r0
 cc0:	cf 91       	pop	r28
 cc2:	df 91       	pop	r29
 cc4:	08 95       	ret

00000cc6 <EEPROM_readByte>:
uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data) {
 cc6:	df 93       	push	r29
 cc8:	cf 93       	push	r28
 cca:	00 d0       	rcall	.+0      	; 0xccc <EEPROM_readByte+0x6>
 ccc:	00 d0       	rcall	.+0      	; 0xcce <EEPROM_readByte+0x8>
 cce:	0f 92       	push	r0
 cd0:	cd b7       	in	r28, 0x3d	; 61
 cd2:	de b7       	in	r29, 0x3e	; 62
 cd4:	9a 83       	std	Y+2, r25	; 0x02
 cd6:	89 83       	std	Y+1, r24	; 0x01
 cd8:	7c 83       	std	Y+4, r23	; 0x04
 cda:	6b 83       	std	Y+3, r22	; 0x03
	TWI_start();
 cdc:	0e 94 9a 03 	call	0x734	; 0x734 <TWI_start>
	if (TWI_getStatus() != TWI_START)
 ce0:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <TWI_getStatus>
 ce4:	88 30       	cpi	r24, 0x08	; 8
 ce6:	11 f0       	breq	.+4      	; 0xcec <EEPROM_readByte+0x26>
		return ERROR;
 ce8:	1d 82       	std	Y+5, r1	; 0x05
 cea:	44 c0       	rjmp	.+136    	; 0xd74 <EEPROM_readByte+0xae>
	TWI_writeByte((uint8) ((0xA0) | ((u16addr & 0x0700) >> 7)));
 cec:	89 81       	ldd	r24, Y+1	; 0x01
 cee:	9a 81       	ldd	r25, Y+2	; 0x02
 cf0:	80 70       	andi	r24, 0x00	; 0
 cf2:	97 70       	andi	r25, 0x07	; 7
 cf4:	88 0f       	add	r24, r24
 cf6:	89 2f       	mov	r24, r25
 cf8:	88 1f       	adc	r24, r24
 cfa:	99 0b       	sbc	r25, r25
 cfc:	91 95       	neg	r25
 cfe:	80 6a       	ori	r24, 0xA0	; 160
 d00:	0e 94 b5 03 	call	0x76a	; 0x76a <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
 d04:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <TWI_getStatus>
 d08:	88 31       	cpi	r24, 0x18	; 24
 d0a:	11 f0       	breq	.+4      	; 0xd10 <EEPROM_readByte+0x4a>
		return ERROR;
 d0c:	1d 82       	std	Y+5, r1	; 0x05
 d0e:	32 c0       	rjmp	.+100    	; 0xd74 <EEPROM_readByte+0xae>
	TWI_writeByte((uint8) (u16addr));
 d10:	89 81       	ldd	r24, Y+1	; 0x01
 d12:	0e 94 b5 03 	call	0x76a	; 0x76a <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
 d16:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <TWI_getStatus>
 d1a:	88 32       	cpi	r24, 0x28	; 40
 d1c:	11 f0       	breq	.+4      	; 0xd22 <EEPROM_readByte+0x5c>
		return ERROR;
 d1e:	1d 82       	std	Y+5, r1	; 0x05
 d20:	29 c0       	rjmp	.+82     	; 0xd74 <EEPROM_readByte+0xae>
	TWI_start();
 d22:	0e 94 9a 03 	call	0x734	; 0x734 <TWI_start>
	if (TWI_getStatus() != TWI_REP_START)
 d26:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <TWI_getStatus>
 d2a:	80 31       	cpi	r24, 0x10	; 16
 d2c:	11 f0       	breq	.+4      	; 0xd32 <EEPROM_readByte+0x6c>
		return ERROR;
 d2e:	1d 82       	std	Y+5, r1	; 0x05
 d30:	21 c0       	rjmp	.+66     	; 0xd74 <EEPROM_readByte+0xae>
	TWI_writeByte((uint8) ((0xA0) | ((u16addr & 0x0700) >> 7) | 1));
 d32:	89 81       	ldd	r24, Y+1	; 0x01
 d34:	9a 81       	ldd	r25, Y+2	; 0x02
 d36:	80 70       	andi	r24, 0x00	; 0
 d38:	97 70       	andi	r25, 0x07	; 7
 d3a:	88 0f       	add	r24, r24
 d3c:	89 2f       	mov	r24, r25
 d3e:	88 1f       	adc	r24, r24
 d40:	99 0b       	sbc	r25, r25
 d42:	91 95       	neg	r25
 d44:	81 6a       	ori	r24, 0xA1	; 161
 d46:	0e 94 b5 03 	call	0x76a	; 0x76a <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
 d4a:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <TWI_getStatus>
 d4e:	80 34       	cpi	r24, 0x40	; 64
 d50:	11 f0       	breq	.+4      	; 0xd56 <EEPROM_readByte+0x90>
		return ERROR;
 d52:	1d 82       	std	Y+5, r1	; 0x05
 d54:	0f c0       	rjmp	.+30     	; 0xd74 <EEPROM_readByte+0xae>
	*u8data = TWI_readByteWithNACK();
 d56:	0e 94 df 03 	call	0x7be	; 0x7be <TWI_readByteWithNACK>
 d5a:	eb 81       	ldd	r30, Y+3	; 0x03
 d5c:	fc 81       	ldd	r31, Y+4	; 0x04
 d5e:	80 83       	st	Z, r24
	if (TWI_getStatus() != TWI_MR_DATA_NACK)
 d60:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <TWI_getStatus>
 d64:	88 35       	cpi	r24, 0x58	; 88
 d66:	11 f0       	breq	.+4      	; 0xd6c <EEPROM_readByte+0xa6>
		return ERROR;
 d68:	1d 82       	std	Y+5, r1	; 0x05
 d6a:	04 c0       	rjmp	.+8      	; 0xd74 <EEPROM_readByte+0xae>
	TWI_stop();
 d6c:	0e 94 aa 03 	call	0x754	; 0x754 <TWI_stop>
	return SUCCESS;
 d70:	81 e0       	ldi	r24, 0x01	; 1
 d72:	8d 83       	std	Y+5, r24	; 0x05
 d74:	8d 81       	ldd	r24, Y+5	; 0x05
}
 d76:	0f 90       	pop	r0
 d78:	0f 90       	pop	r0
 d7a:	0f 90       	pop	r0
 d7c:	0f 90       	pop	r0
 d7e:	0f 90       	pop	r0
 d80:	cf 91       	pop	r28
 d82:	df 91       	pop	r29
 d84:	08 95       	ret

00000d86 <main>:
int main()
{
 d86:	df 93       	push	r29
 d88:	cf 93       	push	r28
 d8a:	cd b7       	in	r28, 0x3d	; 61
 d8c:	de b7       	in	r29, 0x3e	; 62
 d8e:	ff cf       	rjmp	.-2      	; 0xd8e <main+0x8>

00000d90 <__udivmodsi4>:
 d90:	a1 e2       	ldi	r26, 0x21	; 33
 d92:	1a 2e       	mov	r1, r26
 d94:	aa 1b       	sub	r26, r26
 d96:	bb 1b       	sub	r27, r27
 d98:	fd 01       	movw	r30, r26
 d9a:	0d c0       	rjmp	.+26     	; 0xdb6 <__udivmodsi4_ep>

00000d9c <__udivmodsi4_loop>:
 d9c:	aa 1f       	adc	r26, r26
 d9e:	bb 1f       	adc	r27, r27
 da0:	ee 1f       	adc	r30, r30
 da2:	ff 1f       	adc	r31, r31
 da4:	a2 17       	cp	r26, r18
 da6:	b3 07       	cpc	r27, r19
 da8:	e4 07       	cpc	r30, r20
 daa:	f5 07       	cpc	r31, r21
 dac:	20 f0       	brcs	.+8      	; 0xdb6 <__udivmodsi4_ep>
 dae:	a2 1b       	sub	r26, r18
 db0:	b3 0b       	sbc	r27, r19
 db2:	e4 0b       	sbc	r30, r20
 db4:	f5 0b       	sbc	r31, r21

00000db6 <__udivmodsi4_ep>:
 db6:	66 1f       	adc	r22, r22
 db8:	77 1f       	adc	r23, r23
 dba:	88 1f       	adc	r24, r24
 dbc:	99 1f       	adc	r25, r25
 dbe:	1a 94       	dec	r1
 dc0:	69 f7       	brne	.-38     	; 0xd9c <__udivmodsi4_loop>
 dc2:	60 95       	com	r22
 dc4:	70 95       	com	r23
 dc6:	80 95       	com	r24
 dc8:	90 95       	com	r25
 dca:	9b 01       	movw	r18, r22
 dcc:	ac 01       	movw	r20, r24
 dce:	bd 01       	movw	r22, r26
 dd0:	cf 01       	movw	r24, r30
 dd2:	08 95       	ret

00000dd4 <_exit>:
 dd4:	f8 94       	cli

00000dd6 <__stop_program>:
 dd6:	ff cf       	rjmp	.-2      	; 0xdd6 <__stop_program>
